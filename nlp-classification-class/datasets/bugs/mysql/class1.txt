{"ID_DEFECT":"21704","DESCRIPTION":"     [17 AUG 2006 22:21]   KOLBE KEGEL          DESCRIPTION:RENAMING A COLUMN THAT APPEARS IN A FOREIGN KEY DEFINITION DOES NOT UPDATE THE FORIEGN KEY DEFINITION WITH THE NEW COLUMN NAME.THIS OCCURS WITH BOTH REFERENCED AND REFERENCING TABLES.THIS COULD MEAN THAT IT COULD BE IMPOSSIBLE TO RELOAD FROM A DUMP, AS CREATING CONSTRAINTS AGAINST NON-EXISTENT COLUMNS WOULD SURELY NOT WORK VERY WELL.HOW TO REPEAT:CREATE TABLE T1 (COL1 INT PRIMARY KEY) ENGINE=INNODB;CREATE TABLE T2 (COL1 INT PRIMARY KEY, CONSTRAINT `FK1` FOREIGN KEY (COL1) REFERENCES T1 (COL1)) ENGINE=INNODB;SHOW CREATE TABLE T2ALTER TABLE T2 CHANGE COL1 COL2 INT;SHOW CREATE TABLE T2ALTER TABLE T1 CHANGE COL1 COL3 INT;SHOW CREATE TABLE T2MYSQL 5.1.11-BETA (ROOT) [TEST]> CREATE TABLE T1 (COL1 INT PRIMARY KEY) ENGINE=INNODB;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)MYSQL 5.1.11-BETA (ROOT) [TEST]> CREATE TABLE T2 (COL1 INT PRIMARY KEY, CONSTRAINT `FK1` FOREIGN KEY (COL1) REFERENCES T1 (COL1)) ENGINE=INNODB;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)MYSQL 5.1.11-BETA (ROOT) [TEST]> SHOW CREATE TABLE T2*************************** 1. ROW ***************************       TABLE: T2CREATE TABLE: CREATE TABLE `T2` (  `COL1` INT(11) NOT NULL,  PRIMARY KEY (`COL1`),  CONSTRAINT `FK1` FOREIGN KEY (`COL1`) REFERENCES `T1` (`COL1`)) ENGINE=INNODB DEFAULT CHARSET=LATIN11 ROW IN SET (0.00 SEC)MYSQL 5.1.11-BETA (ROOT) [TEST]> ALTER TABLE T2 CHANGE COL1 COL2 INT;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)RECORDS: 0  DUPLICATES: 0  WARNINGS: 0MYSQL 5.1.11-BETA (ROOT) [TEST]> SHOW CREATE TABLE T2*************************** 1. ROW ***************************       TABLE: T2CREATE TABLE: CREATE TABLE `T2` (  `COL2` INT(11) NOT NULL DEFAULT 0,  PRIMARY KEY (`COL2`),  CONSTRAINT `FK1` FOREIGN KEY (`COL1`) REFERENCES `T1` (`COL1`)) ENGINE=INNODB DEFAULT CHARSET=LATIN11 ROW IN SET (0.00 SEC)MYSQL 5.1.11-BETA (ROOT) [TEST]> ALTER TABLE T1 CHANGE COL1 COL3 INT;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)RECORDS: 0  DUPLICATES: 0  WARNINGS: 0MYSQL 5.1.11-BETA (ROOT) [TEST]> SHOW CREATE TABLE T2*************************** 1. ROW ***************************       TABLE: T2CREATE TABLE: CREATE TABLE `T2` (  `COL2` INT(11) NOT NULL DEFAULT 0,  PRIMARY KEY (`COL2`),  CONSTRAINT `FK1` FOREIGN KEY (`COL1`) REFERENCES `T1` (`COL1`)) ENGINE=INNODB DEFAULT CHARSET=LATIN11 ROW IN SET (0.00 SEC)THE CONSTRAINT IS STILL CHECKED, EVEN THOUGH *NEITHER* OF THE COLUMNS SPECIFIED IN THE CONSTRAINT DEFINITION EXIST:INSERT INTO T2 VALUES (1);INSERT INTO T1 VALUES (1);INSERT INTO T2 VALUES (1);MYSQL 5.1.11-BETA (ROOT) [TEST]> INSERT INTO T2 VALUES (1);ERROR 1452 (23000): CANNOT ADD OR UPDATE A CHILD ROW: A FOREIGN KEY CONSTRAINT FAILS (`TESTT2`, CONSTRAINT `FK1` FOREIGN KEY (`COL1`) REFERENCES `T1` (`COL1`))MYSQL 5.1.11-BETA (ROOT) [TEST]> INSERT INTO T1 VALUES (1);QUERY OK, 1 ROW AFFECTED (0.00 SEC)MYSQL 5.1.11-BETA (ROOT) [TEST]> INSERT INTO T2 VALUES (1);QUERY OK, 1 ROW AFFECTED (0.00 SEC)SUGGESTED FIX:RENAMING COLUMNS SHOULD RESULT IN FOREIGN KEY DEFINITIONS BEING UPDATED APPROPRIATELY. ","SUMMARY":"BUGU00A0#21704  RENAMING COLUMN DOES NOT UPDATE FK DEFINITION ","CLASS":1}
{"ID_DEFECT":"35226","DESCRIPTION":"     [11 MAR 2008 17:25]   MATTHEW LORD          DESCRIPTION:A ROW BASED REPLICATION EVENT CRASHES THE SLAVE SERVER EVERY TIME AND REQUIRESTHAT THE SLAVE BE REBUILT.WHEN TESTED WITH A SNAPSHOT OF 5.1.24 (TAKEN ON 372008) WE ALSO ENCOUNTEREDTHE CRASH, HERE WAS THE STACK TRACE IN THE ERROR LOG:APPMYSQLBINMYSQLD(PRINT_STACKTRACE+0X1E)[0X74BAEE]APPMYSQLBINMYSQLD(HANDLE_SEGFAULT+0X320)[0X615F20]LIB64LIBPTHREAD.SO.0[0X3A8E40DE60]APPMYSQLBINMYSQLD(DICT_STR_STARTS_WITH_KEYWORD+0X15)[0X7EB155]APPMYSQLBINMYSQLD(ROW_SEARCH_FOR_MYSQL+0X4B3)[0X8512B3]APPMYSQLBINMYSQLD(_ZN11HA_INNOBASE10INDEX_READEPHPKHJ16HA_RKEY_FUNCTION+0X1CD)[0X7C39AD]APPMYSQLBINMYSQLD(_ZN11HA_INNOBASE7RND_POSEPHS0_+0X9B)[0X7C364B]APPMYSQLBINMYSQLD(_ZN14ROWS_LOG_EVENT8FIND_ROWEPK14RELAY_LOG_INFO+0X2D6)[0X6CE086]APPMYSQLBINMYSQLD(_ZN21UPDATE_ROWS_LOG_EVENT11DO_EXEC_ROWEPK14RELAY_LOG_INFO+0X1E)[0X6CE19E]APPMYSQLBINMYSQLD(_ZN14ROWS_LOG_EVENT14DO_APPLY_EVENTEPK14RELAY_LOG_INFO+0X172)[0X6C9CD2]APPMYSQLBINMYSQLD(_Z26APPLY_EVENT_AND_UPDATE_POSP9LOG_EVENTP3THDP14RELAY_LOG_INFOB+0X11D)[0X73A95D]APPMYSQLBINMYSQLD(HANDLE_SLAVE_SQL+0X687)[0X73FBA7]LIB64LIBPTHREAD.SO.0[0X3A8E4062E7]LIB64LIBC.SO.6(CLONE+0X6D)[0X3A8D8CE3BD] HOW TO REPEAT:TAR XZVF CSC23899_BUG.TAR.GZCD CSC23899_BUGMYSQL-5.1.23-RC-LINUX-X86_64-GLIBC23.BINMYSQLD_SAFE --DEFAULTS-FILE=..MY.CNF --BASEDIR=. --DATADIR=..DATA &.BINMYSQL -U ROOT --SOCKET=TMPMYSQL-CSC23899.SOCKSHOW SLAVE STATUSSTART SLAVE SQL_THREAD;(SO FAR ONLY TESTED ON X86_64)SUGGESTED FIX:WE SHOULD HOPEFULLY ALWAYS BE ABLE TO PROCESS THE EVENT OR DIE GRACEFULLY. ","SUMMARY":"BUGU00A0#35226  RBR EVENT CRASHES SLAVE ","CLASS":1}
{"ID_DEFECT":"36278","DESCRIPTION":"     [23 APR 2008 9:19]   DOMAS MITUZAS          DESCRIPTION:AFTER BUG#32440 WAS FIXED, INFORMATION ABOUT FREE TABLE SPACE WAS PLACED TO DATA_FREE COLUMN, BUT UNLIKE OTHER ENGINES (AND UNLIKE OTHER FIELDS) THE DATA THERE IS IN KILOBYTES, WHAT MAY CAUSE LOTS OF CONFUSION. KEEPING CONSISTENT BEHAVIOR WOULD BE NICE. HOW TO REPEAT:SHOW TABLE STATUS;SUGGESTED FIX:BE CONSISTENT, USE BYTES. ","SUMMARY":"BUGU00A0#36278  DATA_FREE IN SHOW TABLE STATUS FOR INNODB IS IN KILOBYTES ","CLASS":1}
{"ID_DEFECT":"36411","DESCRIPTION":"     [29 APR 2008 19:46]   SHANE BESTER          DESCRIPTION:THIS MAY OR MAY NOT BE A BUG, BUT ILL OPEN THE BUG REPORT ANYWAY, SINCE 5.1.23 DIDNT HAVE THIS PROBLEM.  5.1.23 AND 5.0.58 BEHAVIOUR DIFFERS TO 5.1.24.USING THE STATEMENTS IN HOW TO REPEAT, WE HAVE THE OUTPUT IN 5.1.24:MYSQL> INSERT INTO `QA05` SET `ID` = 2;QUERY OK, 1 ROW AFFECTED (0.00 SEC)MYSQL> INSERT INTO `QA05` SET `ID` = -1;QUERY OK, 1 ROW AFFECTED (0.00 SEC)MYSQL> INSERT INTO `QA05` SET `ID` = -1;ERROR 1062 (23000): DUPLICATE ENTRY -1 FOR KEY PRIMARYMYSQL> INSERT INTO `QA05` SET `ID` = -1;ERROR 1062 (23000): DUPLICATE ENTRY -1 FOR KEY PRIMARYMYSQL> INSERT INTO `QA05` VALUES ();ERROR 1467 (HY000): FAILED TO READ AUTO-INCREMENT VALUE FROM STORAGE ENGINETHE AUTO_INCREMENT VALUE IN SHOW TABLE STATUS SAYS 18446744073709551615.AND THIS OUTPUT IN 5.0.58 AND 5.1.23:MYSQL> INSERT INTO `QA05` SET `ID` = -1;ERROR 1062 (23000): DUPLICATE ENTRY -1 FOR KEY 1MYSQL> INSERT INTO `QA05` SET `ID` = -1;ERROR 1062 (23000): DUPLICATE ENTRY -1 FOR KEY 1MYSQL> INSERT INTO `QA05` VALUES ();QUERY OK, 1 ROW AFFECTED (0.00 SEC)FOR WHAT REASON DOES THE 1ST AND 2ND INSERT GIVE ERROR 1062, AND THETHIRD INSERT RETURN ERROR 1467 ON 5.1.24?  THEN, IF YOU COMMENT OUT THE 1ST SHOW TABLE STATUS, THE RESULTS AREDIFFERENT.  WHY DOES THE SHOW TABLE STATUS HAVE ANY EFFECT ON THIS - GIVEN THE FACT THE AUTO-INC SHOULD BE INITIALIZED BY THE FIRST INSERT.I READ:HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENINNODB-AUTO-INCREMENT-HANDLING.HTML THE BEHAVIOR OF THE AUTO-INCREMENT MECHANISM IS NOT DEFINED IF A USER ASSIGNS A NEGATIVE VALUE TO THE COLUMN OR IF THE VALUE BECOMES BIGGER THAN THE MAXIMUM INTEGER THAT CAN BE STORED IN THE SPECIFIED INTEGER TYPE. SHOULD WE DEFINE THE BEHAVIOUR BETTER?  SHOULD USER-MODE SQL STATEMENTS RESULT IN STORAGE ENGINE ERRORS?HOW TO REPEAT:DROP TABLE IF EXISTS `QA05`;CREATE TABLE `QA05` (`ID` INT AUTO_INCREMENT PRIMARY KEY)ENGINE=INNODB;INSERT INTO `QA05` SET `ID` = 1;SHOW TABLE STATUS LIKE QA05;INSERT INTO `QA05` SET `ID` = 2;INSERT INTO `QA05` SET `ID` = -1;INSERT INTO `QA05` SET `ID` = -1;INSERT INTO `QA05` SET `ID` = -1;INSERT INTO `QA05` VALUES ();SHOW TABLE STATUS LIKE QA05;SUGGESTED FIX:WE HAVE SOME EXPLANATION, BECAUSE 5.1.23->5.1.24 BEHAVIOUR CHANGED, AT LEAST.PERHAPS THE FIX FOR BUG #34335 CAUSES THIS NEW BEHAVIOUR? ","SUMMARY":"BUGU00A0#36411  FAILED TO READ AUTO-INCREMENT VALUE FROM STORAGE ENGINE IN 5.1.24 AUTO-INC ","CLASS":1}
{"ID_DEFECT":"37531","DESCRIPTION":"     [19 JUN 2008 19:38]   RYAN THIESSEN          DESCRIPTION:AFTER A TRUNCATE OPERATION, THE AUTO_INCREMENT COUNTER DOES NOT WORK PROPERLY WHEN YOU INSERT SPECIFIC VALUES FOR THE AUTO_INCREMENT FIELD.IDEALLY AFTER A TRUNCATE OPERATION, INSERT OPERATIONS SHOULD BEHAVE EXACTLY AS THEY DO AFTER THE CREATE TABLE OPERATION.TESTED ON 5.1.25INNODBLINUXWINDOWS; 5.1.22INNODBLINUXCANNOT REPEAT FAILURE ON 5.0.58INNODBLINUX OR 5.1.25MYISAMLINUXHOW TO REPEAT:CREATE TABLE AUTOINC_TRUNCATE_BUG(PK INT PRIMARY KEY AUTO_INCREMENT) ENGINE=INNODB;INSERT INTO AUTOINC_TRUNCATE_BUG VALUES (1), (2), (3);INSERT INTO AUTOINC_TRUNCATE_BUG VALUES (NULL), (NULL), (NULL);TRUNCATE TABLE AUTOINC_TRUNCATE_BUG;INSERT INTO AUTOINC_TRUNCATE_BUG VALUES (1), (2), (3);# SUCCEEDS, BUT AUTO_INCREMENT COUNTER NOT UPDATEDINSERT INTO AUTOINC_TRUNCATE_BUG VALUES (NULL), (NULL), (NULL);# FINAL INSERT FAILS WITH DUPLICATE KEY ERROR ","SUMMARY":"BUGU00A0#37531  AFTER TRUNCATE, AUTO_INCREMENT BEHAVES INCORRECTLY FOR INNODB ","CLASS":1}
{"ID_DEFECT":"38189","DESCRIPTION":"     [16 JUL 2008 23:06]   MARK LEITH          DESCRIPTION:THE INNODB_STATS_ON_METADATA VARIABLE WAS INTRODUCED IN 5.1.17. IT SEEMS TO BE MISSING WITHIN 5.1.28:HTTP:BUGS.MYSQL.COMBUG.PHP?ID=26598MYSQL> SHOW GLOBAL VARIABLES LIKE INNODB_STATS%;EMPTY SET (0.00 SEC)MYSQL> SELECT VERSION();+--------------+| VERSION()    |+--------------+| 5.1.28-DEBUG | +--------------+1 ROW IN SET (0.00 SEC)THIS APPEARS TO BE A REGRESSION WITHIN THE 5.1 RANGE. HOW TO REPEAT:SHOW GLOBAL VARIABLES LIKE INNODB_STATS_ON_METADATA;SUGGESTED FIX:RE-ADD THIS VARIABLE - IT SEEMS TO HAVE BEEN MISSED IN AN INTERIM RE-WORKING COMMIT FROM THE INNODB DEVELOPERS ","SUMMARY":"BUGU00A0#38189  INNODB_STATS_ON_METADATA MISSING ","CLASS":1}
{"ID_DEFECT":"39648","DESCRIPTION":"     [25 SEP 2008 10:34]   PHILIP STOEV          DESCRIPTION:WHEN REPLICATING A INNODB TABLE CONTAINING TWO BIT COLUMNS BUT NO PK, USING RBR, A QUERY CONTAINING LIMIT WILL CAUSE THE REPLICATION TO FAIL WITH:COULD NOT EXECUTE DELETE_ROWS EVENT ON TABLE TEST.TABLE0_INNODB; HANDLER ERROR HA_ERR_END_OF_FILEHOW TO REPEAT:--SOURCE INCLUDEMASTER-SLAVE.INC--INCUDE INCLUDEHAVE_INNODB.INCCREATE TABLE T1 (`BIT` BIT, `BIT2` BIT) ENGINE=INNODB;INSERT INTO T1 ( `BIT` ) VALUES ( 0 );DELETE FROM T1 WHERE `BIT` < 2 LIMIT 1;--SAVE_MASTER_POS--CONNECTION SLAVE--SYNC_WITH_MASTERSHOW SLAVE STATUS; ","SUMMARY":"BUGU00A0#39648  REPLICATION FAILURE ON RBR + INNODB + 2 BIT FIELDS + LIMIT + NO PK ","CLASS":1}
{"ID_DEFECT":"40360","DESCRIPTION":"     [27 OCT 2008 20:27]   DAVID STAVISSKI          DESCRIPTION:AFTER UPGRADING TO 5.1.28 FROM 5.1.28 GETTING AN ERROR MESSAGE ON EVERY UPDATE:BINARY LOGGING NOT POSSIBLE. MESSAGE: TRANSACTION LEVEL READ-COMMITTED IN INNODB IS NOT SAFE FOR BINLOG MODE STATEMENTTHE BINLOG AND REPLICATION IS OFF.HOW TO REPEAT:SET TRANSACTION ISOLATION TO READ COMMITEDUPDATE A TABLE ROW ","SUMMARY":"BUGU00A0#40360  BINLOG RELATED ERRORS WITH BINLOG OFF ","CLASS":1}
{"ID_DEFECT":"40369","DESCRIPTION":"     [28 OCT 2008 9:17]   MARKO MU00E4KELU00E4          DESCRIPTION:THE FUNCTION DTYPE_GET_SQL_NULL_SIZE() SHOULD RETURN THE STORAGE SIZE OF A COLUMN THAT IS SQL NULL. FOR FIXED-LENGTH COLUMNS IN ROW_FORMAT=REDUNDANT, THE SIZE SHOULD BE EQUAL TO THE FIXED LENGTH. HOWEVER, THIS FUNCTION WOULD RETURN 1.IN NEWER INNODB ROW_FORMATS (COMPACT IS THE DEFAULT SINCE 5.0.3, AND THE INNODB PLUGIN INTRODUCED DYNAMIC AND COMPRESSED), SQL NULL COLUMNS OCCUPY ZERO SPACE. IN THIS CASE, THE FUNCTION CORRECTLY RETURNS 0.HOW TO REPEAT:UNSURE, BUT SOMETHING ALONG THESE LINES:CREATE TABLE T(A CHAR(5)) ENGINE=INNODB ROW_FORMAT=REDUNDANT;INSERT INTO T VALUES(NULL);SUGGESTED FIX:REMOVE THE > 0 IN THE FUNCTION BODY OF DTYPE_GET_SQL_NULL_SIZE(). ","SUMMARY":"BUGU00A0#40369  DTYPE_GET_SQL_NULL_SIZE() RETURNS 0 OR 1, NOT THE SIZE ","CLASS":1}
{"ID_DEFECT":"41671","DESCRIPTION":"     [22 DEC 2008 12:03]   MARKO MU00E4KELU00E4          DESCRIPTION:IN REVISION 370 OF THE INNODB SOURCE REPOSITORY (2006-03-27), EVERY OCCURRENCE OFSRV_LOCKS_UNSAFE_FOR_BINLOGSHOULD HAVE BEEN ESSENTIALLY REPLACED WITHSRV_LOCKS_UNSAFE_FOR_BINLOG || ISOLATION_LEVEL == TRX_ISO_READ_COMMITTEDTHAT IS, SEMI-CONSISTENT READS SHOULD BE ENABLED WITH EITHER OF THE FOLLOWING:SET GLOBAL INNODB_LOCKS_UNSAFE_FOR_BINLOG=1;SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;HOWEVER, THIS IS NOT THE CASE IN HA_INNOBASE::UNLOCK_ROW(VOID).  THE BUG IS THAT NON-MATCHING SEMI-CONSISTENTLY READ ROWS WILL NOT BE UNLOCKED WHEN BOTH OF THE ABOVE COMMANDS HAVE BEEN SPECIFIED.HOW TO REPEAT:NOTE IN INNODB-SEMI-CONSISTENT.TEST THAT THE SELECT STATEMENTS ARE OBVIOUSLY NOT UNLOCKING NON-MATCHING ROWS.SUGGESTED FIX:INDEX: HANDLERHA_INNODB.CC===================================================================--- HANDLERHA_INNODB.CCT(REVISION 3590)+++ HANDLERHA_INNODB.CCT(WORKING COPY)@@ -4129,7 +4129,8 @@ HA_INNOBASE::UNLOCK_ROW(VOID) TSWITCH (PREBUILT->ROW_READ_TYPE)  TCASE ROW_READ_WITH_LOCKS: TTIF (!SRV_LOCKS_UNSAFE_FOR_BINLOG-TT|| PREBUILT->TRX->ISOLATION_LEVEL == TRX_ISO_READ_COMMITTED) +TT    && PREBUILT->TRX->ISOLATION_LEVEL+TT    != TRX_ISO_READ_COMMITTED)  TTTBREAK; TT TT* FALL THROUGH * ","SUMMARY":"BUGU00A0#41671  SEMI-CONSISTENT READ DOES NOT UNLOCK ROWS IN READ COMMITTED MODE ","CLASS":1}
{"ID_DEFECT":"42400","DESCRIPTION":"     [28 JAN 2009 5:37]   SUNNY BAINS          DESCRIPTION:THIS BUG WAS REPORTED BY A USER OF THE INNODB PLUGIN VERSION HERE:  HTTP:FORUMS.INNODB.COMREAD.PHP?3,400,400#MSG-400INNODB WITH THE LATEST AUTOINC CHANGES ASSUMES THAT THE AUTOINC COLUMN TYPE CAN ONLY BE AN INTEGER. THIS ASSERTION CAUSES A CRASH.HOW TO REPEAT:CREATE TABLE T1 (        C1 DOUBLE NOT NULL AUTO_INCREMENT,        C2 INT,        PRIMARY KEY (C1)) ENGINE=INNODB DEFAULT CHARSET=LATIN1;INSERT INTO T1 VALUES(, 1);INSERT INTO T1 VALUES(, 2);SELECT * FROM T1;ALTER TABLE T1 CHANGE C1 C1 SERIAL; SELECT * FROM T1;INSERT INTO T1 VALUES(, 3);INSERT INTO T1 VALUES(, 4);SELECT * FROM T1;DROP TABLE T1;CREATE TABLE T1 (        C1 FLOAT NOT NULL AUTO_INCREMENT,        C2 INT,        PRIMARY KEY (C1)) ENGINE=INNODB DEFAULT CHARSET=LATIN1;INSERT INTO T1 VALUES(, 1);INSERT INTO T1 VALUES(, 2);SELECT * FROM T1;ALTER TABLE T1 CHANGE C1 C1 SERIAL; SELECT * FROM T1;INSERT INTO T1 VALUES(, 3);INSERT INTO T1 VALUES(, 4);SELECT * FROM T1;DROP TABLE T1;SUGGESTED FIX:CHECK FOR FLOATING-POINT COLUMN TYPES WHEN CALCULATING THE MAX VALUE FOR A COLUMN TYPE. ************************************************************************-GET THE UPPER LIMIT OF THE MYSQL INTEGRAL TYPE. *+GET THE UPPER LIMIT OF THE MYSQL INTEGRAL AND FLOATING-POINT TYPE. * ULONGLONG HA_INNOBASE::INNOBASE_GET_INT_COL_MAX_VALUE(@@ -3439,6 +3439,7 @@ HA_INNOBASE::INNOBASE_GET_INT_COL_MAX_VA                MAX_VALUE = 0XFFFFFFFFULL;                BREAK;        CASE HA_KEYTYPE_LONG_INT:+       CASE HA_KEYTYPE_FLOAT:                MAX_VALUE = 0X7FFFFFFFULL;                BREAK;        * BIG *@@ -3446,6 +3447,7 @@ HA_INNOBASE::INNOBASE_GET_INT_COL_MAX_VA                MAX_VALUE = 0XFFFFFFFFFFFFFFFFULL;                BREAK;        CASE HA_KEYTYPE_LONGLONG:+       CASE HA_KEYTYPE_DOUBLE:                MAX_VALUE = 0X7FFFFFFFFFFFFFFFULL;                BREAK;        DEFAULT: ","SUMMARY":"BUGU00A0#42400  INNODB AUTOINC CODE CANT HANDLE FLOATING-POINT COLUMNS ","CLASS":1}
{"ID_DEFECT":"42714","DESCRIPTION":"     [9 FEB 2009 19:51]   SINGER WANG          DESCRIPTION:ERRONEOUS DUPLICATE KEY ERROR IN MYSQL 5.1.31 WHEN WE ARE INSERTING INTO AUTO_INCREMENT COLUMNS..HOW TO REPEAT:<PRE>CREATE TABLE TEST_A (  `A` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,  `B` INT(10) UNSIGNED NOT NULL,  `C` ENUM(FALSE,TRUE) DEFAULT NULL,  PRIMARY KEY (`A`)) ENGINE = INNODB;CREATE TABLE TEST_B (  `M` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,  `N` INT(10) UNSIGNED NOT NULL,  `O` ENUM(FALSE,TRUE) DEFAULT NULL,  PRIMARY KEY (`M`)) ENGINE = INNODB;NOTE THAT YOU MUST USE A 5.1.31 CLIENT AND 5.1.31 SERVER<PRE>INSERT INTO TEST_B (N,O) VALUES (1 , TRUE), (1 , FALSE), (2 , TRUE), (2 , FALSE), (3 , TRUE), (3 , FALSE), (4 , TRUE), (4 , FALSE), (5 , TRUE), (5 , FALSE);INSERT INTO TEST_A (B,C) SELECT N,O FROM TEST_B ;INSERT INTO TEST_A (B,C) SELECT N,O FROM TEST_B ;SELECT * FROM TEST_A;INSERT INTO TEST_A (B,C) SELECT N,O FROM TEST_B WHERE O = FALSE;SELECT * FROM TEST_A;INSERT INTO TEST_A (B,C) SELECT N,O FROM TEST_B WHERE O = FALSE;<PRE>SUGGESTED FIX:NO IDEA ","SUMMARY":"BUGU00A0#42714  AUTO_INCREMENT ERRORS IN 5.1.31 ","CLASS":1}
{"ID_DEFECT":"43203","DESCRIPTION":"     [25 FEB 2009 17:42]   COLIN GUTHRIE          DESCRIPTION:THE SERVER CAN CRASH WHEN THE VALUE OVERFLOW THE DATA STORAGE DURING AND AUTO_INCREMENT INSERT OPERATION.HOW TO REPEAT:SETUP THE TABLES:DROP TABLE IF EXISTS OVERFLOW_SOURCE;DROP TABLE IF EXISTS OVERFLOW_DEST;CREATE TABLE OVERFLOW_SOURCE(ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY) ENGINE=INNODB;INSERT INTO OVERFLOW_SOURCE VALUES (NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL);CREATE TABLE OVERFLOW_DEST(ID TINYINT(3) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY) ENGINE=INNODB;-- SELECTING THE ID FIELD SPECIFICALLY WORKS AS EXPECTEDTEST> INSERT INTO OVERFLOW_DEST SELECT ID FROM OVERFLOW_SOURCE;ERROR 1062 (23000): DUPLICATE ENTRY 255 FOR KEY PRIMARYTEST> SELECT * FROM OVERFLOW_DEST;EMPTY SET (0.00 SEC)-- SELECTING A NULL VALUE TO TRIGGER AUTO-INCREMENT FAILS, BADLY!TEST> INSERT INTO OVERFLOW_DEST SELECT NULL FROM OVERFLOW_SOURCE;ERROR 2013 (HY000): LOST CONNECTION TO MYSQL SERVER DURING QUERYTEST>-- IF WE REDUCE OUR DATASET SO THAT AUTO-INCREMENT VALUES WILL NOT GO OVER OUR LIMIT, THINGS WORK AGAIN:TEST> DELETE FROM OVERFLOW_SOURCE LIMIT 1;ERROR 2006 (HY000): MYSQL SERVER HAS GONE AWAYNO CONNECTION. TRYING TO RECONNECT...CONNECTION ID:    1CURRENT DATABASE: TESTQUERY OK, 1 ROW AFFECTED (0.01 SEC)TEST> INSERT INTO OVERFLOW_DEST SELECT NULL FROM OVERFLOW_SOURCE;QUERY OK, 255 ROWS AFFECTED (0.01 SEC)RECORDS: 255  DUPLICATES: 0  WARNINGS: 0HERE IS THE APPROPRIATE INFO FROM THE LOG:090225 17:27:27  INNODB: ASSERTION FAILURE IN THREAD 140583524956496 IN FILE HANDLERHA_INNODB.CC LINE 7651INNODB: FAILING ASSERTION: PREBUILT->AUTOINC_LAST_VALUE >= *FIRST_VALUEINNODB: WE INTENTIONALLY GENERATE A MEMORY TRAP.INNODB: SUBMIT A DETAILED BUG REPORT TO HTTP:BUGS.MYSQL.COM.INNODB: IF YOU GET REPEATED ASSERTION FAILURES OR CRASHES, EVENINNODB: IMMEDIATELY AFTER THE MYSQLD STARTUP, THERE MAY BEINNODB: CORRUPTION IN THE INNODB TABLESPACE. PLEASE REFER TOINNODB: HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENFORCING-RECOVERY.HTMLINNODB: ABOUT FORCING RECOVERY.090225 17:27:27 - MYSQLD GOT SIGNAL 6 ;THIS COULD BE BECAUSE YOU HIT A BUG. IT IS ALSO POSSIBLE THAT THIS BINARYOR ONE OF THE LIBRARIES IT WAS LINKED AGAINST IS CORRUPT, IMPROPERLY BUILT,OR MISCONFIGURED. THIS ERROR CAN ALSO BE CAUSED BY MALFUNCTIONING HARDWARE.WE WILL TRY OUR BEST TO SCRAPE UP SOME INFO THAT WILL HOPEFULLY HELP DIAGNOSETHE PROBLEM, BUT SINCE WE HAVE ALREADY CRASHED, SOMETHING IS DEFINITELY WRONGAND THIS MAY FAIL.KEY_BUFFER_SIZE=16777216READ_BUFFER_SIZE=262144MAX_USED_CONNECTIONS=2MAX_THREADS=151THREADS_CONNECTED=1IT IS POSSIBLE THAT MYSQLD COULD USE UP TOKEY_BUFFER_SIZE + (READ_BUFFER_SIZE + SORT_BUFFER_SIZE)*MAX_THREADS = 133885 KBYTES OF MEMORYHOPE THATS OK; IF NOT, DECREASE SOME VARIABLES IN THE EQUATION.THD: 0X1744590ATTEMPTING BACKTRACE. YOU CAN USE THE FOLLOWING INFORMATION TO FIND OUTWHERE MYSQLD DIED. IF YOU SEE NO MESSAGES AFTER THIS, SOMETHING WENTTERRIBLY WRONG...STACK_BOTTOM = 0X7FDC2710F0C8 THREAD_STACK 0X40000USRSBINMYSQLD(MY_PRINT_STACKTRACE+0X3C) [0X8A9F7C]USRSBINMYSQLD(HANDLE_SEGFAULT+0X393) [0X5DAE93]LIB64LIBPTHREAD.SO.0 [0X7FDC26D73D30]LIB64LIBC.SO.6(GSIGNAL+0X35) [0X7FDC25837A15]LIB64LIBC.SO.6(ABORT+0X183) [0X7FDC25839243]USRSBINMYSQLD [0X76EF08]USRSBINMYSQLD(HANDLER::UPDATE_AUTO_INCREMENT()+0X228) [0X6CAA98]USRSBINMYSQLD(HA_INNOBASE::WRITE_ROW(UNSIGNED CHAR*)+0X393) [0X76E233]USRSBINMYSQLD(HANDLER::HA_WRITE_ROW(UNSIGNED CHAR*)+0X83) [0X6CDBC3]USRSBINMYSQLD(WRITE_RECORD(THD*, ST_TABLE*, ST_COPY_INFO*)+0X6C) [0X65C45C]USRSBINMYSQLD(SELECT_INSERT::SEND_DATA(LIST<ITEM>&)+0XC0) [0X65CDC0]USRSBINMYSQLD [0X636978]USRSBINMYSQLD [0X6390E5]USRSBINMYSQLD(SUB_SELECT(JOIN*, ST_JOIN_TABLE*, BOOL)+0XA6) [0X645136]USRSBINMYSQLD [0X6455FD]USRSBINMYSQLD(JOIN::EXEC()+0X97D) [0X65664D]USRSBINMYSQLD(MYSQL_SELECT(THD*, ITEM***, TABLE_LIST*, UNSIGNED INT, LIST<ITEM>&, ITEM*, UNSIGNED INT, ST_ORDER*, ST_ORDER*, ITEM*, ST_ORDER*, UNSIGNED LONG LONG, SELECT_RESULT*, ST_SELECT_LEX_UNIT*, ST_SELECT_LEX*)+0X1B8) [0X652798]USRSBINMYSQLD(HANDLE_SELECT(THD*, ST_LEX*, SELECT_RESULT*, UNSIGNED LONG)+0X19C) [0X657F7C]USRSBINMYSQLD(MYSQL_EXECUTE_COMMAND(THD*)+0X50D1) [0X5EC541]USRSBINMYSQLD(MYSQL_PARSE(THD*, CHAR CONST*, UNSIGNED INT, CHAR CONST**)+0X240) [0X5ECCD0]USRSBINMYSQLD(DISPATCH_COMMAND(ENUM_SERVER_COMMAND, THD*, CHAR*, UNSIGNED INT)+0XDCF) [0X5EEE1F]USRSBINMYSQLD(DO_COMMAND(THD*)+0XF8) [0X5EF658]USRSBINMYSQLD(HANDLE_ONE_CONNECTION+0X22E) [0X5E227E]LIB64LIBPTHREAD.SO.0 [0X7FDC26D6C263]LIB64LIBC.SO.6(CLONE+0X6D) [0X7FDC258E378D]TRYING TO GET SOME VARIABLES.SOME POINTERS MAY BE INVALID AND CAUSE THE DUMP TO ABORT...THD->QUERY AT 0X179A750 = INSERT INTO OVERFLOW_DEST SELECT NULL FROM OVERFLOW_SOURCETHD->THREAD_ID=4THD->KILLED=NOT_KILLEDTHE MANUAL PAGE AT HTTP:DEV.MYSQL.COMDOCMYSQLENCRASHING.HTML CONTAINSINFORMATION THAT SHOULD HELP YOU FIND OUT WHAT IS CAUSING THE CRASH.SUGGESTED FIX:DUNNO! ","SUMMARY":"BUGU00A0#43203  OVERFLOW FROM AUTO INCREMENTING CAUSES SERVER SEGV ","CLASS":1}
{"ID_DEFECT":"44320","DESCRIPTION":"     [16 APR 2009 12:57]   PAUL DUBOIS          DESCRIPTION:INNODB TABLE MONITOR OUTPUT INCLUDES A SECTION FOR EACH INNODB TABLE. EACH SECTION BEGINS WITH A COLUMNS PART THAT LISTS TABLE COLUMNS, BOTH THOSE DEFINED IN THE CREATE TABLE STATEMENT AND THOSE ADDED INTERNALLY BY INNODB.BEFORE MYSQL 5.1, THE COLUMNS PART LISTS THE DB_ROLL_PTR COLUMN THAT IS ADDED INTERNALLY BY INNODB. FOR EXAMPLE:TABLE: NAME SYS_FOREIGN, ID 0 11, COLUMNS 8, INDEXES 3, APPR.ROWS 1  COLUMNS: ID: DATA_VARCHAR PRTYPE 1 LEN 0 PREC 0;           FOR_NAME: DATA_VARCHAR PRTYPE 1 LEN 0 PREC 0;           REF_NAME: DATA_VARCHAR PRTYPE 1 LEN 0 PREC 0;           N_COLS: DATA_INT LEN 4 PREC 0;           DB_ROW_ID: DATA_SYS DATA_ROW_ID LEN 6 PREC 0;           DB_TRX_ID: DATA_SYS DATA_TRX_ID LEN 6 PREC 0;           DB_ROLL_PTR: DATA_SYS DATA_ROLL_PTR LEN 7 PREC 0;  INDEX: NAME ID_IND, ID 0 11, FIELDS 16, TYPE 3   ROOT PAGE 46, APPR.KEY VALS 1, LEAF PAGES 1, SIZE PAGES 1   FIELDS:  ID DB_TRX_ID DB_ROLL_PTR FOR_NAME REF_NAME N_COLS...HOWEVER, AS OF MYSQL 5.1, DB_ROLL_PTR IS MISSING FROM COLUMNS, EVEN THOUGH IT IS USED (AS SHOWN BY THE DEFINITION OF THE CLUSTERED INDEX):TABLE: NAME SYS_FOREIGN, ID 0 11, COLUMNS 7, INDEXES 3, APPR.ROWS 1  COLUMNS: ID: DATA_VARCHAR DATA_ENGLISH LEN 0;            FOR_NAME: DATA_VARCHAR DATA_ENGLISH LEN 0;            REF_NAME: DATA_VARCHAR DATA_ENGLISH LEN 0;            N_COLS: DATA_INT LEN 4;           DB_ROW_ID: DATA_SYS PRTYPE 256 LEN 6;            DB_TRX_ID: DATA_SYS PRTYPE 257 LEN 6;   INDEX: NAME ID_IND, ID 0 11, FIELDS 16, UNIQ 1, TYPE 3    ROOT PAGE 46, APPR.KEY VALS 1, LEAF PAGES 1, SIZE PAGES 1   FIELDS:  ID DB_TRX_ID DB_ROLL_PTR FOR_NAME REF_NAME N_COLSHOW TO REPEAT:SEE ABOVE. ","SUMMARY":"BUGU00A0#44320  INNODB: MISSING DB_ROLL_PTR IN TABLE MONITOR COLUMNS OUTPUT ","CLASS":1}
{"ID_DEFECT":"44571","DESCRIPTION":"     [30 APR 2009 10:01]   SVETA SMIRNOVA          DESCRIPTION:WHEN DOING STATEMENT ALTER TABLE FOO ADD INDEX BAR(BAZ) INNODB PLUGIN CRASHES WITH FOLLOWING ENTRY IN ERROR LOG:VERSION: 5.1.35-DEBUG  SOCKET: TMPMYSQL_SSMIRNOVA.SOCK  PORT: 33051  SOURCE DISTRIBUTION090430 11:46:39 [ERROR] INDEX FOO$BAR OF DBNAMEFOO HAS 2 COLUMNS UNIQUE INSIDE INNODB, BUT MYSQL IS ASKING STATISTICS FOR 3 COLUMNS. HAVE YOU MIXED UP .FRM FILES FROM DIFFERENT INSTALLATIONS? SEE HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENINNODB-TROUBLESHOOTING.HTML090430 11:46:39 [ERROR] INDEX FOO$BAR OF DBNAMEFOO HAS 2 COLUMNS UNIQUE INSIDE INNODB, BUT MYSQL IS ASKING STATISTICS FOR 3 COLUMNS. HAVE YOU MIXED UP .FRM FILES FROM DIFFERENT INSTALLATIONS? SEE HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENINNODB-TROUBLESHOOTING.HTML090430 11:46:40 [ERROR] INDEX FOO$BAR OF DBNAMEFOO HAS 2 COLUMNS UNIQUE INSIDE INNODB, BUT MYSQL IS ASKING STATISTICS FOR 3 COLUMNS. HAVE YOU MIXED UP .FRM FILES FROM DIFFERENT INSTALLATIONS? SEE HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENINNODB-TROUBLESHOOTING.HTML090430 11:46:43 [ERROR] INDEX FOO$BAR OF DBNAMEFOO HAS 2 COLUMNS UNIQUE INSIDE INNODB, BUT MYSQL IS ASKING STATISTICS FOR 3 COLUMNS. HAVE YOU MIXED UP .FRM FILES FROM DIFFERENT INSTALLATIONS? SEE HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENINNODB-TROUBLESHOOTING.HTML090430 11:46:44 [ERROR] INDEX FOO$BAR OF DBNAMEFOO HAS 2 COLUMNS UNIQUE INSIDE INNODB, BUT MYSQL IS ASKING STATISTICS FOR 3 COLUMNS. HAVE YOU MIXED UP .FRM FILES FROM DIFFERENT INSTALLATIONS? SEE HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENINNODB-TROUBLESHOOTING.HTML090430 11:46:45 [ERROR] INDEX FOO$BAR OF DBNAMEFOO HAS 2 COLUMNS UNIQUE INSIDE INNODB, BUT MYSQL IS ASKING STATISTICS FOR 3 COLUMNS. HAVE YOU MIXED UP .FRM FILES FROM DIFFERENT INSTALLATIONS? SEE HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENINNODB-TROUBLESHOOTING.HTML090430 11:46:45  INNODB: ASSERTION FAILURE IN THREAD 2990918576 IN FILE DICTDICT0DICT.C LINE 1704INNODB: WE INTENTIONALLY GENERATE A MEMORY TRAP.INNODB: SUBMIT A DETAILED BUG REPORT TO HTTP:BUGS.MYSQL.COM.INNODB: IF YOU GET REPEATED ASSERTION FAILURES OR CRASHES, EVENINNODB: IMMEDIATELY AFTER THE MYSQLD STARTUP, THERE MAY BEINNODB: CORRUPTION IN THE INNODB TABLESPACE. PLEASE REFER TOINNODB: HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENFORCING-RECOVERY.HTMLINNODB: ABOUT FORCING RECOVERY.090430 11:46:45 - MYSQLD GOT SIGNAL 6 ;THIS COULD BE BECAUSE YOU HIT A BUG. IT IS ALSO POSSIBLE THAT THIS BINARYOR ONE OF THE LIBRARIES IT WAS LINKED AGAINST IS CORRUPT, IMPROPERLY BUILT,OR MISCONFIGURED. THIS ERROR CAN ALSO BE CAUSED BY MALFUNCTIONING HARDWARE.WE WILL TRY OUR BEST TO SCRAPE UP SOME INFO THAT WILL HOPEFULLY HELP DIAGNOSETHE PROBLEM, BUT SINCE WE HAVE ALREADY CRASHED, SOMETHING IS DEFINITELY WRONGAND THIS MAY FAIL.KEY_BUFFER_SIZE=8384512READ_BUFFER_SIZE=131072MAX_USED_CONNECTIONS=1MAX_THREADS=151THREADS_CONNECTED=1IT IS POSSIBLE THAT MYSQLD COULD USE UP TOKEY_BUFFER_SIZE + (READ_BUFFER_SIZE + SORT_BUFFER_SIZE)*MAX_THREADS = 337727 KBYTES OF MEMORYHOPE THATS OK; IF NOT, DECREASE SOME VARIABLES IN THE EQUATION.THD: 0XA496E10ATTEMPTING BACKTRACE. YOU CAN USE THE FOLLOWING INFORMATION TO FIND OUTWHERE MYSQLD DIED. IF YOU SEE NO MESSAGES AFTER THIS, SOMETHING WENTTERRIBLY WRONG...STACK_BOTTOM = 0XB245C448 THREAD_STACK 0X30000.LIBEXECMYSQLD(MY_PRINT_STACKTRACE+0X26)[0X86D5C69].LIBEXECMYSQLD(HANDLE_SEGFAULT+0X2DA)[0X8276ABA][0X2CE420]LIBLIBC.SO.6(ABORT+0XF8)[0X316678].LIBEXECMYSQLD[0X84FC78F].LIBEXECMYSQLD[0X84FC1E5].LIBEXECMYSQLD[0X858414A].LIBEXECMYSQLD[0X853FD7A].LIBEXECMYSQLD[0X853FE8D].LIBEXECMYSQLD[0X853FFA2].LIBEXECMYSQLD[0X854C114].LIBEXECMYSQLD[0X854C20A].LIBEXECMYSQLD[0X84DF4FD].LIBEXECMYSQLD(_Z17MYSQL_ALTER_TABLEP3THDPCS1_P24ST_HA_CREATE_INFORMATIONP10TABLE_LISTP10ALTER_INFOJP8ST_ORDERB+0X2189)[0X83D6D05].LIBEXECMYSQLD(_Z21MYSQL_EXECUTE_COMMANDP3THD+0X24C7)[0X828E1BF].LIBEXECMYSQLD(_Z11MYSQL_PARSEP3THDPKCJPS2_+0X230)[0X8295B48].LIBEXECMYSQLD(_Z16DISPATCH_COMMAND19ENUM_SERVER_COMMANDP3THDPCJ+0XAAC)[0X8296784].LIBEXECMYSQLD(_Z10DO_COMMANDP3THD+0X260)[0X82979A2].LIBEXECMYSQLD(HANDLE_ONE_CONNECTION+0X115)[0X8284349]LIBLIBPTHREAD.SO.0[0X45FBD4]LIBLIBC.SO.6(__CLONE+0X5E)[0X3B74FE]TRYING TO GET SOME VARIABLES.SOME POINTERS MAY BE INVALID AND CAUSE THE DUMP TO ABORT...THD->QUERY AT 0XA4CB4F8 = ALTER TABLE BAZ ADD INDEX BAZ$IDX (COL), ADD INDEX BAZ$FIELD (FIELD), ADD INDEX BAZ$FIELD2 (FIELD2)THD->THREAD_ID=5THD->KILLED=NOT_KILLEDTHE MANUAL PAGE AT HTTP:DEV.MYSQL.COMDOCMYSQLENCRASHING.HTML CONTAINSINFORMATION THAT SHOULD HELP YOU FIND OUT WHAT IS CAUSING THE CRASH.HOW TO REPEAT:1. COMPILE 5.1-BZR WITH INNODB-1.0.3 PLUGIN. USE BUILT-IN METHOD: REPLACE CONTENT OF STORAGEINNOBASE DIRECTORY.2. LOAD DUMP FROM THE PRIVATE COMMENT ","SUMMARY":"BUGU00A0#44571  INNODB PLUGIN CRASHES ON ADD INDEX ","CLASS":1}
{"ID_DEFECT":"45097","DESCRIPTION":"     [26 MAY 2009 13:46]   VASIL DIMOV          DESCRIPTION:A HANG MAY OCCUR IN INNODB RECOVERY IF THE SERVER CRASHED IMMEDIATELY AFTER STARTUP. THE OUTPUT LOOKS LIKE THIS:090515 16:38:40 INNODB: DATABASE WAS NOT SHUT DOWN NORMALLY!INNODB: STARTING CRASH RECOVERY.INNODB: READING TABLESPACE INFORMATION FROM THE .IBD FILES...INNODB: RESTORING POSSIBLE HALF-WRITTEN DATA PAGES FROM THE DOUBLEWRITEINNODB: BUFFER...INNODB: DOING RECOVERY: SCANNED UP TO LOG SEQUENCE NUMBER 45753090515 16:38:40 INNODB: STARTING AN APPLY BATCH OF LOG RECORDS TO THE DATABASE...INNODB: PROGRESS IN PERCENTS: 090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 96090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 97[...]090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 126090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 1270 090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 64090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 65[...]090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 94090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 951 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 160090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 161090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 162[...]090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 190090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 19179 80 81 82 83 84 090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 128090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 129090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 130[...]090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 158090515 16:38:40 INNODB: WARNING: TRYING TO READ DOUBLEWRITE BUFFER PAGE 15985 86 87 88 89 90 91 92 93 94 95 96 97 98 99 ^C  <-- IT HANGS HEREHOW TO REPEAT:KILL THE SERVER IMMEDIATELY AFTER STARTUP. HERE IS EMBEDDED INNODB CODE THAT REPRODUCES THE PROBLEM 100% OF THE TIME:INTMAIN(INT ARGC, CHAR** ARGV)        IB_INIT();        IB_STARTUP(BARRACUDA);        RETURN(0); ","SUMMARY":"BUGU00A0#45097  HANG DURING RECOVERY, REDO LOGS FOR DOUBLEWRITE BUFFER PAGES  ","CLASS":1}
{"ID_DEFECT":"45357","DESCRIPTION":"     [6 JUN 2009 14:10]   SIMON BROCK          DESCRIPTION:WE HAVE UPGRADED FROM 5.1.34 TO 5.1.35 AND THE SERVER WILL CRASH WITH:090606 13:53:50  INNODB: ASSERTION FAILURE IN THREAD 12 IN FILE ROWROW0MYSQL.C LINE 1534INNODB: FAILING ASSERTION: INDEX->TYPE & DICT_CLUSTEREDINNODB: WE INTENTIONALLY GENERATE A MEMORY TRAP.INNODB: SUBMIT A DETAILED BUG REPORT TO HTTP:BUGS.MYSQL.COM.INNODB: IF YOU GET REPEATED ASSERTION FAILURES OR CRASHES, EVENINNODB: IMMEDIATELY AFTER THE MYSQLD STARTUP, THERE MAY BEINNODB: CORRUPTION IN THE INNODB TABLESPACE. PLEASE REFER TOINNODB: HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENFORCING-RECOVERY.HTMLINNODB: ABOUT FORCING RECOVERY.090606 13:53:49 - MYSQLD GOT SIGNAL 11 ;THIS MACHINE IS A SLAVE TO A MACHINE RUNNING 5.1.34 -- A LOCAL BUILD WITH SPHINX.THE PROBLEM HAS BEEN OBSERVED AGAINST A LOCAL BUILD OF 5.1.35 WITH SPHINX AND THE 5.1.35 DISTRIBUTION FROM MYSQL.DOWNGRADING TO 5.1.34 RESULTS IN A CRASH RECOVERY BUT NO SUBSEQUENT PROBLEMS. WE HAVE STOPPED AND STARTED THE SERVER UNDER 5.1.34 WITHOUT ANY PROBLEMS.WE ARE USING BINLOG_FORMAT=MIXED, INNODB_FILE_PER_TABLE AND TRYING TO UPGRADE TO TAKE ADVANTAGE OF THE --SLAVE-SKIP-ERRORS FIX  (BUG#39393) IN 5.1.35. LOOKING AT THE BINARY LOG ON THE MASTER THERE IS ROW BASED REPLICATION AGAINST AN INNODB TABLE:#090606 13:54:02 SERVER ID 52  END_LOG_POS 214708425    TABLE_MAP: `REMOVED`.`OX_DATA_RAW_AD_IMPRESSION` MAPPED TO NUMBER 18358#090606 13:54:02 SERVER ID 52  END_LOG_POS 214709455    DELETE_ROWS: TABLE ID 18358ETCHOW TO REPEAT:UPGRADE TO 5.1.35 DISTRIBUTION AGAINST 5.1.34 MASTER WITH ROWMIXED REPLICATION.SUGGESTED FIX:NONE ","SUMMARY":"BUGU00A0#45357  5.1.35 CRASHES WITH FAILING ASSERTION: INDEX->TYPE & DICT_CLUSTERED ","CLASS":1}
{"ID_DEFECT":"46256","DESCRIPTION":"     [17 JUL 2009 5:24]   SHANE BESTER          DESCRIPTION:IF YOU TAKE YOUR DATA FROM A SERVER TO ANOTHER SERVER WHICH DOESNT SUPPORT THE COLLATION USED, THEN TRY TO DROP THE TABLE, INNODB CRASHES.VERSION: 5.4.4-ALPHA-DEBUG  SOCKET: TMPMYSQL.SOCK  PORT: 3306  SOURCE DISTRIBUTION090629 23:38:09  INNODB: ASSERTION FAILURE IN THREAD 3022673808 IN FILE HANDLERHA_INNODB.CC LINE 790INNODB: FAILING ASSERTION: CSET == 0MYSQL> SHOW CREATE TABLE TBL_75; #EXPECTEDERROR 1273 (HY000): UNKNOWN COLLATION #254 IN TABLE TBL_75 DEFINITIONMYSQL> CHECK TABLE TBL_75; #EXPECTED+-------------+-------------------------------------------------------+| TABLE       | MSG_TEXT                                              |+-------------+-------------------------------------------------------+| TEST.TBL_75 | UNKNOWN COLLATION #254 IN TABLE TBL_75 DEFINITION || TEST.TBL_75 | CORRUPT                                               |+-------------+-------------------------------------------------------+2 ROWS IN SET (0.00 SEC)MYSQL> DROP TABLE TBL_75; #OOPSERROR 2013 (HY000): LOST CONNECTION TO MYSQL SERVER DURING QUERYHOW TO REPEAT:ON A 5.1.37 SERVER THAT HAS UTF8_GENERAL_CS COLLATION, CREATE A TABLE:DROP TABLE IF EXISTS TBL_75;CREATE TABLE TBL_75 (A VARCHAR(1) CHARACTER SET UTF8 COLLATE UTF8_GENERAL_CS,PRIMARY KEY(A))ENGINE=INNODB;THEN START A SERVER THAT DOESNT SUPPORT UTF8_GENERAL_CS USING THIS DATADIR AND TRY DROP THE TABLE.CHECK TABLE TBL_75 EXTENDED;DROP TABLE TBL_75SUGGESTED FIX:ALLOW TABLES TO BE DROPPED IF THE COLLATION IS NOT SUPPORTED.  MYISAM ALLOWS THIS. ","SUMMARY":"BUGU00A0#46256  DROP TABLE WITH UNKNOWN COLLATION CRASHES INNODB ","CLASS":1}
{"ID_DEFECT":"46657","DESCRIPTION":"     [11 AUG 2009 16:17]   GUILHEM BICHOT          DESCRIPTION:WE CAN SEE THIS KIND OF REPORT IN PUSHBUILD2 FOR 5.1-INNODB_PLUGIN:MAIN.INDEX_MERGE_INNODB                  W3 [ FAIL ]==4615== INVALID READ OF SIZE 1==4615==    AT 0XA20D30: HA_INNOBASE::ADD_INDEX(ST_TABLE*, ST_KEY*, UNSIGNED) (HANDLER0ALTER.CC:894)==4615==    BY 0X73715A: MYSQL_ALTER_TABLE(THD*, CHAR*, CHAR*, ST_HA_CREATE_INFORMATION*, TABLE_LIST*, ALTER_INFO*, UNSIGNED, ST_ORDER*, BOOL) (SQL_TABLE.CC:7067)==4615==    BY 0X6BEBDE: MYSQL_EXECUTE_COMMAND(THD*) (SQL_PARSE.CC:2889)==4615==    BY 0X6C4745: MYSQL_PARSE(THD*, CHAR CONST*, UNSIGNED, CHAR CONST**) (SQL_PARSE.CC:6003)==4615==    BY 0X6C59A5: DISPATCH_COMMAND(ENUM_SERVER_COMMAND, THD*, CHAR*, UNSIGNED) (SQL_PARSE.CC:1222)==4615==    BY 0X635060: EMB_ADVANCED_COMMAND (LIB_SQL.CC:139)==4615==    BY 0X5BDB7F: MYSQL_SEND_QUERY (CLIENT.C:2863)==4615==    BY 0X57D574: DO_SEND_QUERY(ST_CONNECTION*, CHAR CONST*, INT, INT) (MYSQLTEST.CC:715)==4615==    BY 0X587B00: RUN_QUERY_NORMAL(ST_CONNECTION*, ST_COMMAND*, INT, CHAR*, INT, ST_DYNAMIC_STRING*, ST_DYNAMIC_STRING*) (MYSQLTEST.CC:6437)==4615==    BY 0X58844C: RUN_QUERY(ST_CONNECTION*, ST_COMMAND*, INT) (MYSQLTEST.CC:7166)==4615==    BY 0X5897A6: MAIN (MYSQLTEST.CC:7796)==4615==  ADDRESS 0XE0DDEDC IS 156 BYTES INSIDE A BLOCK OF SIZE 544 FREED==4615==    AT 0X4A0541E: FREE (VG_REPLACE_MALLOC.C:233)==4615==    BY 0XA3BDA4: MEM_AREA_FREE (MEM0POOL.C:495)==4615==    BY 0XA3AE16: MEM_HEAP_BLOCK_FREE (MEM0MEM.C:491)==4615==    BY 0XB1C71A: MEM_HEAP_FREE_FUNC (MEM0MEM.IC:504)==4615==    BY 0XB1C6C7: DICT_MEM_TABLE_FREE (DICT0MEM.C:109)==4615==    BY 0XB11E6A: DICT_TABLE_REMOVE_FROM_CACHE (DICT0DICT.C:1146)==4615==    BY 0XA6F48C: ROW_DROP_TABLE_FOR_MYSQL (ROW0MYSQL.C:3317)==4615==    BY 0XA69060: ROW_MERGE_DROP_TABLE (ROW0MERGE.C:2261)==4615==    BY 0XA20C80: HA_INNOBASE::ADD_INDEX(ST_TABLE*, ST_KEY*, UNSIGNED) (HANDLER0ALTER.CC:865)==4615==    BY 0X73715A: MYSQL_ALTER_TABLE(THD*, CHAR*, CHAR*, ST_HA_CREATE_INFORMATION*, TABLE_LIST*, ALTER_INFO*, UNSIGNED, ST_ORDER*, BOOL) (SQL_TABLE.CC:7067)==4615==    BY 0X6BEBDE: MYSQL_EXECUTE_COMMAND(THD*) (SQL_PARSE.CC:2889)==4615==    BY 0X6C4745: MYSQL_PARSE(THD*, CHAR CONST*, UNSIGNED, CHAR CONST**) (SQL_PARSE.CC:6003)==4615==    BY 0X6C59A5: DISPATCH_COMMAND(ENUM_SERVER_COMMAND, THD*, CHAR*, UNSIGNED) (SQL_PARSE.CC:1222)==4615==    BY 0X635060: EMB_ADVANCED_COMMAND (LIB_SQL.CC:139)==4615==    BY 0X5BDB7F: MYSQL_SEND_QUERY (CLIENT.C:2863)==4615==    BY 0X57D574: DO_SEND_QUERY(ST_CONNECTION*, CHAR CONST*, INT, INT) (MYSQLTEST.CC:715)THIS IS SPECIFIC OF THE INNODB PLUGIN.SIMILAR ONES ARE ALSO SEEN IN MYSQL-TRUNK.HOW TO REPEAT:RUN INDEX_MERGE_INNODB WITH --VALGRIND, IT SEEMS. ","SUMMARY":"BUGU00A0#46657  INNODB PLUGIN: INVALID READ IN INDEX_MERGE_INNODB TEST (VALGRIND) ","CLASS":1}
{"ID_DEFECT":"46672","DESCRIPTION":"     [12 AUG 2009 10:28]   GUILHEM BICHOT          DESCRIPTION:THIS BUG REPORT IS FOR ORACLEINNOBASE.SOME FIX HAS RECENTLY BEEN MADE TO THE INNODB BUILTIN, BUT NOT TO THE INNODB PLUGIN: THE FIX FOR BUG#18828 IF INNODB RUNS OUT OF UNDO SLOTS, IT RETURNS MISLEADING TABLE IS FULL.THE PATCH FOR THIS BUG CAN BE VIEWED BY BRANCHING 5.1: BZR BRANCH HTTPS:CODE.LAUNCHPAD.NET~MYSQLMYSQL-SERVERMYSQL-5.1AND THEN DOING: BZR DIFF -C REVID:SATYA.BN@SUN.COM-20090724064506-AXZ1SO8BEEM1G1KZTHE FIX IS PRESENT IN STORAGEINNOBASE OF 5.1, BUT WE (SUNMYSQL) HAVE *NOT* PORTED IT TO STORAGEINNODB_PLUGIN, WE LEAVE IT UP TO ORACLEINNOBASE TO DO IT (IF PORTING IS APPROPRIATE; OTHERWISE LET US KNOW, IF THE BUGFIX IS WRONG, IS NOT NEEDED...).HOW TO REPEAT:. ","SUMMARY":"BUGU00A0#46672  INNODB PLUGIN: CONSIDER PORTING TO THE PLUGIN SOME BUGFIXES MADE TO THE BUILTIN ","CLASS":1}
{"ID_DEFECT":"47167","DESCRIPTION":"     [7 SEP 2009 10:07]   YASUFUMI KINOSHITA          DESCRIPTION:SET GLOBAL INNODB_FILE_FORMAT_CHECK COMMAND SEEMS TO NOT ABLE TO SET VALUE USING USER-DEFINED VARIABLE.HOW TO REPEAT:MYSQL> SET @OLD_INNODB_FILE_FORMAT_CHECK=@@INNODB_FILE_FORMAT_CHECK;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> SELECT @OLD_INNODB_FILE_FORMAT_CHECK;+-------------------------------+| @OLD_INNODB_FILE_FORMAT_CHECK |+-------------------------------+| ANTELOPE                      |+-------------------------------+1 ROW IN SET (0.00 SEC)MYSQL> SET GLOBAL INNODB_FILE_FORMAT_CHECK = BARRACUDA;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> SELECT @@INNODB_FILE_FORMAT_CHECK;+----------------------------+| @@INNODB_FILE_FORMAT_CHECK |+----------------------------+| BARRACUDA                  |+----------------------------+1 ROW IN SET (0.00 SEC)MYSQL> SET GLOBAL INNODB_FILE_FORMAT_CHECK = @OLD_INNODB_FILE_FORMAT_CHECK;QUERY OK, 0 ROWS AFFECTED, 1 WARNING (0.00 SEC)MYSQL> SHOW WARNINGS;+---------+------+--------------------------------------+| LEVEL   | CODE | MESSAGE                              |+---------+------+--------------------------------------+| WARNING | 1210 | IGNORING SET INNODB_FILE_FORMAT=XG |+---------+------+--------------------------------------+1 ROW IN SET (0.00 SEC)MYSQL> SELECT @@INNODB_FILE_FORMAT_CHECK;+----------------------------+| @@INNODB_FILE_FORMAT_CHECK |+----------------------------+| BARRACUDA                  |+----------------------------+1 ROW IN SET (0.00 SEC) ","SUMMARY":"BUGU00A0#47167  SET GLOBAL INNODB_FILE_FORMAT_CHECK CANNOT SET VALUE BY USER-DEFINED VARIABLE ","CLASS":1}
{"ID_DEFECT":"47621","DESCRIPTION":"     [24 SEP 2009 15:55]   SVETA SMIRNOVA          DESCRIPTION:THIS IS SPLIT FROM BUG #44571:[12 MAY 13:10] MARKO MU00E4KELU00E4CASE #1 (UT_ERROR ASSERTION IN DICT_INDEX_FIND_COLS()) IS THAT THE MYSQL AND INNODB DATADICTIONARIES WILL BECOME OUT OF SYNC WHEN RENAMING COLUMNS. COLUMNS WILL BE ONLY RENAMEDIN THE MYSQL DATA DICTIONARY (.FRM FILE), NOT IN THE INNODB SYSTEM TABLES. FIXING THATMIGHT REQUIRE AN API CHANGE IN MYSQL 5.1. I BELIEVE THAT THE ALTER TABLE API IN MYSQL 6.0DOES SUPPORT RENAMING COLUMNS.HOW TO REPEAT:SEE BUG #44571 ","SUMMARY":"BUGU00A0#47621  MYSQL AND INNODB DATA DICTIONARIES WILL BECOME OUT OF SYNC WHEN RENAMING COLUMNS ","CLASS":1}
{"ID_DEFECT":"48024","DESCRIPTION":"     [13 OCT 2009 15:35]   GEORGI KODINOV          DESCRIPTION:THIS IS A SPIN-OFF OF BUG #40877.INNODB THREATS THE QUERY TEXT THAT IS PASSED TO IT BY THE SERVER (THROUGH THD_QUERY()) AS A NULL-TERMINATED STRING.THIS CAUSES PROBLEMS WITH MULTI-STATEMENTS THAT CONTAIN FOREIGN KEY DEFINITION CODE, AS DEMONSTRATED BY THE EXAMPLE IN BUG #40877 BECAUSE THE INDIVIDUAL STATEMENTS IN SUCH A MULTI STATEMENT ARE NOT NULL TERMINATED AND INNODB GETS CONFUSED BY READING THE FOREIGN KEY DEFINITIONS IN THE NEXT STATEMENT(S).HOW TO REPEAT:SEE THE EXAMPLE IN BUG #40877SUGGESTED FIX:I WILL IMPLEMENT A NEW FUNCTION FOR 5.1 THAT RETURNS A POINTER TO LEX_STRING INSTEAD (STRING POINTER AND LENGTH).PLEASE UPDATE THE INNODB LOGIC TO USE THE NEW FUNCTION IN 5.1 CODEBASE INSTEAD OF THD_QUERY() (THAT I WANT TO OBSOLETE).PLEASE UPDATE THE THE 5.0 INNODB CODE TO USE STORE AND USE THD::QUERY_LENGTH.NOTE THAT THE FIX FOR BUG #40877 (THE EXTENDED API FUNCTION) IS A PRE-REQUISITE FOR THIS BUG. ","SUMMARY":"BUGU00A0#48024  INNODB DOESNT WORK WITH MULTI-STATEMENTS ","CLASS":1}
{"ID_DEFECT":"48782","DESCRIPTION":"     [15 NOV 2009 18:58]   SHANE BESTER          DESCRIPTION:RUNNING CONCURRENT ALTER TABLE CAUSES INNODB TO ASSERT:INNODB: THE INNODB MEMORY HEAP IS DISABLEDINNODB: MUTEXES AND RW_LOCKS USE WINDOWS INTERLOCKED FUNCTIONS.091115 20:43:14  INNODB: HIGHEST SUPPORTED FILE FORMAT IS BARRACUDA.091115 20:43:14 INNODB PLUGIN 1.0.4 STARTED; LOG SEQUENCE NUMBER 4548740091115 20:43:14 [NOTE] MYSQLD: READY FOR CONNECTIONS.VERSION: 5.1.40-ENTERPRISE-GPL-ADVANCED  SOCKET:   PORT: 3306  MYSQL ENTERPRISE SERVER - ADVANCED EDITION (GPL)091115 20:43:46  INNODB: ASSERTION FAILURE IN THREAD 3924 IN FILE .OWOW0MERGE.C LINE 2259INNODB: FAILING ASSERTION: TABLE->N_MYSQL_HANDLES_OPENED == 0INNODB: WE INTENTIONALLY GENERATE A MEMORY TRAP.1800AC3CD    HA_INNODB_PLUGIN.DLL!ROW_MERGE_DROP_TABLE()[ROW0MERGE.C:2259]18009C27C    HA_INNODB_PLUGIN.DLL!HA_INNODB::ADD_INDEX()[HANDLER0ALTER.CC:881]1400E9EAF    MYSQLD.EXE!MYSQL_ALTER_TABLE()[SQL_TABLE.CC:7202]14006B2D4    MYSQLD.EXE!MYSQL_EXECUTE_COMMAND()[SQL_PARSE.CC:2891]14006E966    MYSQLD.EXE!MYSQL_PARSE()[SQL_PARSE.CC:5967]14006F4FA    MYSQLD.EXE!DISPATCH_COMMAND()[SQL_PARSE.CC:1226]140070167    MYSQLD.EXE!DO_COMMAND()[SQL_PARSE.CC:865]1400968B7    MYSQLD.EXE!HANDLE_ONE_CONNECTION()[SQL_CONNECT.CC:1127]1403169D5    MYSQLD.EXE!PTHREAD_START()[MY_WINTHREAD.C:85]1402E0B07    MYSQLD.EXE!_CALLTHREADSTART()[THREAD.C:295]1402E0BD5    MYSQLD.EXE!_THREADSTART()[THREAD.C:275]077D6B6CA    KERNEL32.DLL!BASETHREADSTART()TRYING TO GET SOME VARIABLES.SOME POINTERS MAY BE INVALID AND CAUSE THE DUMP TO ABORT...THD->QUERY AT 00000000033B5470=ALTER IGNORE TABLE T3 ADD PRIMARY KEY(ID)HOW TO REPEAT:START MYSQLD WITH: --SKIP-GRANT-TABLES --SKIP-NAME-RESOLVE --INNODB_FLUSH_LOG_AT_TRX_COMMIT=0  --IGNORE-BUILTIN-INNODB --PLUGIN-LOAD=INNODB=HA_INNODB_PLUGIN.DLL --INNODB_LOCK_WAIT_TIMEOUT=1 --INNODB_BUFFER_POOL_SIZE=100M(SDLLSO FOR LINUX).COMPILE AND RUN THE ATTACHED .C TESTCASE ","SUMMARY":"BUGU00A0#48782  ON LOCK WAIT TIMEOUT, CREATE INDEX (CREATING PRIMARY KEY) ATTEMPTS DROP TABLE ","CLASS":1}
{"ID_DEFECT":"49032","DESCRIPTION":"     [24 NOV 2009 12:33]   IGNACIO ENRIQUE          DESCRIPTION:WHEN WINDOWS MYSQL SERVICE RESTART THE NEXT AUTO_INCREMENT VALUE FOR TABLES WITH INNODB STORAGE ENGINE GOES TO 1.THIS OCCURS ALSO IF SERVER VARIABLE INNODB_AUTOINC_LOCK_MODE IS SET TO 0. THE DESCRIBED PROCEDURE OF THE USERU00B4S MANUAL OF THIS VARIABLE ( SEARCHING THE LAST VALUE AND SETTING IT TO THIS VALUE + 1 IN THE MEMORY AREA FOR AUTO_INCREMENTS IN INNODB STORAGHE ENGINE) DOES NOT OCCURS.THIS IS A BUG THAT NOT PERMIT US GOING TO VERSION 5.1.41 OR 5.4.3. IT FORCES US TO STAY IN VERSION 5.0.88 THAT WORKS OK.HOW TO REPEAT:TO REPRODUCE IT EXECUTE THIS SCRIPTTESTINNODBDROP TABLE IF EXISTS `TESTINNODB`;CREATE TABLE `TESTINNODB` (  `ID_TESTINNODB` DOUBLE NOT NULL AUTO_INCREMENT,  `ID_USR` DOUBLE DEFAULT NULL,  `DAT_TESTINNODB` DATETIME NOT NULL,  `TIM_TESTINNODB` VARCHAR(8) NOT NULL,  `COD_SYSTEM` VARCHAR(1) NOT NULL,  `COD_MODULE` VARCHAR(1) NOT NULL,  `COD_ACTION` VARCHAR(1) NOT NULL,  `COD_OPTION` VARCHAR(1) NOT NULL,  `COD_DATA` VARCHAR(2) NOT NULL,  `DES_DATA` VARCHAR(150) NOT NULL,  `DES_IP` VARCHAR(15) DEFAULT NULL,  `ID_PERSON` DOUBLE DEFAULT NULL,  `ID_CENTRE` DOUBLE DEFAULT NULL,  PRIMARY KEY (`ID_TESTINNODB`),  KEY `XIF3TESTINNODB` (`ID_CENTRE`),  KEY `R_USR_TRACK` (`ID_USR`),  KEY `R_PERSON_TESTINNODB` (`ID_PERSON`),) ENGINE=INNODB DEFAULT CHARSET=LATIN1;---- DUMPING DATA FOR TABLE `TESTINNODB`--*!40000 ALTER TABLE `TESTINNODB` DISABLE KEYS *;INSERT INTO `TESTINNODB` (`ID_TESTINNODB`,`ID_USR`,`DAT_TESTINNODB`,`TIM_TESTINNODB`,`COD_SYSTEM`,`COD_MODULE`,`COD_ACTION`,`COD_OPTION`,`COD_DATA`,`DES_DATA`,`DES_IP`,`ID_PERSON`,`ID_CENTRE`) VALUES  (1,1,2009-11-23 00:00:00,12:00:21,B,M,A,M,MM,PATATAS,127.0.0.1,NULL,NULL), (2,1,2009-11-23 00:00:00,12:00:28,B,M,A,M,MM,PATATAS,127.0.0.1,NULL,NULL), (4,1,2009-11-23 00:00:00,12:00:28,B,M,A,M,MM,PATATAS,127.0.0.1,NULL,NULL);*!40000 ALTER TABLE `TESTINNODB` ENABLE KEYS *;THEN STOP WINDOWS MYSQL SERVICETHEN START WINDOWS MYSQL SERVICETHEN TRY TO EXECUTE THIS SENTENCE:INSERT INTO TESTINNODB ( ID_USR, DAT_TESTINNODB, TIM_TESTINNODB, COD_SYSTEM, COD_MODULE, COD_ACTION, COD_OPTION, COD_DATA, DES_DATA, DES_IP)VALUES(1, 2009-11-23, 12:00:28, B, M, A, M, MM,PATATAS,127.0.0.1)IT REPORTS AND ERROR OF  DUPLICATE KEY IN MYSQL 5.1.40 AND FOLLOWERS ALSO IF INNODB_AUTOINC_LOCK_MODE=0IT WORKS OK IN VERSU00EDON 5.0.88 AND BELOWSUGGESTED FIX:MYSQL MUST EXECUTE THE STEPS DESCRIBED IN HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENINNODB-AUTO-INCREMENT-HANDLING.HTMLIN PARRAGRAPH 13.6.4.3.1 WHEN INNODB_AUTOINC_LOCK_MODE IS SET TO 0 AS DESCRIBED.TODAY THIS NOT OCCURS ","SUMMARY":"BUGU00A0#49032  AUTO_INCREMENT FIELD DOES NOT INITIALIZE TO LAST VALUE IN INNODB STORAGE ENGINE ","CLASS":1}
{"ID_DEFECT":"49497","DESCRIPTION":"     [7 DEC 2009 10:15]   ELENA STEPANOVA          DESCRIPTION:ON AN ATTEMPT TO INSERT A NEGATIVE VALUE INTO AN AUTO-INCREMENT COLUMN, ERROR 1467 (FAILED TO READ AUTO-INCREMENT VALUE FROM STORAGE ENGINE) IS STILL RETURNED AND INSERT FAILS (ALTHOUGH FROM CHANGE LOG FOR 5.1.41, DIFFERENT BEHAVIOR COULD BE EXPECTED).HOW TO REPEAT:DROP TABLE IF EXISTS T1;CREATE TABLE T1  (PK INTEGER AUTO_INCREMENT, PRIMARY KEY (PK)) ENGINE = INNODB;INSERT INTO  T1 VALUES (NULL) ,  (-685113344) ,  (NULL) ;SELECT * FROM T1;# MYSQL> INSERT INTO  T1 VALUES (NULL) ,  (-685113344) ,  (NULL) ;# ERROR 1467 (HY000): FAILED TO READ AUTO-INCREMENT VALUE FROM STORAGE ENGINE# MYSQL> SELECT * FROM T1;# EMPTY SET (0.00 SEC) SUGGESTED FIX:HERE IS SUNNYS ANALYSIS:INNODB DOES IGNORE -VE VALUES BECAUSE IT LOOKS AT THE TYPE OF THEAUTOINC COLUMN WHEN COMPARING. HOWEVER, THIS FUNCTIONMACRO FROMMYSQL   SET_IF_BIGGER(*FIRST_VALUE, AUTOINC); DOESNT. WE NEED TOREPLACE THE USE OF THIS FUNCTION IN HA_INNOBASE::GET_AUTO_INCREMENT()WITH CODE THAT DOES THE RIGHT THING.THE ABOVE FAILURE IS BECAUSE MYSQL PASSES IN -685113343 AS *FIRST_VALUETO HA_INNOBASE::GET_AUTO_INCREMENT() AND THE TYPE OF *FIRST_VALUE IS ULONGLONGTHE SET_IF_BIGGER() MACRO DOES A SIMPLE COMPARE USING THE C TYPES WHEREAS WHATWE WANT IS TO CHECK FOR THE COLUMN TYPE IN THE EQUIVALENT OF SET_IF_BIGGER().THE OPTIONS ARE:1. I WILL HAVE TO GET RID OF SET_IF_BIGGER() AND ROLL OUR OWN VERSION.2. CHECK *FIRST_VALUE ON ENTRY EVERYTIM AGAINST THE COLUMN MAX VALUE   AND  SET *FIRST_VALUE TO NEXT AUTOINC IF ITS > COL MAX VALUE. IE.   NOT RELY ON WHAT IS PASSED IN FROM MYSQL. ","SUMMARY":"BUGU00A0#49497  ERROR 1467 (ER_AUTOINC_READ_FAILED) ON INSERTING A NEGATIVE VALUE ","CLASS":1}
{"ID_DEFECT":"50495","DESCRIPTION":"     [21 JAN 2010 7:48]   SHANE BESTER          DESCRIPTION:THE TABLE IN THE ATTACHED FILE CANNOT BE CREATED IN INNODB PLUGIN 1.0.6, BUT CAN BE CREATED IN BUILT-IN INNODB.  THE ERROR IS:<CUT>    -> COL193 VARCHAR(255) CHARSET LATIN1,    -> COL194 VARCHAR(255) CHARSET LATIN1,    -> COL195 VARCHAR(255) CHARSET LATIN1,    -> COL196 VARCHAR(255) CHARSET LATIN1)ENGINE=INNODB;ERROR 1118 (42000): ROW SIZE TOO LARGE. THE MAXIMUM ROW SIZE FOR THE USED TABLE TYPE, NOT COUNTING BLOBS, IS 8126. YOU HAVE TO CHANGE SOME COLUMNS TO TEXT OR BLOBSMYSQL>HOW TO REPEAT:RUN ATTACHED DDL ON BUILT-IN INNODB AND IT WORKS.RUN IT ON INNODB PLUGIN AND IT FAILS. ","SUMMARY":"BUGU00A0#50495  ROW SIZE TOO LARGE FOR PLUGIN, BUT WORKS FOR BUILT-IN INNODB ","CLASS":1}
{"ID_DEFECT":"52663","DESCRIPTION":"     [7 APR 2010 18:22]   JEFF STURM          DESCRIPTION:THIS PECULIAR BEHAVIOR TAKES PLACE WHEN UPDATING A COLUMN BASED ON ITS CURRENT VALUE.  TWO SEPARATE TRANSACTIONS PERFORM AN UPDATE ... SET COUNT = COUNT + 1, BOTH APPEAR TO SUCCEED, HOWEVER THE COLUMN VALUE INCREASES ONLY BY ONE.I COULD NOT REPRODUCE THIS TEST CASE UNDER REPEATABLE-READ, OR WITH A SIMPLE PRIMARY KEY.HOW TO REPEAT:MYSQL1 AND MYSQL2 DENOTE TWO SEPARATE MYSQL CONNECTIONS.MYSQL1> CREATE TABLE COUNTER (WHAT VARCHAR(5), ID INTEGER, COUNT INTEGER, PRIMARY KEY (WHAT, ID));QUERY OK, 0 ROWS AFFECTED (0.02 SEC)MYSQL1> INSERT INTO COUNTER VALUES (TOTAL, 0, 0);QUERY OK, 1 ROW AFFECTED (0.18 SEC)MYSQL1> BEGIN;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL2> BEGIN;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL1> UPDATE COUNTER SET COUNT = COUNT + 1 WHERE WHAT = TOTAL AND ID = 0;QUERY OK, 1 ROW AFFECTED (0.00 SEC)ROWS MATCHED: 1  CHANGED: 1  WARNINGS: 0MYSQL2> UPDATE COUNTER SET COUNT = COUNT + 1 WHERE WHAT = TOTAL AND ID = 0;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)ROWS MATCHED: 0  CHANGED: 0  WARNINGS: 0MYSQL1> COMMIT;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL2> COMMIT;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL1> SELECT * FROM COUNTER;+-------+----+-------+| WHAT  | ID | COUNT |+-------+----+-------+| TOTAL |  0 |     1 |+-------+----+-------+1 ROW IN SET (0.00 SEC) ","SUMMARY":"BUGU00A0#52663  LOST UPDATE INCREMENTING COLUMN VALUE UNDER READ COMMITTED ISOLATION LEVEL ","CLASS":1}
{"ID_DEFECT":"52745","DESCRIPTION":"     [11 APR 2010 17:06]   SHANE BESTER          DESCRIPTION:VERSION: 5.1.45-ENTERPRISE-GPL-ADVANCED-DEBUG  SOCKET:   PORT: 3306  MYSQL ENTERPRISE SERVER - ADVANCED EDITION DEBUG (GPL)100411 19:06:07  INNODB: ASSERTION FAILURE IN THREAD 2736 IN FILE .PAGEPAGE0ZIP.C LINE 3661INNODB: FAILING ASSERTION: BLOB_NO < PAGE_ZIP->N_BLOBSINNODB: WE INTENTIONALLY GENERATE A MEMORY TRAP.HA_INNODB_PLUGIN.DLL!PAGE_ZIP_WRITE_BLOB_PTR()[PAGE0ZIP.C:3661]HA_INNODB_PLUGIN.DLL!BTR_STORE_BIG_REC_EXTERN_FIELDS()[BTR0CUR.C:4064]HA_INNODB_PLUGIN.DLL!ROW_INS_INDEX_ENTRY_LOW()[ROW0INS.C:2114]HA_INNODB_PLUGIN.DLL!ROW_INS_INDEX_ENTRY()[ROW0INS.C:2161]HA_INNODB_PLUGIN.DLL!ROW_INS_INDEX_ENTRY_STEP()[ROW0INS.C:2245]HA_INNODB_PLUGIN.DLL!ROW_INS()[ROW0INS.C:2377]HA_INNODB_PLUGIN.DLL!ROW_INS_STEP()[ROW0INS.C:2487]HA_INNODB_PLUGIN.DLL!ROW_INSERT_FOR_MYSQL()[ROW0MYSQL.C:1139]HA_INNODB_PLUGIN.DLL!HA_INNODB::WRITE_ROW()[HA_INNODB.CC:4408]MYSQLD-DEBUG.EXE!HANDLER::HA_WRITE_ROW()[HANDLER.CC:4650]MYSQLD-DEBUG.EXE!WRITE_RECORD()[SQL_INSERT.CC:1606]MYSQLD-DEBUG.EXE!MYSQL_INSERT()[SQL_INSERT.CC:835]MYSQLD-DEBUG.EXE!MYSQL_EXECUTE_COMMAND()[SQL_PARSE.CC:3183]MYSQLD-DEBUG.EXE!MYSQL_PARSE()[SQL_PARSE.CC:5975]MYSQLD-DEBUG.EXE!DISPATCH_COMMAND()[SQL_PARSE.CC:1235]MYSQLD-DEBUG.EXE!DO_COMMAND()[SQL_PARSE.CC:874]MYSQLD-DEBUG.EXE!HANDLE_ONE_CONNECTION()[SQL_CONNECT.CC:1127]MYSQLD-DEBUG.EXE!PTHREAD_START()[MY_WINTHREAD.C:85]MYSQLD-DEBUG.EXE!_CALLTHREADSTART()[THREAD.C:295]MYSQLD-DEBUG.EXE!_THREADSTART()[THREAD.C:277]KERNEL32.DLL!BASETHREADSTART()HOW TO REPEAT:IMPORT ATTACHED SQL FILE. ","SUMMARY":"BUGU00A0#52745  FAILING ASSERTION: BLOB_NO < PAGE_ZIP->N_BLOBS ","CLASS":1}
{"ID_DEFECT":"52746","DESCRIPTION":"     [11 APR 2010 17:47]   SHANE BESTER          DESCRIPTION:VERSION: 5.1.45-ENTERPRISE-GPL-ADVANCED-DEBUG  SOCKET:   PORT: 3306  MYSQL ENTERPRISE SERVER - ADVANCED EDITION DEBUG (GPL)100411 19:45:32  INNODB: ASSERTION FAILURE IN THREAD 3332 IN FILE .TRXTRX0REC.C LINE 1081INNODB: FAILING ASSERTION: IGNORE_PREFIX || !COL->ORD_PART || DFIELD_GET_LEN(DFIELD) >= REC_MAX_INDEX_COL_LEN + BTR_EXTERN_FIELD_REF_SIZEINNODB: WE INTENTIONALLY GENERATE A MEMORY TRAP.HA_INNODB_PLUGIN.DLL!TRX_UNDO_REC_GET_PARTIAL_ROW  LINE 1081HA_INNODB_PLUGIN.DLL!ROW_PURGE_PARSE_UNDO_REC LINE 585HA_INNODB_PLUGIN.DLL!ROW_PURGE LINE 629HA_INNODB_PLUGIN.DLL!ROW_PURGE_STEP LINE 684HA_INNODB_PLUGIN.DLL!QUE_THR_STEP LINE 1248HA_INNODB_PLUGIN.DLL!QUE_RUN_THREADS_LOW LINE 1311HA_INNODB_PLUGIN.DLL!QUE_RUN_THREADS LINE 1350HA_INNODB_PLUGIN.DLL!TRX_PURGE()  LINE 1179HA_INNODB_PLUGIN.DLL!SRV_MASTER_THREAD LINE 2517HOW TO REPEAT:NO TESTCASE YET. ","SUMMARY":"BUGU00A0#52746  INNODB PURGE THREAD CRASHED WITH TABLE CONTAINING PREFIX INDEXED BLOBS ","CLASS":1}
{"ID_DEFECT":"54044","DESCRIPTION":"     [27 MAY 2010 21:20]   BORIS REISIG          DESCRIPTION:WHEN USING MYSQL 5.1.41, 5.1.44, AND THE LATEST SVN VERSION FROM TODAY (5.1.48), THE FOLLOWING CRASHES...MYSQL> SET STORAGE_ENGINE=INNODB;MYSQL> CREATE TEMPORARY TABLE MK_UPGRADE AS SELECT  IF(     NULL  IS NOT NULL,      NULL , NULL) ; DROP TABLE MK_UPGRADE;BUT WHEN SETTING THE STORAGE ENGINE TO MYISAM, IT DOESNT ALWAYS CRASH. EXAMPLE BELOW.MYSQL> SET STORAGE_ENGINE=MYISAM;MYSQL> CREATE TEMPORARY TABLE MK_UPGRADE AS SELECT  IF(     NULL  IS NOT NULL,      NULL , NULL) ; DROP TABLE MK_UPGRADE;ANY IDEAS?HOW TO REPEAT:MYSQL> SET STORAGE_ENGINE=MYISAM;MYSQL> CREATE TEMPORARY TABLE MK_UPGRADE AS SELECT  IF(     NULL  IS NOT NULL,      NULL , NULL) ; DROP TABLE MK_UPGRADE; ","SUMMARY":"BUGU00A0#54044  CREATE TEMPORARY TABLES AND USING INNODB CRASHES. ","CLASS":1}
{"ID_DEFECT":"54679","DESCRIPTION":"     [21 JUN 2010 21:38]   ROB FINCH          DESCRIPTION:ON TABLES CREATED WITH ROW_FORMAT=COMPRESSED, DOING AN ALTER CAUSES THE TABLE TO REVERT TO COMPACT UNLESS YOU IMPLICITLY ADD ROW_FORMAT=COMPRESSED AT THE END OF YOUR ALTER.I WOULD EXPECT THE EXISTING ROW_FORMAT TO BE PRESERVED ACROSS ALTERS.POSSIBLY RELATED TO HTTP:BUGS.MYSQL.COMBUG.PHP?ID=39200 - ALSO AFFECTS 5.1.46 (AND LIKELY OTHER VERSIONS)HOW TO REPEAT:EASY TO REPRO, CREATE A TABLE WITH ENGINE=INNODB & ROW_FORMAT=COMPRESSED THEN ADD A COLUMN - THEN CHECK THE INFORMATION_SCHEMA.TABLES INFO ABOUT THE ROW FORMAT.SERVER VERSION: 5.1.48-LOG MYSQL COMMUNITY SERVER (GPL)CREATE DATABASE ROBTEST;USE ROBTEST;CREATE TABLE ROBTEST (         TEST1 VARCHAR(100)         ) ENGINE=INNODB ROW_FORMAT=COMPRESSED;VALIDATE CREATION:MYSQL> SELECT TABLE_NAME,ROW_FORMAT,CREATE_OPTIONS FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=ROBTEST;| ROBTEST    | COMPRESSED | ROW_FORMAT=COMPRESSED |ADD SOME RANDOM DATA (NOT NECESSARY)MYSQL> INSERT INTO ROBTEST (TEST1) VALUES (SFDSDFDSDFS); MYSQL> ALTER TABLE ROBTEST ADD COLUMN TEST2 VARCHAR(100);VALIDATE THE ROW_FORMAT REVERT OCCURRED;MYSQL> SELECT TABLE_NAME,ROW_FORMAT,CREATE_OPTIONS FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=ROBTEST;| ROBTEST    | COMPACT    | ROW_FORMAT=COMPRESSED |FILESIZE WITH COMPACT:-RW-RW---- 1 MYSQL MYSQL 98304 2010-06-21 17:17 ROBTEST.IBDALTER BACK TO COMPRESSED VIA ALTER TABLE ROBTEST ENGINE=INNODB ROW_FORMAT=COMPRESSED FILESIZE AFTER RETURNING TO COMPRESSED;-RW-RW---- 1 MYSQL MYSQL 65536 2010-06-21 17:19 ROBTEST.IBD ","SUMMARY":"BUGU00A0#54679  ALTER TABLE CAUSES COMPRESSED ROW_FORMAT TO REVERT TO COMPACT ","CLASS":1}
{"ID_DEFECT":"54686","DESCRIPTION":"     [22 JUN 2010 7:11]   YASUFUMI KINOSHITA          DESCRIPTION:FIELD->COL->MTYPE == TYPE ASSERTION ERROR AT ROWROW0SEL.CROW_SEL_CONVERT_MYSQL_KEY_TO_INNOBASE() IS CALLED EVEN WHENPREBUILT->INDEX_USABLE == FALSE FROM HA_INNOBASE::INDEX_READ()I HAVE CHECK THE NEWEST SOURCE CODE, BUT IT SEEMS NOT TO BE FIXED STILL.HOW TO REPEAT:SORRY, IT MAY BE RARE CASE AND I DONT HAVE EXACT REPRODUCE PROCEDURE...SUGGESTED FIX:AT HANDLERHA_INNODB.CC,FUNCTION HA_INNOBASE::INDEX_READ():JUST BEFORE CALLING ROW_SEL_CONVERT_MYSQL_KEY_TO_INNOBASE(),ADDING AS FOLLOWING.(IT IS SAME ERROR CODE AT ROW_SEARCH_FOR_MYSQL())=================================                * CONVERT THE SEARCH KEY VALUE TO INNODB FORMAT INTO                PREBUILT->SEARCH_TUPLE *+               IF (UNIV_UNLIKELY(!PREBUILT->INDEX_USABLE)) +                       RETURN(DB_MISSING_HISTORY);+               +                ROW_SEL_CONVERT_MYSQL_KEY_TO_INNOBASE(                        PREBUILT->SEARCH_TUPLE,                        (BYTE*) KEY_VAL_BUFF,=================================== ","SUMMARY":"BUGU00A0#54686  ASSERTION ERROR IN ROWROW0SEL.C ","CLASS":1}
{"ID_DEFECT":"55027","DESCRIPTION":"     [6 JUL 2010 13:32]   MIKHAIL IZIOUMTCHENKO          DESCRIPTION:THIS IS BUILTIN ONLY BUG WHICH STARTED TO HAPPEN AFTER MERGING THE FIXTO BUG#54583. IT HAS A VERY GOOD REPRODUCIBILITY WITH 5.1 BUILTINBUT NOT WITH ANY VERSION OF THE PLUGIN WITH THE SAME FIX TO BUG#54583 PRESENT.THE STACK BACKTRACE WOULD LOOK LIKE #5  0X0000003ACBC31D10 IN ABORT () FROM LIB64LIBC.SO.6 #6  0X000000000080FE10 IN DICT_TABLE_GET_ON_ID (TABLE_ID=...,     TRX=0X2AAAAC07F0B8) AT DICTDICT0DICT.C:625 #7  0X00000000008B5C3D IN ROW_UNDO_MOD_PARSE_UNDO_REC (NODE=0X2AAAAC0868B8,     THR=0X2AAAAC06C1B0) AT ROWROW0UMOD.C:672 #8  0X00000000008B5E36 IN ROW_UNDO_MOD (NODE=0X2AAAAC0868B8,     THR=0X2AAAAC06C1B0) AT ROWROW0UMOD.C:721 #9  0X000000000087B79B IN ROW_UNDO (NODE=0X2AAAAC0868B8, THR=0X2AAAAC06C1B0)     AT ROWROW0UNDO.C:285 #10 0X000000000087B892 IN ROW_UNDO_STEP (THR=0X2AAAAC06C1B0)     AT ROWROW0UNDO.C:327 #11 0X000000000085DE15 IN QUE_THR_STEP (THR=0X2AAAAC06C1B0)     AT QUEQUE0QUE.C:1254 #12 0X000000000085E017 IN QUE_RUN_THREADS_LOW (THR=0X2AAAAC06C1B0)     AT QUEQUE0QUE.C:1319 #13 0X000000000085E122 IN QUE_RUN_THREADS (THR=0X2AAAAC05FDB0)     AT QUEQUE0QUE.C:1355 #14 0X000000000089299B IN TRX_ROLLBACK_OR_CLEAN_ALL_WITHOUT_SESS (     ARG=0X7FFF7D8EE38C) AT TRXTRX0ROLL.C:538AND THE TABLE IS A SYSTEM TABLE, SYS_COULMNS IIRCHOW TO REPEAT:REPRODUCIBILITY LOOKS GOOD IN MY STANDARD STRESSRECOVERY TESTING.SUGGESTED FIX:NOT SURE. THIS SEEMS TO BE THE SAME ASSERT THAT MADE MARKO INTRODUCEX DICTIONARY LOCKING IN ROW_UNDO. TEMPORARILY REMOVING THE FIX TO BUG#54583IS ONE OPTION. ","SUMMARY":"BUGU00A0#55027  ASSERTION: MUTEX_OWN(&DICT_SYS->MUTEX) IN DICT_TABLE_GET_ON_ID() ","CLASS":1}
{"ID_DEFECT":"56628","DESCRIPTION":"     [7 SEP 2010 19:46]   ELENA STEPANOVA          DESCRIPTION:KEY_BLOCK_SIZE=0 CLAUSE FOR AN INNODB TABLE CAUSES A WARNING INNODB: IGNORING KEY_BLOCK_SIZE=0. THIS IS TRUE FOR CREATE TABLE OR ALTER ON A TABLE WITH DEFAULT KEY_BLOCK_SIZE, BUT WRONG FOR ALTER TABLE IF KEY_BLOCK_SIZE WAS PREVIOUSLY SET: IN THIS CASE, DESPITE THE WARNING, KEY_BLOCK_SIZE IS REMOVED FROM THE TABLE CREATE OPTIONS.IF INNODB_STRICT_MODE=ON, INSTEAD OF PRODUCING THE WARNING THE STATEMENT FAILS.SETTING KEY_BLOCK_SIZE=0 IS THE ONLY WAY IVE FOUND SO FAR TO GET RID OF KEY_BLOCK_SIZE IN TABLE PARAMETERS. IF IT IS INDEED SO, IT SHOULD NOT BE TREATED AS AN ERROR. HOW TO REPEAT:--SOURCE INCLUDEHAVE_INNODB.INC--DISABLE_WARNINGSDROP TABLE IF EXISTS T;--ENABLE_WARNINGSCREATE TABLE T ( I INT ) ENGINE=INNODB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=2;SELECT TABLE_NAME,ROW_FORMAT,CREATE_OPTIONS    FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=T;SET INNODB_STRICT_MODE=1;--ECHO # WITH STRICT MODE ON, ATTEMPT TO REMOVE KEY_BLOCK_SIZE CAUSES AN ERROR:--ERROR ER_CANT_CREATE_TABLEALTER TABLE T KEY_BLOCK_SIZE=0;SET INNODB_STRICT_MODE=0;--ECHO # WITH STRICT MODE OFF, WE ARE GETTING A WARNINGALTER TABLE T KEY_BLOCK_SIZE=0;--ECHO # ... BUT THE WARNING IS WRONG, IN FACT KEY_BLOCK_SIZE=0 WAS ACTED UPON:SELECT TABLE_NAME,ROW_FORMAT,CREATE_OPTIONS   FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=T;# CLEANUPDROP TABLE T;--EXITSUGGESTED FIX:DISABLE THE WARNING IF ALTER TABLE ... KEY_BLOCK_SIZE=0 IS ISSUED FOR A TABLE WITH PREVIOUSLY SET KEY_BLOCK_SIZE; OR, PROVIDE ANOTHER WAY TO REMOVE KEY_BLOCK_SIZE FROM TABLE CREATION OPTIONS, AND CHANGE THE ALTER BEHAVIOR SO THAT KEY_BLOCK_SIZE=0 IS REALLY IGNORED (DOES NOT CHANGE ANYTHING). ","SUMMARY":"BUGU00A0#56628  ALTER TABLE .. KEY_BLOCK_SIZE=0 PRODUCES UNTRUE WARNING OR UNNECESSARY ERROR ","CLASS":1}
{"ID_DEFECT":"56632","DESCRIPTION":"     [7 SEP 2010 21:39]   ELENA STEPANOVA          DESCRIPTION:IF TABLE CREATE OPTIONS CONTAIN A VALID VALUE OF KEY_BLOCK_SIZE, ALTER ON THE TABLE IMPLICITLY CONVERTS CURRENT ROW_FORMAT INTO COMPRESSED, WITHOUT ANY WARNINGS.IN THE PROVIDED TEST CASE, CREATE TABLE PRODUCES A WARNING IGNORING KEY_BLOCK_SIZE=1 UNLESS ROW_FORMAT=COMPRESSED, AND ROW_FORMAT OF THE CREATED TABLE IS COMPACT. THE FOLLOWING ALTER TABLE DOES NOT PRODUCE ANY WARNINGS, BUT ROW_FORMAT SWITCHES TO COMPRESSED.HOW TO REPEAT:SET INNODB_STRICT_MODE=0;DROP TABLE IF EXISTS T;CREATE TABLE T ( I INT ) ENGINE=INNODB    ROW_FORMAT=COMPACT KEY_BLOCK_SIZE=1;SHOW WARNINGS;SELECT TABLE_NAME,ROW_FORMAT,CREATE_OPTIONS    FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=T;ALTER TABLE T ADD COLUMN F1 INT;SELECT TABLE_NAME,ROW_FORMAT,CREATE_OPTIONS    FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=T;SUGGESTED FIX:DO NOT PERFORM IMPLICIT FORMAT CONVERSION. ","SUMMARY":"BUGU00A0#56632  ALTER TABLE IMPLICITLY CHANGES ROW_FORMAT TO COMPRESSED ","CLASS":1}
{"ID_DEFECT":"56982","DESCRIPTION":"     [23 SEP 2010 20:42]   CHRIS CALENDER          DESCRIPTION:WHEN THE MYSQL AND INNODB DATA DICTIONARIES ARE OUT OF SYNC WITH RESPECT TO AN AUTOINC COLUMN, THEN INNODB WILL THROW AN ASSERTION FAILURE THE NEXT TIME A COMMAND IS GIVEN THAT CALLS HA_INNOBASE::INNOBASE_PEEK_AUTOINC().100920 14:11:24  INNODB: MYSQL AND INNODB DATA DICTIONARIES ARE OUT OF SYNC.INNODB: UNABLE TO FIND THE AUTOINC COLUMN ID IN THE INNODB TABLE QUADCONFIGURATIONS.INNODB: WE SET THE NEXT AUTOINC COLUMN VALUE TO 0,INNODB: IN EFFECT DISABLING THE AUTOINC NEXT VALUE GENERATION.INNODB: YOU CAN EITHER SET THE NEXT AUTOINC VALUE EXPLICITLY USING ALTER TABLEINNODB: OR FIX THE DATA DICTIONARY BY RECREATING THE TABLE.100920 14:11:24  INNODB: ASSERTION FAILURE IN THREAD 16 IN FILE HANDLERHA_INNODB.CC LINE 7972INNODB: FAILING ASSERTION: AUTO_INC > 0INNODB: WE INTENTIONALLY GENERATE A MEMORY TRAP.INNODB: SUBMIT A DETAILED BUG REPORT TO HTTP:BUGS.MYSQL.COM.INNODB: IF YOU GET REPEATED ASSERTION FAILURES OR CRASHES, EVENINNODB: IMMEDIATELY AFTER THE MYSQLD STARTUP, THERE MAY BEINNODB: CORRUPTION IN THE INNODB TABLESPACE. PLEASE REFER TOINNODB: HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENFORCING-RECOVERY.HTMLINNODB: ABOUT FORCING RECOVERY.100920 14:11:24 - MYSQLD GOT SIGNAL 11 ;THIS COULD BE BECAUSE YOU HIT A BUG. IT IS ALSO POSSIBLE THAT THIS BINARYOR ONE OF THE LIBRARIES IT WAS LINKED AGAINST IS CORRUPT, IMPROPERLY BUILT,OR MISCONFIGURED. THIS ERROR CAN ALSO BE CAUSED BY MALFUNCTIONING HARDWARE.WE WILL TRY OUR BEST TO SCRAPE UP SOME INFO THAT WILL HOPEFULLY HELP DIAGNOSETHE PROBLEM, BUT SINCE WE HAVE ALREADY CRASHED, SOMETHING IS DEFINITELY WRONGAND THIS MAY FAIL.KEY_BUFFER_SIZE=262144000READ_BUFFER_SIZE=262144MAX_USED_CONNECTIONS=37MAX_THREADS=151THREADS_CONNECTED=36IT IS POSSIBLE THAT MYSQLD COULD USE UP TO KEY_BUFFER_SIZE + (READ_BUFFER_SIZE + SORT_BUFFER_SIZE)*MAX_THREADS = 305854 KBYTES OF MEMORYHOPE THATS OK; IF NOT, DECREASE SOME VARIABLES IN THE EQUATION.THD: 0X1271A2B28ATTEMPTING BACKTRACE. YOU CAN USE THE FOLLOWING INFORMATION TO FIND OUTWHERE MYSQLD DIED. IF YOU SEE NO MESSAGES AFTER THIS, SOMETHING WENTTERRIBLY WRONG...U01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:MY_PRINT_STACKTRACE+0X1CU01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:HANDLE_SEGFAULT+0X290LIBSPARCV9LIBC.SO.1:0XD65B4LIBSPARCV9LIBC.SO.1:0XCA104LIBSPARCV9LIBC.SO.1:0XCA310U01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:__1CLHA_INNOBASEVINNOBASE_PEEK_AUTOINC6M_X_+0X164 [ SIGNAL 11 (SEGV)]U01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:__1CLHA_INNOBASEEINFO6MI_I_+0X500U01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:0X34E954U01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:__1COGET_ALL_TABLES6FPNDTHD_PNKTABLE_LIST_PNEITEM__I_+0XD84U01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:__1CYGET_SCHEMA_TABLES_RESULT6FPNEJOIN_NXENUM_SCHEMA_TABLE_STATE__B_+0X1B0U01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:__1CEJOINEEXEC6M_V_+0X448U01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:__1CMMYSQL_SELECT6FPNDTHD_PPPNEITEM_PNKTABLE_LIST_IRNELIST4N0B___P2IPNIST_ORDER_9D39DXPNNSELECT_RESULT_PNSST_SELECT_LEX_UNIT_PNNST_SELECT_LEX__B_+0X39CU01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:__1CNHANDLE_SELECT6FPNDTHD_PNGST_LEX_PNNSELECT_RESULT_L_B_+0XECU01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:0X2471F8U01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:__1CVMYSQL_EXECUTE_COMMAND6FPNDTHD__I_+0X6FCU01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:__1CLMYSQL_PARSE6FPNDTHD_PKCIP3_V_+0X1A4U01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:__1CQDISPATCH_COMMAND6FNTENUM_SERVER_COMMAND_PNDTHD_PCI_B_+0X7ACU01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:__1CKDO_COMMAND6FPNDTHD__B_+0XE0U01APPMYSQLMYSQL-ENTERPRISE-GPL-5.1.49-SOLARIS10-SPARC-64BITBINMYSQLD:HANDLE_ONE_CONNECTION+0X168LIBSPARCV9LIBC.SO.1:0XD6488PLEASE READ HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENRESOLVE-STACK-DUMP.HTMLAND FOLLOW INSTRUCTIONS ON HOW TO RESOLVE THE STACK TRACE.RESOLVED STACK TRACE IS MUCH MORE HELPFUL IN DIAGNOSING THEPROBLEM, SO PLEASE DO RESOLVE ITTRYING TO GET SOME VARIABLES.SOME POINTERS MAY BE INVALID AND CAUSE THE DUMP TO ABORT...THD->QUERY AT 11D8B46A0 = SELECT TABLE_SCHEMA,TABLE_NAME,TABLE_ROWS,ENGINE,AVG_ROW_LENGTH,UPDATE_TIME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA NOT IN (INFORMATION_SCHEMA,MYSQL)THD->THREAD_ID=283THD->KILLED=NOT_KILLEDTHE MANUAL PAGE AT HTTP:DEV.MYSQL.COMDOCMYSQLENCRASHING.HTML CONTAINSINFORMATION THAT SHOULD HELP YOU FIND OUT WHAT IS CAUSING THE CRASH.100920 14:11:24 MYSQLD_SAFE MYSQLD RESTARTED...HOW TO REPEAT:1. ALTER TABLE ... -- THAT RESULTS IN THE INNODB DD AND .FRM FILES TO GET OUT OF SYNC. (THIS IS NOT NECESSARILY EASY TO ACCOMPLISH, BUT COULD OCCUR IF THERE WAS A CRASH DURING AN ALTER TABLE OPERATION OR RENAMED THE AUTOINC COLUMN.2. RESTART3. SHOW CREATE TABLE AUTONIC_TABLE; -- OR WHATEVER IS THE EQUIVALENT THAT  RESULTS IN A CALL TO HA_INNOBASE::INNOBASE_PEEK_AUTOINC(). (EVEN A SELECT FROM I_S TABLES COULD LEAD TO THIS, SUCH AS IN THE ABOVE STACK TRACE).SUGGESTED FIX:REMOVE THE ASSERTION ON HA_INNOBASE::INNOBASE_PEEK_AUTOINC() AND SPAM THE LOG WITH A MESSAGE SIMILAR TO THE ONE PRINTED WHEN WE INITIALIZE THE AUTOINC VALUE DURING A TABLE OPEN. ","SUMMARY":"BUGU00A0#56982  ASSERTION FAILURE FROM HA_INNOBASE::INNOBASE_PEEK_AUTOINC() WHEN AUTO_INC > 0 ","CLASS":1}
{"ID_DEFECT":"57252","DESCRIPTION":"     [5 OCT 2010 15:20]   STEWART SMITH          DESCRIPTION:IVE SEEN THIS IN INNODB_PLUGIN IN MYSQL-TRUNK AS WELL AS PROBABLY EVERYTHING BACK TO 5.1.17 WHEN THIS VARIABLE WAS INTRODUCED.HA_INNOBASE::ANALYZE(*=================* THD*T THD,T *!< IN: CONNECTION THREAD HANDLE * HA_CHECK_OPT*TCHECK_OPT)T*!< IN: CURRENTLY IGNORED * * SIMPLY CALL ::INFO() WITH ALL THE FLAGS * INFO(HA_STATUS_TIME | HA_STATUS_CONST | HA_STATUS_VARIABLE); RETURN(0);VERSUS THIS CODE IN ::INFO(): IF (FLAG & HA_STATUS_TIME)   IF (INNOBASE_STATS_ON_METADATA)    * IN SQL_SHOW WE CALL WITH THIS FLAG: UPDATE   THEN STATISTICS SO THAT THEY ARE UP-TO-DATE *   PREBUILT->TRX->OP_INFO = UPDATING TABLE STATISTICS;   DICT_UPDATE_STATISTICS(IB_TABLE);   PREBUILT->TRX->OP_INFO = RETURNING VARIOUS INFO TO MYSQL;  IT DOES NOT SEEM LIKE IT WAS THE INTENTION OF INNOBASE_STATS_ON_METADATA TO ALSO DISABLE ANALYZESEE ALSO: HTTPS:BUGS.LAUNCHPAD.NETPERCONA-XTRADB+BUG655186 (WHERE WE ARE TRACKING FOR DRIZZLE)HOW TO REPEAT:DISABLE INNODB_STATS_ON_METADATA (IS ON BY DEFAULT), RUN ANALYZE.SUGGESTED FIX:THE SOLUTION IS PRETTY SIMPLE, IN ::INFO() DO SOMETHING LIKE THE FOLLOWING:IF (! INNOBASE_STATS_ON_METADATA)    DICT_UPDATE_STATISTICS(PREBUILT->TABLE); ","SUMMARY":"BUGU00A0#57252  DISABLING INNOBASE_STATS_ON_METADATA DISABLES ANALYZE ","CLASS":1}
{"ID_DEFECT":"57802","DESCRIPTION":"     [28 OCT 2010 11:13]   MARKO MU00E4KELU00E4          DESCRIPTION:IN THE INNODB PLUGIN 1.0, THE HASH_SEARCH MACRO WAS EXTENDED WITH AN ASSERTION PARAMETER THAT IS CHECKED IN DEBUG BUILDS. AN EMPTY PARAMETER IS PASSED IN THR0LOC.C AND THR0I_S.C, WHICH CAN CAUSE COMPILATION WARNINGS.EVERY MODULE SHOULD HAVE SOME DEBUG ASSERTIONS OR VALIDATION.HOW TO REPEAT:READ THE HASH_SEARCH INVOCATIONS IN THR0LOC.C AND THR0I_S.C.SUGGESTED FIX:ADD THE MISSING ASSERTIONS. ","SUMMARY":"BUGU00A0#57802  EMPTY ASSERTION PARAMETER PASSED TO THE HASH_SEARCH MACRO ","CLASS":1}
{"ID_DEFECT":"59874","DESCRIPTION":"     [1 FEB 2011 17:59]   VASIL DIMOV          DESCRIPTION:AFTER INNODB VALGRIND INSTRUMENTATION GOT ENABLED ON PB2VALGRIND RUNS WE GOT THE FOLLOWING FAILURE:IN 5.1:INNODB_PLUGIN.INNODB-ZIPINNODB_PLUGIN.INNODB_BUG52745INNODB_PLUGIN.INNODB_BUG56680IN 5.5:INNODB.INNODB-ZIPINNODB.INNODB_BUG56680IN TRUNK:INNODB.INNODB-ZIPINNODB.INNODB_BUG56680FAIL WITH (OUTPUT TAKEN FROM 5.1):==29347== THREAD 17:==29347== CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S)==29347==    AT 0XBA65BF: LONGEST_MATCH (DEFLATE.C:1143)==29347==    BY 0XBA7899: DEFLATE_SLOW (DEFLATE.C:1595)==29347==    BY 0XBA58EB: DEFLATE (DEFLATE.C:790)==29347==    BY 0X6C9D150: BTR_STORE_BIG_REC_EXTERN_FIELDS (BTR0CUR.C:3968)==29347==    BY 0X6D53ECE: ROW_INS_INDEX_ENTRY_LOW (ROW0INS.C:2131)==29347==    BY 0X6D54139: ROW_INS_INDEX_ENTRY (ROW0INS.C:2180)==29347==    BY 0X6D54395: ROW_INS_INDEX_ENTRY_STEP (ROW0INS.C:2265)==29347==    BY 0X6D5443B: ROW_INS (ROW0INS.C:2397)==29347==    BY 0X6D54A9E: ROW_INS_STEP (ROW0INS.C:2507)==29347==    BY 0X6D5D404: ROW_INSERT_FOR_MYSQL (ROW0MYSQL.C:1148)==29347==    BY 0X6CF68C8: HA_INNODB::WRITE_ROW(UNSIGNED CHAR*) (HA_INNODB.CC:4780)==29347==    BY 0X7E96D8: HANDLER::HA_WRITE_ROW(UNSIGNED CHAR*) (HANDLER.CC:4673)==29347==    BY 0X749AC2: WRITE_RECORD(THD*, ST_TABLE*, ST_COPY_INFO*) (SQL_INSERT.CC:1604)==29347==    BY 0X749F2C: SELECT_INSERT::SEND_DATA(LIST<ITEM>&) (SQL_INSERT.CC:3181)==29347==    BY 0X7152BD: END_SEND(JOIN*, ST_JOIN_TABLE*, BOOL) (SQL_SELECT.CC:12335)==29347==    BY 0X71BC09: EVALUATE_JOIN_RECORD(JOIN*, ST_JOIN_TABLE*, INT) (SQL_SELECT.CC:11555)HOW TO REPEAT:HTTP:PB2.NORWAY.SUN.COM?TEMPLATE=SHOW_PUSHES&BRANCH=MYSQL-5.1-INNODB-PB2HTTP:PB2.NORWAY.SUN.COM?TEMPLATE=SHOW_PUSHES&BRANCH=MYSQL-5.5-INNODB-PB2HTTP:PB2.NORWAY.SUN.COM?TEMPLATE=SHOW_PUSHES&BRANCH=MYSQL-TRUNK-INNODB-PB2 ","SUMMARY":"BUGU00A0#59874  VALGRIND WARNING IN INNODB COMPRESSION CODE ","CLASS":1}
{"ID_DEFECT":"31094","DESCRIPTION":"     [19 SEP 2007 10:28]   DOMAS MITUZAS          DESCRIPTION:IN CASE OF TWO TABLES JOINED, THERE IS NO WAY TO FORCE INDEX-BASED SORT ORDER AND FILESORT ALWAYS HAPPENS.HOW TO REPEAT:CREATE TABLE T1 (A INT PRIMARY KEY, B INT);CREATE TABLE T2 (C INT PRIMARY KEY, D INT);(THERE CAN BE MILLIONS OF VALUES TOO)INSERT INTO T1 VALUES (1,1),(2,2),(3,3),(4,4);INSERT INTO T2 VALUES (1,1),(2,2),(3,3),(4,4);USES FILESORT:SELECT * FROM T1 ORDER BY A; USES INDEX-BASED SORT:SELECT * FROM T1 FORCE INDEX(PRIMARY) ORDER BY A;USES FILESORT:SELECT * FROM T1 JOIN T2 ON B=C ORDER BY A;USES FILESORT:SELECT * FROM T1 FORCE INDEX(PRIMARY) JOIN T2 ON B=C ORDER BY A;MYSQL> EXPLAIN SELECT * FROM T1 FORCE INDEX(PRIMARY) JOIN T2 ON B=C ORDER BY A;+----+-------------+-------+------+---------------+------+---------+------+------+---------------------------------+| ID | SELECT_TYPE | TABLE | TYPE | POSSIBLE_KEYS | KEY  | KEY_LEN | REF  | ROWS | EXTRA                           |+----+-------------+-------+------+---------------+------+---------+------+------+---------------------------------+|  1 | SIMPLE      | T1    | ALL  | NULL          | NULL | NULL    | NULL |    4 | USING TEMPORARY; USING FILESORT | |  1 | SIMPLE      | T2    | ALL  | PRIMARY       | NULL | NULL    | NULL |    4 | USING WHERE; USING JOIN BUFFER  | +----+-------------+-------+------+---------------+------+---------+------+------+---------------------------------+2 ROWS IN SET (0.00 SEC)LIMIT DOES NOT MAKE EFFECT:MYSQL> EXPLAIN SELECT * FROM T1 FORCE INDEX(PRIMARY) JOIN T2 ON B=C ORDER BY A LIMIT 1;+----+-------------+-------+------+---------------+------+---------+------+------+---------------------------------+| ID | SELECT_TYPE | TABLE | TYPE | POSSIBLE_KEYS | KEY  | KEY_LEN | REF  | ROWS | EXTRA                           |+----+-------------+-------+------+---------------+------+---------+------+------+---------------------------------+|  1 | SIMPLE      | T1    | ALL  | NULL          | NULL | NULL    | NULL |    4 | USING TEMPORARY; USING FILESORT | |  1 | SIMPLE      | T2    | ALL  | PRIMARY       | NULL | NULL    | NULL |    4 | USING WHERE; USING JOIN BUFFER  | +----+-------------+-------+------+---------------+------+---------+------+------+---------------------------------+2 ROWS IN SET (0.00 SEC)SAME HAPPENS WITH IDENTICAL 200K-ROW TABLES:MYSQL> EXPLAIN SELECT * FROM MEM FORCE INDEX (A) JOIN MEM2 USING (A) ORDER BY A LIMIT 10;+----+-------------+-------+------+---------------+------+---------+------------+--------+----------------+| ID | SELECT_TYPE | TABLE | TYPE | POSSIBLE_KEYS | KEY  | KEY_LEN | REF        | ROWS   | EXTRA          |+----+-------------+-------+------+---------------+------+---------+------------+--------+----------------+|  1 | SIMPLE      | MEM   | ALL  | A             | NULL | NULL    | NULL       | 201625 | USING FILESORT | |  1 | SIMPLE      | MEM2  | REF  | A             | A    | 5       | TEST.MEM.A |      1 | USING WHERE    | +----+-------------+-------+------+---------------+------+---------+------------+--------+----------------+2 ROWS IN SET (0.00 SEC)SUGGESTED FIX:DO NOT USE NULL KEY, IF FORCE INDEX IS DONE. ","SUMMARY":"BUGU00A0#31094  FORCING INDEX-BASED SORT DOESNT WORK ANYMORE IF JOINS ARE DONE ","CLASS":1}
{"ID_DEFECT":"31399","DESCRIPTION":"     [4 OCT 2007 15:04]   TIMOUR KATCHAOUNOV          DESCRIPTION:IN THE CASE WHEN:- BIT FIELDS ARE STORED IN FIELD_BIT (MYISAM, INNODB, BUT NOT MEMORY), AND- THE NUMBER OF BITS IS NOT A MULTIPLE OF 8,WHEN RUNNING THE QUERY BELOW WITH THE SEMI-JOIN ALGORITHM, THERESULT IS INCORRECT. MOST LIKELY A COINCIDENCE, BUT  I COULD ONLYREPRODUCE THE BUG WITH < 8 BITS (E.G. 9 BITS WORK FINE).THE TEST CASE BELOW EXECUTES THE SAME QUERY WITH ALL THREE POSSIBLEMETHODS. ONE CAN SEE THAT WHEN SEMI-JOIN IS USED, THE RESULT IS WRONG.HOW TO REPEAT:* TEST WITH 7-BIT COLUMNS. *DROP TABLE IF EXISTS T1BIT7, T2BIT7;CREATE TABLE T1BIT7 (A1 BIT(7) NOT NULL) ENGINE=MYISAM;CREATE TABLE T2BIT7 (B1 BIT(7) NOT NULL) ENGINE=MYISAM;INSERT INTO T1BIT7 VALUES (B1100000);INSERT INTO T1BIT7 VALUES (B1100001);INSERT INTO T1BIT7 VALUES (B1100010);INSERT INTO T2BIT7 VALUES (B1100001);INSERT INTO T2BIT7 VALUES (B1100010);INSERT INTO T2BIT7 VALUES (B1100110);-- IN=>EXISTSSET @@OPTIMIZER_SWITCH=NO_MATERIALIZATION,NO_SEMIJOIN;EXPLAINSELECT BIN(A1) FROM T1BIT7WHERE A1 IN (SELECT B1 FROM T2BIT7);SELECT BIN(A1) FROM T1BIT7WHERE A1 IN (SELECT B1 FROM T2BIT7);-- SEMI-JOINSET @@OPTIMIZER_SWITCH=NO_MATERIALIZATION;EXPLAINSELECT BIN(A1) FROM T1BIT7WHERE A1 IN (SELECT B1 FROM T2BIT7);SELECT BIN(A1) FROM T1BIT7WHERE A1 IN (SELECT B1 FROM T2BIT7);-- MATERIALIZATIONSET @@OPTIMIZER_SWITCH=NO_SEMIJOIN;EXPLAINSELECT BIN(A1) FROM T1BIT7WHERE A1 IN (SELECT B1 FROM T2BIT7);SELECT BIN(A1) FROM T1BIT7WHERE A1 IN (SELECT B1 FROM T2BIT7);SUGGESTED FIX:MOST LIKELY THE PROBLEM IS IN THE METHODS USED TO COMPARE BITFIELDS. FEW OF THOSE METHODS COMPARE DIRECTLY THE DATA INTABLE->RECORD[0], BUT DO NOT TAKE INTO ACCOUNT THAT BIT FIELDS ","SUMMARY":"BUGU00A0#31399  WRONG QUERY RESULT WHEN DOING JOIN BUFFERING OVER BIT FIELDS ","CLASS":1}
{"ID_DEFECT":"35206","DESCRIPTION":"     [11 MAR 2008 11:25]   FREDERIC STEINFELS          DESCRIPTION:WHEN USING A SELECT QUERY ON TWO TABLES, THE RESULT FROM THE STATEMENT MIGHT BE 0 ROWS IF THE FOLLOWING CONDITIONS ARE MET:- YOU ARE USING 5.1.23. THE SAME STATEMENT WAS PERFECTLY WORKING UNDER THE 5.0 BRANCH- YOU ARE USING ORDER BY.- YOU ARE USING LIMIT 1 (IN MY CASE LIMIT 1 UP TO LIMIT 8 WILL RESULT 0 ROWS, LIMIT 9 WILL REPORT 9 ROWS)- THE KEY JOINING THE SECOND TABLE TO THE FIRST IS NOT INDEXEDHOW TO REPEAT:THE QUERY IN QUESTION ISSELECT   (SP.`PRICE`+10)*1.1 FROM  `SHIPZONECOUNTRY` AS SC,  `SHIPPRICE` AS SPWHERE  SP.`SHIPMODE_ID`=14   AND  SP.`SHIPZONECOUNTRY_CODE`=SC.`CODE`   AND  5.1<SP.`MAXWEIGHT`   AND   SC.`COUNTRY_CODE`=DEORDER BY   SP.`MAXWEIGHT` LIMIT 1TO CREATE TABLES;CREATE TABLE `SHIPPRICE` (  `ID` INT(11) NOT NULL AUTO_INCREMENT,  `SHIPZONECOUNTRY_CODE` VARCHAR(32) NOT NULL,  `SHIPMODE_ID` INT(11) NOT NULL,  `MAXWEIGHT` FLOAT NOT NULL,  `PRICE` DOUBLE NOT NULL,  PRIMARY KEY (`ID`),  UNIQUE KEY `SHIPZONECOUNTRY_CODE` (`SHIPZONECOUNTRY_CODE`,`SHIPMODE_ID`,`MAXWEIGHT`),  KEY `SHIPZONECOUNTRY_CODE_2` (`SHIPZONECOUNTRY_CODE`),  KEY `SHIPMODE_ID` (`SHIPMODE_ID`),  KEY `MAXWEIGHT` (`MAXWEIGHT`),  KEY `PRICE` (`PRICE`)) ENGINE=MYISAM AUTO_INCREMENT=557 DEFAULT CHARSET=LATIN1  CREATE TABLE `SHIPZONECOUNTRY` (  `ID` INT(11) NOT NULL AUTO_INCREMENT,  `CODE` VARCHAR(32) NOT NULL,  `COUNTRY_CODE` CHAR(3) NOT NULL,  PRIMARY KEY (`ID`),  UNIQUE KEY `CODE` (`CODE`,`COUNTRY_CODE`),  KEY `CODE_2` (`CODE`),  KEY `COUNTRY_CODE` (`COUNTRY_CODE`)) ENGINE=MYISAM AUTO_INCREMENT=997 DEFAULT CHARSET=LATIN1TRY THE SELECT STATEMENT FROM ABOVE WITH COUNTRY_CODE INDEXED AND NOT INDEXED.TO FILL TABLES WITH SOMETHING, USE THE ATTACHED FILES ","SUMMARY":"BUGU00A0#35206  SELECT QUERY RESULT DIFFERENT IF THE KEY IS INDEXED OR NOT ","CLASS":1}
{"ID_DEFECT":"35844","DESCRIPTION":"     [4 APR 2008 19:57]   CHRIS ELSWORTH          DESCRIPTION:SINCE 5.1.23, A SIMPLE QUERY THAT SHOULD USE AN INDEX LOOKUP TO RESOLVE A WHERE IS INSTEAD FAVOURING AN INDEX TO AVOID A FILESORT, EVEN THOUGH THE FILESORT WOULD BE COMPARATIVELY CHEAP AS OPPOSED TO A FULL TABLE SCAN.IN 5.1.22, BOTH QUERIES IN THE HOW-TO-REPEAT SECTION BELOW CORRECTLY USE THE ID2_J_ID1 INDEX TO RETURN THE QUERY WHILE EXAMINING ONLY 4 ROWS.IN 5.1.23, THE SECOND QUERY EXAMINES ALL 36 ROWS OF THE TABLE, JUST TO SAVE ITSELF A FILESORT.MAY ALSO BE WORTH NOTING I ONLY OBSERVED THIS WHEN USING INNODB; MYISAM WAS FINE.HOW TO REPEAT:DROP TABLE IF EXISTS BROKEN;CREATE TABLE BROKEN(        ID1 INT UNSIGNED NOT NULL AUTO_INCREMENT,        ID2 INT UNSIGNED NOT NULL,        JUNK INT UNSIGNED NOT NULL,        PRIMARY KEY (ID1),        KEY ID2_J_ID1 (ID2, JUNK, ID1)) ENGINE=INNODB;INSERT INTO BROKEN (ID2, JUNK) VALUES (1, 1), (1, 2), (1, 3), (1, 4);INSERT INTO BROKEN (ID2, JUNK) VALUES (2, 1), (2, 2), (2, 3), (2, 4);INSERT INTO BROKEN (ID2, JUNK) VALUES (3, 1), (3, 2), (3, 3), (3, 4);INSERT INTO BROKEN (ID2, JUNK) VALUES (4, 1), (4, 2), (4, 3), (4, 4);INSERT INTO BROKEN (ID2, JUNK) VALUES (5, 1), (5, 2), (5, 3), (5, 4);INSERT INTO BROKEN (ID2, JUNK) VALUES (6, 1), (6, 2), (6, 3), (6, 4);INSERT INTO BROKEN (ID2, JUNK) VALUES (7, 1), (7, 2), (7, 3), (7, 4);INSERT INTO BROKEN (ID2, JUNK) VALUES (8, 1), (8, 2), (8, 3), (8, 4);INSERT INTO BROKEN (ID2, JUNK) VALUES (9, 1), (9, 2), (9, 3), (9, 4);* WORKS (4 ROWS) *EXPLAIN SELECT ID1 FROM BROKEN WHERE ID2 = 4;MYSQL> EXPLAIN SELECT ID1 FROM BROKEN WHERE ID2 = 4*************************** 1. ROW ***************************           ID: 1  SELECT_TYPE: SIMPLE        TABLE: BROKEN         TYPE: REFPOSSIBLE_KEYS: ID2_J_ID1          KEY: ID2_J_ID1      KEY_LEN: 4          REF: CONST         ROWS: 4        EXTRA: USING INDEX1 ROW IN SET (0.00 SEC)* BROKEN IN 5.1.23 (36 ROWS) *EXPLAIN SELECT ID1 FROM BROKEN WHERE ID2 = 4 ORDER BY ID1;THE SECOND QUERY USES THE INFERIOR PRIMARY KEY TO AVOID THE FILESORT, BUT BY DOING SO INCURS A FULL TABLE SCAN WHICH IS DEVASTATING FOR PERFORMANCE ON A SIZEABLE TABLE:MYSQL> EXPLAIN SELECT ID1 FROM BROKEN WHERE ID2 = 4 ORDER BY ID1*************************** 1. ROW ***************************           ID: 1  SELECT_TYPE: SIMPLE        TABLE: BROKEN         TYPE: INDEXPOSSIBLE_KEYS: ID2_J_ID1          KEY: PRIMARY      KEY_LEN: 4          REF: NULL         ROWS: 36        EXTRA: USING WHERE; USING INDEX1 ROW IN SET (0.06 SEC) ","SUMMARY":"BUGU00A0#35844  ORDER BY FAVOURS FULL SCAN OVER A FASTER FILESORT ","CLASS":1}
{"ID_DEFECT":"36006","DESCRIPTION":"     [11 APR 2008 20:43]   RICHARD BEJTLICH          DESCRIPTION:THE FOLLOWING DESCRIBES A DATABASE RUNNING A VERSION OF 5.1.22 INSTALLED FROM A FREEBSD 7.0 PACKAGE.MYSQL> SELECT USER(), NOW(), VERSION(), DATABASE();+----------------+---------------------+---------------+------------+| USER()         | NOW()               | VERSION()     | DATABASE() |+----------------+---------------------+---------------+------------+| ROOT@LOCALHOST | 2008-04-01 19:31:18 | 5.1.22-RC-LOG | MYSQL      |+----------------+---------------------+---------------+------------+1 ROW IN SET (0.00 SEC)HERE IS HOW THE TABLE WAS CREATED.MYSQL> SHOW CREATE TABLE SANCP;...EDITED...| SANCP | CREATE TABLE `SANCP` (  `SID` INT(10) UNSIGNED NOT NULL,  `SANCPID` BIGINT(20) UNSIGNED NOT NULL,  `START_TIME` DATETIME NOT NULL,  `END_TIME` DATETIME NOT NULL,  `DURATION` INT(10) UNSIGNED NOT NULL,  `IP_PROTO` TINYINT(3) UNSIGNED NOT NULL,  `SRC_IP` INT(10) UNSIGNED DEFAULT NULL,  `SRC_PORT` SMALLINT(5) UNSIGNED DEFAULT NULL,  `DST_IP` INT(10) UNSIGNED DEFAULT NULL,  `DST_PORT` SMALLINT(5) UNSIGNED DEFAULT NULL,  `SRC_PKTS` INT(10) UNSIGNED NOT NULL,  `SRC_BYTES` INT(10) UNSIGNED NOT NULL,  `DST_PKTS` INT(10) UNSIGNED NOT NULL,  `DST_BYTES` INT(10) UNSIGNED NOT NULL,  `SRC_FLAGS` TINYINT(3) UNSIGNED NOT NULL,  `DST_FLAGS` TINYINT(3) UNSIGNED NOT NULL,  KEY `P_KEY` (`SID`,`SANCPID`),  KEY `SRC_IP` (`SRC_IP`),  KEY `DST_IP` (`DST_IP`),  KEY `DST_PORT` (`DST_PORT`),  KEY `SRC_PORT` (`SRC_PORT`),  KEY `START_TIME` (`START_TIME`)) ENGINE=MRG_MYISAM DEFAULT CHARSET=LATIN1 UNION=(`SANCP_SENSOR_20080308`,`SANCP_SENSOR_20080309`, ...EDITED... `SANCP_SENSOR_20080401`) | ... TRUNCATED...THE FOLLOWING EXPLAIN SHOWS HOW THE QUERY WOULD BE RUN.MYSQL> EXPLAIN SELECT COUNT(*) FROM SANCP;+----+-------------+-------+-------+---------------+----------+---------+------+-----------+-------------+| ID | SELECT_TYPE | TABLE | TYPE  | POSSIBLE_KEYS | KEY      | KEY_LEN | REF  | ROWS      | EXTRA       |+----+-------------+-------+-------+---------------+----------+---------+------+-----------+-------------+|  1 | SIMPLE      | SANCP | INDEX | NULL          | DST_PORT | 3       | NULL | 259886280 | USING INDEX |+----+-------------+-------+-------+---------------+----------+---------+------+-----------+-------------+1 ROW IN SET (0.18 SEC)EXECUTING THIS QUERY TOOK, ON AVERAGE, 2 HOURS AND 20 MINUTES!I TRIED UPGRADING TO 5.1.23, BUT HAD THE SAME PROBLEM.HOW TO REPEAT:I GOT THE SAME RESULTS ON ALL DATABASES I TRIED THAT WERE RUNNING 5.1.22 OR 5.1.23.SUGGESTED FIX:THE FOLLOWING SHOWS A SIMILAR DATABASE THAT ACTS CORRECTLY.MYSQL> SELECT USER(), NOW(), VERSION(), DATABASE();+----------------+---------------------+-------------+------------+| USER()         | NOW()               | VERSION()   | DATABASE() |+----------------+---------------------+-------------+------------+| ROOT@LOCALHOST | 2008-04-01 09:58:19 | 5.1.11-BETA | MYSQL      | +----------------+---------------------+-------------+------------+1 ROW IN SET (0.02 SEC)MYSQL> SHOW CREATE TABLE SANCP;| SANCP | CREATE TABLE `SANCP` (  `SID` INT(10) UNSIGNED NOT NULL,  `SANCPID` BIGINT(20) UNSIGNED NOT NULL,  `START_TIME` DATETIME NOT NULL,  `END_TIME` DATETIME NOT NULL,  `DURATION` INT(10) UNSIGNED NOT NULL,  `IP_PROTO` TINYINT(3) UNSIGNED NOT NULL,  `SRC_IP` INT(10) UNSIGNED DEFAULT NULL,  `SRC_PORT` SMALLINT(5) UNSIGNED DEFAULT NULL,  `DST_IP` INT(10) UNSIGNED DEFAULT NULL,  `DST_PORT` SMALLINT(5) UNSIGNED DEFAULT NULL,  `SRC_PKTS` INT(10) UNSIGNED NOT NULL,  `SRC_BYTES` INT(10) UNSIGNED NOT NULL,  `DST_PKTS` INT(10) UNSIGNED NOT NULL,  `DST_BYTES` INT(10) UNSIGNED NOT NULL,  `SRC_FLAGS` TINYINT(3) UNSIGNED NOT NULL,  `DST_FLAGS` TINYINT(3) UNSIGNED NOT NULL,  KEY `P_KEY` (`SID`,`SANCPID`),  KEY `SRC_IP` (`SRC_IP`),  KEY `DST_IP` (`DST_IP`),  KEY `DST_PORT` (`DST_PORT`),  KEY `SRC_PORT` (`SRC_PORT`),  KEY `START_TIME` (`START_TIME`)) ENGINE=MRG_MYISAM DEFAULT CHARSET=LATIN1 UNION=(`SANCP_HACOM_20060822`,`SANCP_HACOM_20060823`, ...EDITED... `SANCP_HACOM_20080401`)MYSQL> EXPLAIN SELECT COUNT(*) FROM SANCP;+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+| ID | SELECT_TYPE | TABLE | TYPE | POSSIBLE_KEYS | KEY  | KEY_LEN | REF  | ROWS | EXTRA                        |+----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+|  1 | SIMPLE      | NULL  | NULL | NULL          | NULL | NULL    | NULL | NULL | SELECT TABLES OPTIMIZED AWAY | +----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+1 ROW IN SET (0.01 SEC)RUNNING THE QUERY SELECT COUNT(*) FROM SANCP; RETURNS ALMOST INSTANTLY.I DOWNGRADED THE DATABASE SHOWN IN THE DESCRIPTION SECTION TO 5.0.51A AND GOT RESULTS SIMILAR TO THOSE IN THIS SUGGESTED FIX SECTION.  I APOLOGIZE FOR NOT HAVING THOSE RESULTS AVAILABLE.THANK YOU FOR YOUR ATTENTION AND HELP! ","SUMMARY":"BUGU00A0#36006  OPTIMIZER DOES TABLE SCAN FOR SELECT COUNT(*) W5.1.22, .23, NOT 5.0.51, 5.1.11 ","CLASS":1}
{"ID_DEFECT":"37742","DESCRIPTION":"     [30 JUN 2008 14:33]   ZARDOSHT KASHEFF          DESCRIPTION:TAKE A TABLE WITH THE FOLLOWING SCHEMA:CREATE TABLE `FOO` (  `A` INT(11) DEFAULT NULL,  `B` INT(11) DEFAULT NULL,  `C` CHAR(10) NOT NULL DEFAULT ,  PRIMARY KEY (`C`(3)),  KEY `B` (`B`))INSERT 10 ELEMENTS INTO THE TABLE. THE PERFORM THE FOLLOWING QUERY:SELECT C FROM PLEASE WHERE B > SOME_VALUE;FOR STORAGE ENGINES THAT EXPOSE THE FLAG HA_PRIMARY_KEY_IN_READ_INDEX, MYSQL WILL CLAIM THAT THIS QUERY IS A COVERING INDEX ON THE KEY B. THE PROBLEM IS THAT THE PRIMARY KEY DOES NOT HAVE THE ENTIRE COLUMN OF C, IT HAS A PREFIX. UNLESS I MISUNDERSTAND THE MEANING OF THE FLAG, THE HA_EXTRA_KEYREAD FLAG SHOULD NOT BE SET HERE, BECAUSE MORE THAN THE KEY NEEDS TO BE COPIED FROM THE STORAGE ENGINE.I WILL NOTE THAT THIS SCENARIO DOES NOT CAUSE A BEHAVIORAL BUG IN INNODB. INNODB SEEMS TO KNOW ABOUT THIS PROBLEM AND WORKS AROUND IT. NEVERTHELESS, IT SEEMS TO BE A BUG.HOW TO REPEAT:MENTIONED IN THE DESCRIPTIONSUGGESTED FIX:IN SUCH SCENARIOS, THE FLAG HA_EXTRA_KEYREAD SHOULD NOT BE SET ","SUMMARY":"BUGU00A0#37742  HA_EXTRA_KEYREAD FLAG IS SET WHEN KEY CONTAINS ONLY PREFIX OF REQUESTED COLUMN ","CLASS":1}
{"ID_DEFECT":"37761","DESCRIPTION":"     [1 JUL 2008 12:30]   ROLAND BOUMAN          DESCRIPTION:IN MYSQL  5.0.60 AND 5.0.66 THESE QUERIES BOTH RETURN AN EMPTY SET:SELECT * FROM (SELECT 1 ID UNION ALL SELECT 2) A WHERE NOT ID IN (SELECT NULL UNION ALL SELECT 1);SELECT * FROM (SELECT 1 ID UNION ALL SELECT 2) A WHERE NOT ID IN (NULL, 1);IN MYSQL 5.1.23 AND MYSQL 5.1.25, AND POSSIBLY OTHER VERSIONS, THE SECOND QUERY USING THE VALUE LIST RETURNS ONE ROW:+----+| ID |+----+|  2 |+----+1 ROW IN SET (0.00 SEC)IT IS NOT ENTIRELY CLEAR WHAT THE BUG IS - IT SEEMS VERY INTUITIVE THAT IN (<VALUE-LIST>) SHOULD BE THE SAME AS IN (SUBQUERY-EQUIVALENT-TO-VALUELIST)BUT I AM NOT ENTIRELY SURE ABOUT THE SUBTLETIES OF STANDARD SQL NULL HANDLING TO SAY FOR SURE.HOWEVER, IT SEEMS CLEAR THAT MYSQL 5 AND MYSQL 5.1 SHOULD BEHAVE THE SAME FOR THESE QUERIES.HOW TO REPEAT:COMPARE ON MYSQL 5.0.66 AND MYSQL 5.1.25:SELECT * FROM (SELECT 1 ID UNION ALL SELECT 2) A WHERE NOT ID IN (SELECT NULL UNION ALL SELECT 1);SELECT * FROM (SELECT 1 ID UNION ALL SELECT 2) A WHERE NOT ID IN (NULL, 1);SUGGESTED FIX:MAKE MYSQL 5.0 AND 5.1 BEHAVE THE SAME ","SUMMARY":"BUGU00A0#37761  IN HANDLES NULL DIFFERENTLY FOR TABLE-SUBQUERY AND VALUE-LIST ","CLASS":1}
{"ID_DEFECT":"37936","DESCRIPTION":"     [7 JUL 2008 16:07]   PHILIP STOEV          DESCRIPTION:WHEN EXECUTING A QUERY CONTAINING DATE EXPRESSIONS, MYSQLD CRASHED AS FOLLOWS:#9  0X081F72DD IN FIELD_DATETIME::STORE (THIS=0XA035828, FROM=0XA080F50 2000-6-25, LEN=9, CS=0X877FC40) AT FIELD.CC:5831#10 0X08171166 IN ITEM::SAVE_STR_VALUE_IN_FIELD (THIS=0XA080F60, FIELD=0XE4D, RESULT=0XA080F6C) AT ITEM.CC:371#11 0X0817119C IN ITEM_STRING::SAVE_IN_FIELD (THIS=0XA080F60, FIELD=0XA035828, NO_CONVERSIONS=TRUE) AT ITEM.CC:4896#12 0X0816C308 IN ITEM::SAVE_IN_FIELD_NO_WARNINGS (THIS=0XA080F60, FIELD=0XA035828, NO_CONVERSIONS=<VALUE OPTIMIZED OUT>) AT ITEM.CC:972#13 0X082EBDA1 IN GET_MM_LEAF (PARAM=0XA891F338, CONF_FUNC=0XA080FE0, FIELD=0XA035828, KEY_PART=0XA08AC10, TYPE=ITEM_FUNC::LE_FUNC, VALUE=0XA080F60)    AT OPT_RANGE.CC:5679#14 0X082EC39D IN GET_MM_PARTS (PARAM=0XA891F338, COND_FUNC=0XA080FE0, FIELD=0XA035828, TYPE=ITEM_FUNC::LE_FUNC, VALUE=0XA080F60, CMP_TYPE=INT_RESULT)    AT OPT_RANGE.CC:5488#15 0X082F8B7C IN GET_FUNC_MM_TREE (PARAM=0XA891F338, COND_FUNC=0XA080FE0, FIELD=0XA035828, VALUE=0XA080F60, CMP_TYPE=INT_RESULT, INV=FALSE)    AT OPT_RANGE.CC:5167#16 0X082F8D18 IN GET_FULL_FUNC_MM_TREE (PARAM=0XA891F338, COND_FUNC=0XA080FE0, FIELD_ITEM=0XA080EB8, VALUE=0XA080F60, INV=<VALUE OPTIMIZED OUT>)    AT OPT_RANGE.CC:5266#17 0X082F9513 IN GET_MM_TREE (PARAM=0XA891F338, COND=0XA080FE0) AT OPT_RANGE.CC:5456#18 0X082F8E2F IN GET_MM_TREE (PARAM=0XA891F338, COND=<VALUE OPTIMIZED OUT>) AT OPT_RANGE.CC:5308#19 0X082F9C58 IN SQL_SELECT::TEST_QUICK_SELECT (THIS=0XA081F70, THD=0XA025F40, KEYS_TO_USE=MAP = 16, PREV_TABLES=0, LIMIT=4294967295,    FORCE_QUICK_RANGE=FALSE, ORDERED_OUTPUT=FALSE) AT OPT_RANGE.CC:2311#20 0X0828693F IN MAKE_JOIN_STATISTICS (JOIN=0XA071DB8, TABLES=0X0, CONDS=0XA081BB8, KEYUSE_ARRAY=0XA073094) AT SQL_SELECT.CC:3758#21 0X08287EB5 IN JOIN::OPTIMIZE (THIS=0X0) AT SQL_SELECT.CC:1549#22 0X0828E1A8 IN MYSQL_SELECT (THD=0XA025F40, RREF_POINTER_ARRAY=0XA027424, TABLES=0XA04B3E8, WILD_NUM=0, FIELDS=@0XA0273B4, CONDS=0XA0810D0, OG_NUM=1,    ORDER=0X0, GROUP=0XA0814B0, HAVING=0X0, PROC_PARAM=0X0, SELECT_OPTIONS=2147764736, RESULT=0XA081548, UNIT=0XA027090, SELECT_LEX=0XA027320)    AT SQL_SELECT.CC:2987#23 0X082910DC IN HANDLE_SELECT (THD=0XA025F40, LEX=0XA027034, RESULT=0XA081548, SETUP_TABLES_DONE_OPTION=0) AT SQL_SELECT.CC:302#24 0X082201E2 IN EXECUTE_SQLCOM_SELECT (THD=0XA025F40, ALL_TABLES=0XA04B3E8) AT SQL_PARSE.CC:4847#25 0X08220F61 IN MYSQL_EXECUTE_COMMAND (THD=0XA025F40) AT SQL_PARSE.CC:2015#26 0X0822A02E IN MYSQL_PARSE (THD=0XA025F40,    INBUF=0XA04AE08 SELECT  COUNT(DISTINCT OUTR . `VARCHAR_NOKEY` ) AS X FROM B AS OUTR2 LEFT JOIN C AS OUTR ON ( OUTR2 . `VARCHAR_NOKEY` = OUTR . `VARCHAR_KEY` ) WHERE OUTR . `VARCHAR_KEY` IN ( SELECT  INNR . `DATETIME_..., LENGTH=451, FOUND_SEMICOLON=0XA8923314) AT SQL_PARSE.CC:5811#27 0X0822A921 IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0XA025F40,    PACKET=0XA027959 SELECT  COUNT(DISTINCT OUTR . `VARCHAR_NOKEY` ) AS X FROM B AS OUTR2 LEFT JOIN C AS OUTR ON ( OUTR2 . `VARCHAR_NOKEY` = OUTR . `VARCHAR_KEY` ) WHERE OUTR . `VARCHAR_KEY` IN ( SELECT  INNR . `DATETIME_..., PACKET_LENGTH=453) AT SQL_PARSE.CC:1051#28 0X0822BA49 IN DO_COMMAND (THD=0XA025F40) AT SQL_PARSE.CC:724#29 0X0821BEF0 IN HANDLE_ONE_CONNECTION (ARG=0XA025F40) AT SQL_CONNECT.CC:1153#30 0X0057D32F IN START_THREAD () FROM LIBLIBPTHREAD.SO.0#31 0X0049A27E IN CLONE () FROM LIBLIBC.SO.6THE ASSERTION THAT IS BEING HIT IS ASSERT_COLUMN_MARKED_FOR_WRITE, AT THE ENTRY OF FIELD_DATETIME::STORE. THE ASSERTION IS:(!TABLE || (!TABLE->WRITE_SET || BITMAP_IS_SET(TABLE->WRITE_SET, FIELD_INDEX))(GDB) PRINT TABLE$1 = (ST_TABLE *) 0XA035140(GDB) PRINT TABLE->WRITE_SET$2 = (MY_BITMAP *) 0XA0351E0(GDB) PRINT FIELD_INDEX$3 = 7(GDB) PRINT * TABLE->WRITE_SET$4 = BITMAP = 0XA0313B0, N_BITS = 11, LAST_WORD_MASK = 4294965248, LAST_WORD_PTR = 0XA0359CC, MUTEX = 0X0THE QUERY IN QUESTION IS:SELECT  COUNT(DISTINCT OUTR . `VARCHAR_NOKEY` ) AS X FROM B AS OUTR2 LEFT JOIN C AS OUTR ON ( OUTR2 . `VARCHAR_NOKEY` = OUTR . `VARCHAR_KEY` ) WHERE OUTR . `VARCHAR_KEY` IN ( SELECT  INNR . `DATETIME_KEY` AS Y FROM BB AS INNR2 LEFT JOIN AA AS INNR ON ( INNR2 . `INT_NOKEY` = INNR . `PK` ) WHERE INNR . `VARCHAR_KEY` < W  HAVING X = 16:36:21 ) AND OUTR . `DATETIME_KEY` <= 2000-6-25 AND OUTR . `VARCHAR_NOKEY` >= HKQ GROUP BY OUTR . `INT_NOKEY`HOW TO REPEAT:A SIMPLIFED TEST CASE WILL BE UPLOADED SHORTLY. ","SUMMARY":"BUGU00A0#37936  ASSERT_COLUMN_MARKED_FOR_WRITE IN FIELD_DATETIME::STORE , FIELD_VARSTRING::STORE ","CLASS":1}
{"ID_DEFECT":"39653","DESCRIPTION":"     [25 SEP 2008 18:26]   ZARDOSHT KASHEFF          DESCRIPTION:THE FUNCTION FIND_SHORTEST_KEY AT LINE 12598 IN SQL_SELECT.CC, IS USED IN MAKE_JOIN_READINFO TO DETERMINE WHAT COVERING INDEX TO USE TO SATISFY A QUERY. IN DOING SO, IT SIMPLY SELECTS THE INDEX WITH THE SMALLEST KEY LENGTH. IF THE PRIMARY KEY IS CLUSTERED, THEN THIS CAN LEAD TO A VERY BAD CHOICE, BECAUSE USING THE PRIMARY IMPLIES SCANNING THROUGH THE ENTIRE TABLE.WHAT FIND_SHORTEST_KEY SHOULD DO IS THE FOLLOWING. IF THE PRIMARY KEY IS A COVERING INDEX AND IS CLUSTERED, LIKE IN MYISAM, THEN THE BEHAVIOR TODAY SHOULD REMAIN THE SAME. IF THE PRIMARY KEY IS CLUSTERED, LIKE IN INNODB, THEN IT SHOULD NOT CONSIDER USING THE PRIMARY KEY BECAUSE THEN THE STORAGE ENGINE WILL HAVE TO SCAN THROUGH MUCH MORE DATA.HOW TO REPEAT:PERFORM THE FOLLOWING STEPS. THIS DEMONSTRATES THE ISSUE USING INNODB:MYSQL> CREATE TABLE BAR (A INT, B INT, C INT, D INT, E INT, F INT) ENGINE=INNODB;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)MYSQL> ALTER TABLE BAR ADD PRIMARY KEY (A);QUERY OK, 0 ROWS AFFECTED (0.01 SEC)RECORDS: 0  DUPLICATES: 0  WARNINGS: 0MYSQL> ALTER TABLE BAR ADD KEY (B,C);QUERY OK, 0 ROWS AFFECTED (0.01 SEC)RECORDS: 0  DUPLICATES: 0  WARNINGS: 0MYSQL> INSERT INTO BAR VALUES (1,1,1,1,1,1),(2,2,2,2,2,2),(3,3,3,3,3,3),(4,4,4,4,4,4),(5,5,5,5,5,5),(6,6,6,6,6,6),(7,7,7,7,7,7),(8,8,8,8,8,8),(9,9,9,9,9,9),(11,11,11,11,11,11);QUERY OK, 10 ROWS AFFECTED (0.00 SEC)RECORDS: 10  DUPLICATES: 0  WARNINGS: 0MYSQL> EXPLAIN SELECT COUNT(*) FROM BAR;+----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+| ID | SELECT_TYPE | TABLE | TYPE  | POSSIBLE_KEYS | KEY     | KEY_LEN | REF  |ROWS | EXTRA       |+----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+|  1 | SIMPLE      | BAR   | INDEX | NULL          | PRIMARY | 4       | NULL |  10 | USING INDEX |+----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+1 ROW IN SET (0.00 SEC)MYSQL> EXPLAIN SELECT COUNT(*) FROM BAR *************************** 1. ROW ***************************           ID: 1  SELECT_TYPE: SIMPLE        TABLE: BAR         TYPE: INDEXPOSSIBLE_KEYS: NULL          KEY: PRIMARY      KEY_LEN: 4          REF: NULL         ROWS: 10        EXTRA: USING INDEX1 ROW IN SET (0.00 SEC)SUGGESTED FIX:IF HANDLER->PRIMARY_KEY_IS_CLUSTERED() RETURNS TRUE, THEN FIND_SHORTEST_KEY, OR THE PLACES THAT USE FIND_SHORTEST_KEY, SHOULD COMPARE THE KEY LENGTHS OF OTHER COVERING INDEXES WITH THE ENTIRE ROW SIZE, NOT THE LENGTH OF THE PRIMARY KEY.IN THE ABOVE EXAMPLE, THE KEY (B,C) SHOULD BE USED INSTEAD OF THE PRIMARY KEY ","SUMMARY":"BUGU00A0#39653  FIND_SHORTEST_KEY IN SQL_SELECT.CC DOES NOT CONSIDER CLUSTERED PRIMARY KEYS ","CLASS":1}
{"ID_DEFECT":"43029","DESCRIPTION":"     [19 FEB 2009 18:37]   SERGEY PETRUNYA          DESCRIPTION:AS THE FOLLOWING EXPLAIN SHOWS, FORCE INDEX HINT IS IGNORED WHEN JOIN BUFFERING IS USEDMYSQL> EXPLAIN SELECT * FROM TEN A FORCE  INDEX FOR ORDER BY (A) , T2 B WHERE A.A < 4 ORDER BY A.A;+----+-------------+-------+-------+---------------+------+---------+------+------+----------------------------------------------+| ID | SELECT_TYPE | TABLE | TYPE  | POSSIBLE_KEYS | KEY  | KEY_LEN | REF  | ROWS | EXTRA                                        |+----+-------------+-------+-------+---------------+------+---------+------+------+----------------------------------------------+|  1 | SIMPLE      | A     | RANGE | A             | A    | 5       | NULL |    8 | USING WHERE; USING TEMPORARY; USING FILESORT | |  1 | SIMPLE      | B     | ALL   | NULL          | NULL | NULL    | NULL |   30 | USING JOIN BUFFER                            | +----+-------------+-------+-------+---------------+------+---------+------+------+----------------------------------------------+2 ROWS IN SET (0.01 SEC)HOW TO REPEAT:1. LOAD THE DATABASE DUMP (WILL UPLOAD HERE)2. RUN THE ABOVE MENTIONED EXPLAIN. ","SUMMARY":"BUGU00A0#43029  FORCE INDEX FOR ORDER BY IS IGNORED WHEN JOIN BUFFERING IS USED ","CLASS":1}
{"ID_DEFECT":"44139","DESCRIPTION":"     [7 APR 2009 23:00]   GARY PENDERGAST          DESCRIPTION:OPTIMIZER CHOOSES A TABLE SCAN WHEN THERE IS A NULL IN THE IN CLAUSE. THIS IS A REGRESSION. COMPARE EXPLAIN OUTPUT FROM 5.1.79:MYSQL [LOCALHOST] MSANDBOX (TEST) > EXPLAIN SELECT * FROM FOO WHERE A IN (160000, 160001, 160002)*************************** 1. ROW ***************************           ID: 1  SELECT_TYPE: SIMPLE        TABLE: FOO         TYPE: RANGEPOSSIBLE_KEYS: PRIMARY          KEY: PRIMARY      KEY_LEN: 4          REF: NULL         ROWS: 3        EXTRA: USING WHERE1 ROW IN SET (0.00 SEC)MYSQL [LOCALHOST] MSANDBOX (TEST) > EXPLAIN SELECT * FROM FOO WHERE A IN (NULL, 160000, 160001, 160002)*************************** 1. ROW ***************************           ID: 1  SELECT_TYPE: SIMPLE        TABLE: FOO         TYPE: RANGEPOSSIBLE_KEYS: PRIMARY          KEY: PRIMARY      KEY_LEN: 4          REF: NULL         ROWS: 3        EXTRA: USING WHERE1 ROW IN SET (0.01 SEC)TO 5.1.32:MYSQL [LOCALHOST] MSANDBOX (TEST) > EXPLAIN SELECT * FROM FOO WHERE A IN (160000, 160001, 160002)*************************** 1. ROW ***************************           ID: 1  SELECT_TYPE: SIMPLE        TABLE: FOO         TYPE: RANGEPOSSIBLE_KEYS: PRIMARY          KEY: PRIMARY      KEY_LEN: 4          REF: NULL         ROWS: 3        EXTRA: USING WHERE1 ROW IN SET (0.06 SEC)MYSQL [LOCALHOST] MSANDBOX (TEST) > EXPLAIN SELECT * FROM FOO WHERE A IN (NULL, 160000, 160001, 160002)*************************** 1. ROW ***************************           ID: 1  SELECT_TYPE: SIMPLE        TABLE: FOO         TYPE: ALLPOSSIBLE_KEYS: PRIMARY          KEY: NULL      KEY_LEN: NULL          REF: NULL         ROWS: 327680        EXTRA: USING WHERE1 ROW IN SET (0.00 SEC)HOW TO REPEAT:USE TEST;DROP TABLE IF EXISTS FOO;CREATE TABLE FOO (TA INT NOT NULL AUTO_INCREMENT,TB INT,TPRIMARY KEY( A ));INSERT INTO FOO( B ) VALUES (1),(1),(1),(1),(1);INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;INSERT INTO FOO( B ) SELECT B FROM FOO;EXPLAIN SELECT * FROM FOO WHERE A IN (160000, 160001, 160002)EXPLAIN SELECT * FROM FOO WHERE A IN (NULL, 160000, 160001, 160002)SUGGESTED FIX:USE INDEX WHEN AVAILABLE. ","SUMMARY":"BUGU00A0#44139  TABLE SCAN WHEN NULL APPEARS IN IN CLAUSE ","CLASS":1}
{"ID_DEFECT":"44290","DESCRIPTION":"     [15 APR 2009 11:54]   SHANE BESTER          DESCRIPTION:MYSQLD.EXE!SQL_SELECT::TEST_QUICK_SELECT()[OPT_RANGE.CC:2212]MYSQLD.EXE!TEST_IF_SKIP_SORT_ORDER()[SQL_SELECT.CC:13212]MYSQLD.EXE!JOIN::EXEC()[SQL_SELECT.CC:1757]MYSQLD.EXE!MYSQL_SELECT()[SQL_SELECT.CC:2380]MYSQLD.EXE!MYSQL_EXPLAIN_UNION()[SQL_SELECT.CC:16359]MYSQLD.EXE!SELECT_DESCRIBE()[SQL_SELECT.CC:16300]MYSQLD.EXE!JOIN::EXEC()[SQL_SELECT.CC:1764]MYSQLD.EXE!MYSQL_SELECT()[SQL_SELECT.CC:2380]MYSQLD.EXE!MYSQL_EXPLAIN_UNION()[SQL_SELECT.CC:16359]MYSQLD.EXE!EXECUTE_SQLCOM_SELECT()[SQL_PARSE.CC:4889]MYSQLD.EXE!MYSQL_EXECUTE_COMMAND()[SQL_PARSE.CC:2204]MYSQLD.EXE!MYSQL_PARSE()[SQL_PARSE.CC:5835]MYSQLD.EXE!DISPATCH_COMMAND()[SQL_PARSE.CC:1218]MYSQLD.EXE!DO_COMMAND()[SQL_PARSE.CC:857]MYSQLD.EXE!HANDLE_ONE_CONNECTION()[SQL_CONNECT.CC:1115]MYSQLD.EXE!PTHREAD_START()[MY_WINTHREAD.C:85]MYSQLD.EXE!_CALLTHREADSTART()[THREAD.C:295]MYSQLD.EXE!_THREADSTART()[THREAD.C:277]KERNEL32.DLL!BASETHREADSTART()HOW TO REPEAT:DROP TABLE IF EXISTS `T2`;CREATE TABLE `T2` (`C1` INT,`C2` INT,`C3` INT,`C4` INT,KEY (`C3`),KEY (`C4`),KEY (`C2`,`C3`)) ENGINE=INNODB;INSERT INTO `T2` VALUES (1,1,1,3);INSERT INTO `T2` VALUES (1,1,1,1);INSERT INTO `T2` VALUES (1,1,2,1);INSERT INTO `T2` VALUES (1,1,1,3);INSERT INTO `T2` VALUES (1,1,2,1);EXPLAIN SELECT 1 FROM ( SELECT COUNT(DISTINCT `C1`) FROM `T2`WHERE  `C2` IN (1,1) AND `C3` = 2 AND `C4` = 3 GROUP BY `C2` ) X; ","SUMMARY":"BUGU00A0#44290  CRASH IN SQL_SELECT::TEST_QUICK_SELECT FOR QUERY WITH DISTINCT OR ORDERGROUP BY ","CLASS":1}
{"ID_DEFECT":"45828","DESCRIPTION":"     [29 JUN 2009 15:55]   HARRISON FISK          DESCRIPTION:WITH INNODB TABLES, MYSQL WILL USE A LESS IDEAL INDEX IN ORDER TO AVOID A FILESORT, EVEN IF THE PREFIX OF THE PRIMARY KEY IS MUCH MORE SELECTIVE.WITH INNODB, YOU SHOULD PREFER TO USE THE PRIMARY KEY WHEN YOU CAN, AND EVEN IN THIS CASE, THE PRIMARY KEY IS THE PROPER CHOICE REGARDLESS OF CLUSTERED INDEX NATURE.5.0 DOES NOT EXHIBIT THIS BEHAVIOR, BUT BOTH 5.1 AND 5.4 DO.THIS MIGHT BE RELATED TO BUG #28404, BUT I DO NOT THINK SO.SEE HOW TO REPEAT FOR MORE DETAILS OF EXACT QUERIES.HOW TO REPEAT:-- CREATE THE TABLECREATE TABLE `T1` (  `C1` INT(11) UNSIGNED NOT NULL DEFAULT 0,  `C2` INT(11) UNSIGNED NOT NULL DEFAULT 0,  `C3` INT(11) UNSIGNED NOT NULL DEFAULT 0,  PRIMARY KEY (`C1`,`C2`),  KEY `C3` (`C3`)) ENGINE=INNODB;-- POPULATE WITH DATAINSERT INTO `T1` VALUES (5,2,1246276747);INSERT INTO `T1` VALUES (2,1,1246281721);INSERT INTO `T1` VALUES (7,3,1246281756);INSERT INTO `T1` VALUES (4,2,1246282139);INSERT INTO `T1` VALUES (3,1,1246282230);INSERT INTO `T1` VALUES (1,0,1246282712);INSERT INTO `T1` VALUES (8,3,1246282765);INSERT INTO T1 SELECT C1+10,C2+10,C3+10 FROM T1;INSERT INTO T1 SELECT C1+100,C2+100,C3+100 FROM T1;INSERT INTO T1 SELECT C1+1000,C2+1000,C3+1000 FROM T1;INSERT INTO T1 SELECT C1+10000,C2+10000,C3+10000 FROM T1;INSERT INTO T1 SELECT C1+100000,C2+100000,C3+100000 FROM T1;INSERT INTO T1 SELECT C1+1000000,C2+1000000,C3+1000000 FROM T1;-- QUERY AND NO ROWS WILL MATCH THE C1 CONDITION, WHEREAS ALL WILL MATCH C3SELECT * FROM T1 WHERE C1 = 99999999 AND C3 > 1 ORDER BY C3;-- INDEX ON C3 WILL BE USED INSTEAD OF PRIMARY KEYEXPLAIN SELECT * FROM T1 WHERE C1 = 99999999 AND C3 > 1 ORDER BY C3;-- IF WE FORCE THE PRIMARY KEY, WE CAN SEE THE ESTIMATE IS 1 EXPLAIN SELECT * FROM T1 FORCE INDEX (PRIMARY) WHERE C1 = 99999999 AND C3 > 1 ORDER BY C3;-- IF WE SWITCH TO MYISAM, PRIMARY KEY IS USED PROPERLYALTER TABLE T1 ENGINE=MYISAM;EXPLAIN SELECT * FROM T1 WHERE C1 = 99999999 AND C3 > 1 ORDER BY C3;ALTER TABLE T1 ENGINE=INNODB;-- IF WE SWITCH IT FROM A PRIMARY KEY TO A REGULAR INDEX, IT WORKS CORRECTLY AS WELLALTER TABLE T1 DROP PRIMARY KEY, ADD INDEX `TEST` (C1, C2);EXPLAIN SELECT * FROM T1 WHERE C1 = 99999999 AND C3 > 1 ORDER BY C3;ALTER TABLE T1 DROP INDEX TEST, ADD PRIMARY KEY (C1, C2);SUGGESTED FIX:USE THE PRIMARY KEY WHEN IT MAKES SENSE TO. ","SUMMARY":"BUGU00A0#45828  OPTIMIZER WONT USE PARTIAL PRIMARY KEY IF ANOTHER INDEX CAN PREVENT FILESORT ","CLASS":1}
{"ID_DEFECT":"46454","DESCRIPTION":"     [29 JUL 2009 16:30]   JOCELYN FOURNIER          DESCRIPTION:HI,FOR A SPECIFIC QUERY, MYSQL CHOOSE TO SCAN ONLY THE INDEX FILE BUT WITH THE WRONG INDEX, WHICH LEAD TO INCORRECT RESULT IN THE QUERY.COULD BE SOMEHOW RELATED TO HTTP:BUGS.MYSQL.COMBUG.PHP?ID=36817 ?HOW TO REPEAT:FIRST DOWNLOAD AND INJECT HTTP:WWW.MESDISCUSSIONS.NETBUG.TAR.GZ IN TEST DB (19 MB)THEN USE TEST;EXPLAIN SELECT ID_USER FROM USERS_LOGS UD WHERE UD.ID_FRIEND = 4299422 ORDER BY UD.DATE DESC LIMIT 0, 9;+----+-------------+-------+-------+-------------------------+-------------+---------+------+-------+--------------------------+| ID | SELECT_TYPE | TABLE | TYPE  | POSSIBLE_KEYS           | KEY         | KEY_LEN | REF  | ROWS  | EXTRA                    |+----+-------------+-------+-------+-------------------------+-------------+---------+------+-------+--------------------------+|  1 | SIMPLE      | UD    | RANGE | ID_FRIEND_3,ID_FRIEND_4 | ID_FRIEND_3 | 3       | NULL | 37974 | USING WHERE; USING INDEX |+----+-------------+-------+-------+-------------------------+-------------+---------+------+-------+--------------------------+HERE YOU CAN SEE MYSQL CHOOSES TO USER ID_FRIEND_3 INDEX TO RETURN THE RESULT.HOWEVER, ID_FRIEND_3 DOES *NOT* CONTAIN ID_USER (ITS ID_FRIEND_4 WHICH DOES) : CREATE TABLE `USERS_LOGS` (  `ID_USER` MEDIUMINT(8) UNSIGNED NOT NULL DEFAULT 0,  `ID_FRIEND` MEDIUMINT(10) UNSIGNED NOT NULL DEFAULT 0,  `ID_LOG` INT(10) UNSIGNED NOT NULL DEFAULT 0,  `DATE` TIMESTAMP NOT NULL DEFAULT 0000-00-00 00:00:00,  PRIMARY KEY (`ID_LOG`,`ID_USER`,`ID_FRIEND`),  KEY `ID_FRIEND_3` (`ID_FRIEND`,`DATE`),  KEY `ID_FRIEND_4` (`ID_FRIEND`,`ID_USER`,`DATE`),  KEY `ID_FRIEND_5` (`ID_USER`,`DATE`)) ENGINE=MYISAM DEFAULT CHARSET=UTF8HENCE, THE QUERY LEADS TO A COMPLETELY INCORRECT RESULT :MYSQL> SELECT ID_USER FROM USERS_LOGS UD WHERE UD.ID_FRIEND = 4299422 ORDER BY UD.DATE DESC LIMIT 0, 9;+---------+| ID_USER |+---------+|       0 ||       0 ||       0 ||       0 ||       0 ||       0 ||       0 ||       0 ||       0 |+---------+9 ROWS IN SET (0.00 SEC)ADDING A FIELD NOT IN ID_FRIEND_4 INDEX SOLVE THE ISSUE : EXPLAIN SELECT ID_USER,ID_LOG FROM USERS_LOGS UD WHERE UD.ID_FRIEND = 4299422 ORDER BY UD.DATE DESC LIMIT 0, 9;+----+-------------+-------+------+-------------------------+-------------+---------+-------+-------+-------------+| ID | SELECT_TYPE | TABLE | TYPE | POSSIBLE_KEYS           | KEY         | KEY_LEN | REF   | ROWS  | EXTRA       |+----+-------------+-------+------+-------------------------+-------------+---------+-------+-------+-------------+|  1 | SIMPLE      | UD    | REF  | ID_FRIEND_3,ID_FRIEND_4 | ID_FRIEND_3 | 3       | CONST | 37974 | USING WHERE |+----+-------------+-------+------+-------------------------+-------------+---------+-------+-------+-------------+1 ROW IN SET (0.00 SEC)=> NO MORE USING INDEX HERE.SELECT ID_USER,ID_LOG FROM USERS_LOGS UD WHERE UD.ID_FRIEND = 4299422 ORDER BY UD.DATE DESC LIMIT 0, 9;+---------+----------+| ID_USER | ID_LOG   |+---------+----------+| 4613617 | 10749620 || 4613617 | 10749489 || 4107676 | 10749404 || 4613617 | 10749388 || 3928150 | 10749103 || 4652634 | 10749047 || 4107676 | 10748939 || 4470248 | 10748818 || 4470248 | 10748797 |+---------+----------+9 ROWS IN SET (0.00 SEC)QUERY IS OK NOWREGARDS,  JOCELYN FOURNIER ","SUMMARY":"BUGU00A0#46454  MYSQL WRONG INDEX OPTIMISATION LEADS TO INCORRECT RESULT & CRASHES ","CLASS":1}
{"ID_DEFECT":"46607","DESCRIPTION":"     [7 AUG 2009 16:32]   PATRICK CREWS          DESCRIPTION:I ENCOUNTERED A CRASH IN 5.1-BUGTEAM WITH THE FOLLOWING ERROR OUTPUT:ASSERTION FAILED: (COND_TYPE == ITEM::FUNC_ITEM), FUNCTION CHECK_GROUP_MIN_MAX_PREDICATES, FILE OPT_RANGE.CC, LINE 9633.090807  5:51:51 - MYSQLD GOT SIGNAL 6 ;IM STILL ANALYZING THIS BUG TO PRODUCE A REPEATABLE TEST CASE.I WAS RUNNING THE RANDOM QUERY GENERATOR AGAINST A 5.1-BUGTEAM SERVER USING THE TRANSFOMER VALIDATOR.HOW TO REPEAT:THESE ARE THE LAST QUERIES THAT WERE RUN PRIOR TO THE CRASH.  WILL ATTACH A REPEATABLE TEST CASE ONCE I HAVE PRODUCED IT. SELECT  MAX( `INT_KEY`) AS FIELD1 , `VARCHAR_KEY` AS FIELD2 FROM D AS TABLE1 WHERE TABLE1 . `INT_KEY` IS  NULL  GROUP BY FIELD2 SELECT  MAX( `INT_KEY`) AS FIELD1 , `VARCHAR_KEY` AS FIELD2 FROM D AS TABLE1 WHERE TABLE1 . `INT_KEY` IS  NULL  GROUP BY FIELD2 LIMIT 1  SELECT  MAX( `INT_KEY`) AS FIELD1 , `VARCHAR_KEY` AS FIELD2 FROM D AS TABLE1 WHERE TABLE1 . `INT_KEY` IS  NULL  GROUP BY FIELD2 LIMIT 4294836225SELECT STRAIGHT_JOIN  MAX( `INT_KEY`) AS FIELD1 , `VARCHAR_KEY` AS FIELD2 FROM D AS TABLE1 WHERE TABLE1 . `INT_KEY` IS  NULL  GROUP BY FIELD2  SELECT   MIN( TABLE2 . `VARCHAR_NOKEY` ) AS FIELD1 , TABLE1 . `DATETIME_KEY` AS FIELD2 , TABLE1 . `VARCHAR_KEY` AS FIELD3 FROM ( CC AS TABLE1 RIGHT  JOIN CC AS TABLE2 ON (JOIN_CONDITION_LIST ) ) WHERE ( TABLE1 . `PK`  IN ( SELECT SUBQUERY_T1 . `INT_KEY` FROM D AS SUBQUERY_T1  ))  GROUP BY FIELD2, FIELD3 HAVING (FIELD2 <= WX AND FIELD2 = K) ORDER BY FIELD1 DESC , FIELD3  FAILED: 2006 MYSQL SERVER HAS GONE AWAY ","SUMMARY":"BUGU00A0#46607  ASSERTION FAILED: (COND_TYPE == ITEM::FUNC_ITEM) RESULTS IN SERVER CRASH ","CLASS":1}
{"ID_DEFECT":"48370","DESCRIPTION":"     [28 OCT 2009 10:32]   ZIGMUND BULINSH          DESCRIPTION:V_TOTAL COLUMN IS CALCULATED WRONG!AND THIS IS REALLY CRITICAL..VERRY CRITICAL BUG BECAUSE OF THIS I ROLLED BACK TO 5.1.38 (BECAUSE 5.1.39 HAS A BUG WHICH I ALSO REPORTED ABOUT SLAVE_DEATTACH_THREAD..).HOW TO REPEAT:LOAD ATTACHED DUMP TO MYSQL DATABASE.THEN RUN THIS QUERY:MYSQL> SELECT PAYMENT_ID, PRICE, DISCOUNT    -> FROM SUB_TASKS    -> ORDER BY PAYMENT_ID    -> LIMIT 10;+------------+----------+----------+| PAYMENT_ID | PRICE    | DISCOUNT |+------------+----------+----------+|       3001 |  12.6000 |   0.0000 ||       3001 |  14.5800 |   0.0000 ||       3003 |   9.2400 |   0.0000 ||       3004 | 164.1800 |   0.0000 ||       3005 |  23.6600 |   0.0000 ||       3005 | 223.6500 |   0.0000 ||       3006 |  16.2900 |   0.0000 ||       3006 |   1.7100 |   0.0000 ||       3006 |  17.4600 |   0.0000 ||       3007 |   8.3300 |   0.0000 |+------------+----------+----------+10 ROWS IN SET (0.00 SEC)MYSQL> SELECT    ->   PAY.ID,    ->   MIN((1 + IF(PAY.STATUS, PAY.VAT, SUP.VAT)  100)) V_MIN,    ->   MAX((1 + IF(PAY.STATUS, PAY.VAT, SUP.VAT)  100)) V_MAX,    ->   #NET IS ROUNDED AT THE BEGINNING    ->   SUM(    ->     ROUND(    ->       ROUND(SUB.PRICE, 2) * BCUR.RATE  CUR.RATE    ->     , 2)    ->   ) V_NET,    ->    ->   SUM(    ->     ROUND(    ->       (ROUND(SUB.PRICE, 2) - ROUND(ROUND(SUB.PRICE, 2) * (SUB.DISCOUNT  100), 2)) * BCUR.RATE  CUR.RATE    ->     , 2)    ->   ) V_NET_WITH_DISCOUNT,    ->    ->   ROUND(SUM(    ->     ROUND(    ->       (ROUND(SUB.PRICE, 2) - ROUND(ROUND(SUB.PRICE, 2) * (SUB.DISCOUNT  100), 2)) * BCUR.RATE  CUR.RATE    ->     , 2) * (1 + IF(PAY.STATUS, PAY.VAT, SUP.VAT)  100)    ->   ), 2) V_TOTAL    -> FROM    ->   PAYMENTS PAY    ->     JOIN (    ->       SUPPLIERS SUP,    ->       CURRENCIES CUR)    ->     ON (    ->       PAY.SUPPLIER_ID = SUP.ID AND    ->       PAY.CURRENCY_ID = CUR.ID)    ->     LEFT JOIN (    ->       SUB_TASKS SUB,    ->       CURRENCIES BCUR)    ->     ON (    ->       SUB.PAYMENT_ID = PAY.ID AND    ->       SUB.CURRENCY_ID = BCUR.ID)    -> WHERE    ->   PAY.ID <> 0 AND    ->   PAY.VAT = 0 AND    ->   SUP.VAT = 0    -> GROUP BY    ->   PAY.ID,    ->   SUP.ID    -> LIMIT 10;+------+------------+------------+---------+---------------------+---------+| ID   | V_MIN      | V_MAX      | V_NET   | V_NET_WITH_DISCOUNT | V_TOTAL |+------+------------+------------+---------+---------------------+---------+| 3001 | 1.00000000 | 1.00000000 |   27.18 |               27.18 |   27.20 || 3003 | 1.00000000 | 1.00000000 |    9.24 |                9.24 |    9.20 || 3004 | 1.00000000 | 1.00000000 |  164.18 |              164.18 |  164.20 || 3005 | 1.00000000 | 1.00000000 |  247.31 |              247.31 |  247.40 || 3006 | 1.00000000 | 1.00000000 |   35.46 |               35.46 |   35.50 || 3007 | 1.00000000 | 1.00000000 |   73.59 |               73.59 |   73.50 || 3008 | 1.00000000 | 1.00000000 |   70.38 |               70.38 |   70.40 || 3009 | 1.00000000 | 1.00000000 |   32.04 |               32.04 |   32.00 || 3011 | 1.00000000 | 1.00000000 |   63.66 |               63.66 |   63.70 || 3012 | 1.00000000 | 1.00000000 | 1052.01 |             1052.01 | 1052.00 |+------+------------+------------+---------+---------------------+---------+10 ROWS IN SET (0.08 SEC) ","SUMMARY":"BUGU00A0#48370  ABSOLUTELY WRONG CALCULATIONS WITH GROUP BY AND DECIMAL FIELDS WHEN USING IF ","CLASS":1}
{"ID_DEFECT":"49324","DESCRIPTION":"     [2 DEC 2009 4:21]   SHANE BESTER          DESCRIPTION:AT FIRST, LOOKS LIKE BUG #44886 BUT THAT TESTCASE DOESNT CAUSE ANY PROBLEMS ANYMORE IN 5.1.41VALGRIND ERRORS IN 5.1.41:CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S)AT: TEST_IF_SKIP_SORT_ORDER  (SQL_SELECT.CC:13319)BY: JOIN::OPTIMIZE() (SQL_SELECT.CC:1400)BY: MYSQL_SELECT (SQL_SELECT.CC:2421)BY: HANDLE_SELECT (SQL_SELECT.CC:269)BY: EXECUTE_SQLCOM_SELECT (SQL_PARSE.CC:5051)BY: MYSQL_EXECUTE_COMMAND(THD*) (SQL_PARSE.CC:2246)BY: MYSQL_PARSE (SQL_PARSE.CC:5970)BY: DISPATCH_COMMAND (SQL_PARSE.CC:1231)BY: DO_COMMAND(THD*) (SQL_PARSE.CC:872)BY: HANDLE_ONE_CONNECTION (SQL_CONNECT.CC:1127)BY: START_THREAD (IN LIBLIBPTHREAD-2.5.SO)BY: CLONE (IN LIBLIBC-2.5.SO)HOW TO REPEAT:RUN MYSQLD UNDER VALGRIND, THEN RUN:DROP TABLE IF EXISTS `T1`;CREATE TABLE `T1` (`A` INT PRIMARY KEY) ENGINE=INNODB ;SELECT 1 FROM `T1` JOIN `T1` `A` USING(`A`) GROUP BY `T1`.`A`,`T1`.`A`;SUGGESTED FIX:VALGRIND ERRORS ARE BAD... ","SUMMARY":"BUGU00A0#49324  MORE VALGRIND ERRORS IN TEST_IF_SKIP_SORT_ORDER ","CLASS":1}
{"ID_DEFECT":"50843","DESCRIPTION":"     [2 FEB 2010 18:12]   CHRIS CALENDER          DESCRIPTION:THE OPTIMIZER IN MYSQL 5.1 IGNORES THE CLUSTERED INDEX (OF A PRIMARY KEY) FOR GROUP BY EVEN WHEN IT WOULD IMPROVE PERFORMANCE OF THE QUERY.FOR AN EXAMPLE, EXECUTE THE FOLLOWING QUERY IN 5.1 AND 5.0 TO COMPARE (NOTE I AM USING THE `WORLD` DATABASE, WITH THE TABLES CONVERTED TO INNODB):EXPLAIN SELECT COUNTRY.* FROM COUNTRY LEFT JOIN COUNTRYLANGUAGE ON COUNTRY.CODE=COUNTRYLANGUAGE.COUNTRYCODE GROUP BY COUNTRY.CODE;IN 5.0, YOU WILL SEE THAT THE PRIMARY KEY FOR TABLE `COUNTRY` IS USED TO RESOLVE THIS.  HOWEVER, IT IS NOT USED IN 5.1, WHICH LEADS TO USING TEMPORARY; USING FILESORT IN ORDER TO RESOLVE THE QUERY.HOW TO REPEAT:1. LOAD THE `WORLD` DATABASE.2. ALTER `COUNTRY` AND `COUNTRYLANGUAGE` TO BE INNODB TABLESALTER TABLE `COUNTRY` ENGINE=INNODB;ALTER TABLE `COUNTRYLANGUAGE` ENGINE=INNODB;3. RUN THE FOLLOWING QUERY:EXPLAIN SELECT COUNTRY.* FROM COUNTRY LEFT JOIN COUNTRYLANGUAGE ON COUNTRY.CODE=COUNTRYLANGUAGE.COUNTRYCODE GROUP BY COUNTRY.CODE;OUTPUT FROM 5.1.42:MYSQL> EXPLAIN SELECT COUNTRY.* FROM COUNTRY LEFT JOIN COUNTRYLANGUAGE ON COUNTRY.CODE=COUNTRYLANGUAGE.COUNTRYCODE GROUP BY COUNTRY.CODE;+----+-------------+-----------------+------+---------------+---------+---------+--------------------+------+---------------------------------+| ID | SELECT_TYPE | TABLE           | TYPE | POSSIBLE_KEYS | KEY     | KEY_LEN | REF                | ROWS | EXTRA                           |+----+-------------+-----------------+------+---------------+---------+---------+--------------------+------+---------------------------------+|  1 | SIMPLE      | COUNTRY         | ALL  | NULL          | NULL    | NULL    | NULL               |  218 | USING TEMPORARY; USING FILESORT ||  1 | SIMPLE      | COUNTRYLANGUAGE | REF  | PRIMARY       | PRIMARY | 3       | WORLD.COUNTRY.CODE |    2 | USING INDEX                     |+----+-------------+-----------------+------+---------------+---------+---------+--------------------+------+---------------------------------+2 ROWS IN SET (0.00 SEC)OUTPUT FROM 5.0.89:MYSQL> EXPLAIN SELECT COUNTRY.* FROM COUNTRY LEFT JOIN COUNTRYLANGUAGE ON COUNTRY.CODE=COUNTRYLANGUAGE.COUNTRYCODE GROUP BY COUNTRY.CODE;+----+-------------+-----------------+-------+---------------+---------+---------+--------------------+------+-------------+| ID | SELECT_TYPE | TABLE           | TYPE  | POSSIBLE_KEYS | KEY     | KEY_LEN | REF                | ROWS | EXTRA       |+----+-------------+-----------------+-------+---------------+---------+---------+--------------------+------+-------------+|  1 | SIMPLE      | COUNTRY         | INDEX | NULL          | PRIMARY | 3       | NULL               |  237 |             ||  1 | SIMPLE      | COUNTRYLANGUAGE | REF   | PRIMARY       | PRIMARY | 3       | WORLD.COUNTRY.CODE |    2 | USING INDEX |+----+-------------+-----------------+-------+---------------+---------+---------+--------------------+------+-------------+2 ROWS IN SET (0.02 SEC)SUGGESTED FIX:ALLOW THE OPTIMIZER TO USE THE CLUSTERED INDEX WHEN THE GROUP BY IS ON THE PRIMARY KEY (I.E., THE CLUSTERED INDEX). ","SUMMARY":"BUGU00A0#50843  OPTIMIZER IGNORES CLUSTERED INDEX FOR GROUP BY EVEN WHEN IT IMPROVES PERFORMANCE ","CLASS":1}
{"ID_DEFECT":"50995","DESCRIPTION":"     [8 FEB 2010 14:19]   ADAM TROTTER          DESCRIPTION:IF A QUERY IS WRITTEN WITH A SUBQUERY WHICH REFERENCES DATA IN THE OUTER QUERY, AND THE OUTER QUERY IS USING AN INDEX TO RESOLVE THE WHERE CLAUSE AND HAS AN ORDER BY AND HAVING CLAUSE AGAINST THE RESULTS OF THE SUBQUERY, THE HAVING CLAUSE WILL PRODUCE INCORRECT RESULTS.THE ISSUE WAS DISCOVERED ON 5.1.42 RUNNING ON CENTOS, AND IS REPEATABLE ON 5.1.43 RUNNING ON WINDOWS 7.IF WE IGNORE THE INDEX, WE GET THE CORRECT RESULTS.  ALSO, IF A GROUP BY IS ADDED, OR THE ORDER BY IS REMOVED, WE GET CORRECT RESULTS.FINALLY, IF WE RUN THE ORIGINAL QUERY AGAIN, BUT, THE DATA TYPES ON THE TEMP TABLE ARE CHAR, WE GET CORRECT RESULTS.  (I HAVE TESTED, BIGINT, INT, TINYINT, AND DECIMAL TYPES FOR THE FIELDS, THEY ARE ALL BROKEN).  WITH A CHAR DATA TYPE, THE ISSUE SEEMS TO BE FIXED ONLY BECAUSE A TEMPORARY TABLE IS BEING USED TO RESOLVE THE QUERY.HOW TO REPEAT:DROP TEMPORARY TABLE IF EXISTS T1;CREATE TEMPORARY TABLE T1( ID1 BIGINT UNSIGNED NOT NULL, ID2 BIGINT UNSIGNED NOT NULL, INDEX T1_ID2_INDEX(ID2));INSERT INTO T1 SET ID1=1, ID2=1;INSERT INTO T1 SET ID1=2, ID2=1;INSERT INTO T1 SET ID1=3, ID2=1;SELECT BUG.ID1,       (SELECT 0        FROM DUAL        WHERE BUG.ID1=BUG.ID1       ) AS AMOUNTFROM T1 AS BUGWHERE BUG.ID2 = 1HAVING AMOUNT > 0ORDER BY BUG.ID1; ","SUMMARY":"BUGU00A0#50995  HAVING CLAUSE ON SUBQUERY RESULT PRODUCES INCORRECT RESULTS. ","CLASS":1}
{"ID_DEFECT":"51070","DESCRIPTION":"     [10 FEB 2010 20:34]   IGOR BABAEV          DESCRIPTION:IN SOME CASES WHEN THE LEFT PART OF A NOT IN SUBQUERY PREDICATE IS A ROW AND CONTAINS SOME NULL VALUES THE RESULT RETURNED BY THE QUERY CAN BE WRONG:MYSQL> SELECT * FROM T1;+------+------+| A1   | A2   |+------+------+| ZZ   | NULL || YY   | NULL |+------+------+2 ROWS IN SET (0.00 SEC)MYSQL> SELECT * FROM T2;+------+------+| B1   | B2   |+------+------+| NULL | XX   || NULL | TT   |+------+------+2 ROWS IN SET (0.00 SEC)MYSQL> SELECT * FROM T1 WHERE (A1, A2) NOT IN (SELECT B1, B2 FROM T2);+------+------+| A1   | A2   |+------+------+| ZZ   | NULL || YY   | NULL |+------+------+2 ROWS IN SET (0.00 SEC)THE EXPECTED RESULT HERE IS AN EMPTY SET.HOW TO REPEAT:CREATE AND POPULATE TABLES T1 AND T2 WITH THE FOLLOWING COMMANDS:CREATE TABLE T1 (A1 CHAR(2), A2 CHAR(2));CREATE TABLE T2 (B1 CHAR(2), B2 CHAR(2));INSERT INTO T1 (A1, A2) VALUES (ZZ, NULL);INSERT INTO T1 (A1, A2) VALUES (YY, NULL);INSERT INTO T2 (B1, B2) VALUES (NULL, XX);INSERT INTO T2 (B1, B2) VALUES (NULL, TT);RUN THE QUERY:SELECT * FROM T1 WHERE (A1, A2) NOT IN (SELECT B1, B2 FROM T2); ","SUMMARY":"BUGU00A0#51070  QUERY WITH A NOT IN SUBQUERY PREDICATE RETURNS A WRONG RESULT SET  ","CLASS":1}
{"ID_DEFECT":"51242","DESCRIPTION":"     [17 FEB 2010 13:24]   OLE JOHN ASKE          DESCRIPTION:THE HAVING CLAUSE ON A JOINED TABLE FAILS TO ELIMINATE ROWS WHICH SHOULD HAVE BEEN EXCLUDED FROM THE RESULT SET. IN THE TEST CASE NO ROWS QUALIFIES ON TABLE2.INT_NOKEY = 8 BUT THIS PART OF THE HAVING CLAUSE SEEMS TO BE IGNORED.IF WE EITHER REMOVE THE WHERE CLAUSE OR THE SECOND TERM TABLE1.PK >= 6 FROMTHE HAVING CLAUSE, THE QUERY RETURN A CORRECT (EMPTY) RESULT SET.THIS BUGS LOOKS SIMILAR TO BUG#50995, HOWEVER, I HAVE TESTED THE PATCH FORTHIS BUG ON MY TESTCASE WO SUCCESS.HAS ALSO TESTED THE NEXT-MR AND 6.0 VERSIONS WHICH SEEMS TO FAIL ALSO.HOW TO REPEAT:CREATE TABLE TEST (PK INT PRIMARY KEY, INT_NOKEY INT, INT_KEY INT);INSERT INTO TEST VALUES (2,7,9), (4,7,9), (6,2,9), (17,0,9);SELECT TABLE1.PK, TABLE2.INT_NOKEY FROM TEST AS TABLE1 JOIN TEST AS TABLE2 ON TABLE1.INT_KEY = TABLE2.INT_KEY WHERE TABLE2.PK = 2 GROUP BY TABLE1.PK, TABLE2.INT_NOKEY HAVING (TABLE2.INT_NOKEY = 8 AND TABLE1.PK >= 6) ;+----+-----------+| PK | INT_NOKEY |+----+-----------+|  6 |         7 || 17 |         7 |+----+-----------+2 ROWS IN SET (0.00 SEC) ","SUMMARY":"BUGU00A0#51242  HAVING CLAUSE ON TABLE JOIN PRODUCE INCORRECT RESULTS ","CLASS":1}
{"ID_DEFECT":"51494","DESCRIPTION":"     [25 FEB 2010 9:33]   SHANE BESTER          DESCRIPTION:5.1.44 STACK TRACE:MYSQLD.EXE!MY_MB_WC_BIN()[CTYPE-BIN.C:253]                                MYSQLD.EXE!ITEM_FUNC_SOUNDEX::VAL_STR()[ITEM_STRFUNC.CC:1949]             MYSQLD.EXE!ARG_COMPARATOR::COMPARE_BINARY_STRING()[ITEM_CMPFUNC.CC:1300]  MYSQLD.EXE!ITEM_FUNC_EQ::VAL_INT()[ITEM_CMPFUNC.CC:1858]                  MYSQLD.EXE!ITEM::VAL_BOOL()[ITEM.CC:184]                                  MYSQLD.EXE!ITEM_COND_AND::VAL_INT()[ITEM_CMPFUNC.CC:4388]                 MYSQLD.EXE!MAKE_JOIN_SELECT()[SQL_SELECT.CC:6160]                         MYSQLD.EXE!JOIN::OPTIMIZE()[SQL_SELECT.CC:1095]                           MYSQLD.EXE!MYSQL_SELECT()[SQL_SELECT.CC:2445]                             MYSQLD.EXE!MYSQL_EXPLAIN_UNION()[SQL_SELECT.CC:16617]                     MYSQLD.EXE!EXECUTE_SQLCOM_SELECT()[SQL_PARSE.CC:5031]                     MYSQLD.EXE!MYSQL_EXECUTE_COMMAND()[SQL_PARSE.CC:2248]                     MYSQLD.EXE!MYSQL_PARSE()[SQL_PARSE.CC:5975]                               MYSQLD.EXE!DISPATCH_COMMAND()[SQL_PARSE.CC:1235]                          MYSQLD.EXE!DO_COMMAND()[SQL_PARSE.CC:874]                                 MYSQLD.EXE!HANDLE_ONE_CONNECTION()[SQL_CONNECT.CC:1127]                   MYSQLD.EXE!PTHREAD_START()[MY_WINTHREAD.C:85]                             MYSQLD.EXE!_CALLTHREADSTART()[THREAD.C:295]                               MYSQLD.EXE!_THREADSTART()[THREAD.C:275]                                   KERNEL32.DLL!BASETHREADSTART()                                            MAYBE NOT CRASH, BUT NUMEROUS VALGRIND ERRORS ARE SEEN.HOW TO REPEAT:DROP TABLE IF EXISTS `T1`,`T2`;CREATE TABLE `T1` (`A` INT) ENGINE=MYISAM;INSERT INTO `T1` VALUES(1);CREATE TABLE `T2` (`B` INT NOT NULL,`C` INT,`D` INT,`E` BLOB NOT NULL,KEY `IDX0` (`D`,`C`)) ENGINE=MRG_MYISAM;EXPLAIN SELECT 1 FROM `T1` NATURAL RIGHT JOIN `T2` WHERE `B` SOUNDS LIKE `E` AND `D`=1; ","SUMMARY":"BUGU00A0#51494  CRASH WITH JOIN, EXPLAIN AND SOUNDS LIKE OPERATOR ","CLASS":1}
{"ID_DEFECT":"52120","DESCRIPTION":"     [17 MAR 2010 2:19]   SHANE BESTER          DESCRIPTION:SIMILAR TO BUG #48294VERSION: 5.6.99-M4-DEBUG  SOCKET:   PORT: 3306  SOURCE DISTRIBUTIONASSERTION FAILED: 0, FILE .ITEM_SUBSELECT.CC, LINE 817MYSQLD.EXE!MY_SIGABRT_HANDLER()[MY_THR_INIT.C:519]MYSQLD.EXE!RAISE()[WINSIG.C:590]MYSQLD.EXE!ABORT()[ABORT.C:71]MYSQLD.EXE!_WASSERT()[ASSERT.C:212]MYSQLD.EXE!ITEM_IN_SUBSELECT::VAL_INT()[ITEM_SUBSELECT.CC:817]MYSQLD.EXE!ITEM_FUNC_NOP_ALL::VAL_INT()[ITEM_CMPFUNC.CC:357]MYSQLD.EXE!EVAL_CONST_COND()[ITEM_FUNC.CC:64]MYSQLD.EXE!INTERNAL_REMOVE_EQ_CONDS()[SQL_SELECT.CC:9354]MYSQLD.EXE!REMOVE_EQ_CONDS()[SQL_SELECT.CC:9447]MYSQLD.EXE!OPTIMIZE_COND()[SQL_SELECT.CC:9229]MYSQLD.EXE!JOIN::OPTIMIZE()[SQL_SELECT.CC:882]MYSQLD.EXE!SUBSELECT_SINGLE_SELECT_ENGINE::EXEC()[ITEM_SUBSELECT.CC:1885]MYSQLD.EXE!ITEM_SUBSELECT::EXEC()[ITEM_SUBSELECT.CC:261]MYSQLD.EXE!ITEM_SINGLEROW_SUBSELECT::VAL_STR()[ITEM_SUBSELECT.CC:585]MYSQLD.EXE!ITEM_FUNC_CONV_CHARSET::ITEM_FUNC_CONV_CHARSET()[ITEM_STRFUNC.H:745]MYSQLD.EXE!ITEM::SAFE_CHARSET_CONVERTER()[ITEM.CC:800]MYSQLD.EXE!AGG_ITEM_SET_CONVERTER()[ITEM.CC:1771]MYSQLD.EXE!AGG_ITEM_CHARSETS()[ITEM.CC:1850]MYSQLD.EXE!AGG_ITEM_CHARSETS_FOR_COMPARISON()[ITEM.H:1495]MYSQLD.EXE!ITEM_FUNC::AGG_ARG_CHARSETS_FOR_COMPARISON()[ITEM_FUNC.H:180]MYSQLD.EXE!ITEM_BOOL_FUNC2::FIX_LENGTH_AND_DEC()[ITEM_CMPFUNC.CC:486]MYSQLD.EXE!ITEM_FUNC_EQUAL::FIX_LENGTH_AND_DEC()[ITEM_CMPFUNC.CC:1869]MYSQLD.EXE!ITEM_FUNC::FIX_FIELDS()[ITEM_FUNC.CC:197]MYSQLD.EXE!SETUP_CONDS()[SQL_BASE.CC:8048]MYSQLD.EXE!SETUP_WITHOUT_GROUP()[SQL_SELECT.CC:435]MYSQLD.EXE!JOIN::PREPARE()[SQL_SELECT.CC:524]MYSQLD.EXE!ST_SELECT_LEX_UNIT::PREPARE()[SQL_UNION.CC:264]MYSQLD.EXE!MYSQL_CREATE_VIEW()[SQL_VIEW.CC:515]MYSQLD.EXE!MYSQL_EXECUTE_COMMAND()[SQL_PARSE.CC:4445]MYSQLD.EXE!MYSQL_PARSE()[SQL_PARSE.CC:5735]MYSQLD.EXE!DISPATCH_COMMAND()[SQL_PARSE.CC:1024]MYSQLD.EXE!DO_COMMAND()[SQL_PARSE.CC:710]MYSQLD.EXE!DO_HANDLE_ONE_CONNECTION()[SQL_CONNECT.CC:1174]MYSQLD.EXE!HANDLE_ONE_CONNECTION()[SQL_CONNECT.CC:1113]MYSQLD.EXE!PTHREAD_START()[MY_WINTHREAD.C:61]MYSQLD.EXE!_CALLTHREADSTARTEX()[THREADEX.C:348]MYSQLD.EXE!_THREADSTARTEX()[THREADEX.C:331]KERNEL32.DLL!FLSSETVALUE()HOW TO REPEAT:#ON DEBUG BUILD RUN:DROP TABLE IF EXISTS T1;CREATE TABLE `T1` (`A` CHAR(1)CHARSET LATIN1,`B` CHAR(1) CHARSET UTF8) ENGINE=MYISAM;CREATE OR REPLACE VIEW `V1` AS SELECT 1 FROM `T1`WHERE `T1`.`B` <=>(SELECT `A` FROM `T1` WHERE `A` <SOME(SELECT 1)); ","SUMMARY":"BUGU00A0#52120  CREATE VIEW CAUSE ASSERTION FAILED: 0, FILE .ITEM_SUBSELECT.CC, LINE 817 ","CLASS":1}
{"ID_DEFECT":"52336","DESCRIPTION":"     [24 MAR 2010 16:00]   PATRICK CREWS          DESCRIPTION:THIS CRASH IS ONLY OCCURRING IN 5.1-BUGTEAM, TESTED AGAINST 6.0-CODEBASE-BUGFIXING AND 5.0-BUGTEAM WITHOUT INCIDENT.WILL ALSO TRY TO PINPOINT THE CHANGESET RESPONSIBLE FOR THIS AS TIME PERMITS.CRASH  SEGFAULT OCCURRING FOR THIS QUERY:NOTE:  AUTOMATED SIMPLIFICATION OF THIS QUERY WAS NOT WORKING AS THE SIMPLIFICATION TURNS THIS INTO ANOTHER, SEPARATE CRASH IN 5.1  KEEPING THE ORIGINAL QUERY HERE AND IN THE TEST CASE (APOLOGIES FOR THIS).SELECT    MIN(  TABLE1 . `COL_INT_KEY` ) AS FIELD1 FROM ( CC AS TABLE1 RIGHT  JOIN C AS TABLE2 ON (TABLE2 . `COL_INT_KEY` = TABLE1 . `COL_INT_NOKEY`  ) ) WHERE (  ( K, C )  IN ( SELECT E , L UNION  SELECT J , T ) ) OR ( TABLE1 . `COL_INT_KEY` = TABLE1 . `COL_INT_KEY` AND TABLE1 . `PK` = 232 ) OR (  TABLE1 . `COL_VARCHAR_KEY`  IN ( SELECT   SUBQUERY2_T2 . `COL_VARCHAR_KEY` AS SUBQUERY2_FIELD1 FROM ( B AS SUBQUERY2_T1 LEFT  JOIN B AS SUBQUERY2_T2 ON (SUBQUERY2_T2 . `PK` = SUBQUERY2_T1 . `COL_INT_KEY`  ) ) WHERE SUBQUERY2_T1 . `COL_VARCHAR_KEY` <> TABLE1 . `COL_VARCHAR_KEY` AND SUBQUERY2_T1 . `COL_VARCHAR_KEY` < TABLE2 . `COL_VARCHAR_KEY` ) OR TABLE1 . `COL_INT_KEY` >= TABLE2 . `COL_INT_KEY` )  HAVING  ( 7, 7 )  IN ( SELECT DISTINCT SQL_SMALL_RESULT SUBQUERY3_T1 . `COL_INT_NOKEY` AS SUBQUERY3_FIELD1 , SUBQUERY3_T1 . `COL_INT_NOKEY` AS SUBQUERY3_FIELD2 FROM C AS SUBQUERY3_T1 WHERE SUBQUERY3_T1 . `COL_VARCHAR_KEY` < Y   ) ORDER BY TABLE1 . `COL_DATETIME_KEY`  , FIELD1 LIMIT 2;STACKTRACE (FULL OUTPUT TO BE ATTACHED SEPARATELY):THREAD 1 (THREAD 29203):#0  0X00D16422 IN __KERNEL_VSYSCALL ()#1  0X008B0E93 IN __PTHREAD_KILL (THREADID=3070016368, SIGNO=11) AT ..NPTLSYSDEPSUNIXSYSVLINUXPTHREAD_KILL.C:64#2  0X08CBD8A6 IN MY_WRITE_CORE (SIG=11) AT STACKTRACE.C:329#3  0X083CFAD2 IN HANDLE_SEGFAULT (SIG=11) AT MYSQLD.CC:2570#4  <SIGNAL HANDLER CALLED>#5  0X0851BD87 IN COPY_FIELDS (PARAM=0X9872980) AT SQL_SELECT.CC:15355#6  0X0850C4D6 IN END_WRITE (JOIN=0X9871920, JOIN_TAB=0X987142C, END_OF_RECORDS=FALSE) AT SQL_SELECT.CC:12413#7  0X08506D27 IN EVALUATE_JOIN_RECORD (JOIN=0X9871920, JOIN_TAB=0X9871298, ERROR=0) AT SQL_SELECT.CC:11437#8  0X085065DA IN SUB_SELECT (JOIN=0X9871920, JOIN_TAB=0X9871298, END_OF_RECORDS=FALSE) AT SQL_SELECT.CC:11317#9  0X08505A33 IN DO_SELECT (JOIN=0X9871920, FIELDS=0X0, TABLE=0X984BA08, PROCEDURE=0X0) AT SQL_SELECT.CC:11067#10 0X084D8475 IN JOIN::EXEC (THIS=0X986DFC8) AT SQL_SELECT.CC:1908#11 0X0833453A IN SUBSELECT_SINGLE_SELECT_ENGINE::EXEC (THIS=0X98434E8) AT ITEM_SUBSELECT.CC:1972#12 0X08328AD1 IN ITEM_SUBSELECT::EXEC (THIS=0X9843438) AT ITEM_SUBSELECT.CC:265#13 0X0832CB80 IN ITEM_IN_SUBSELECT::VAL_BOOL (THIS=0X9843438) AT ITEM_SUBSELECT.CC:865#14 0X0823E536 IN ITEM::VAL_BOOL_RESULT (THIS=0X9843438) AT ITEM.H:745#15 0X082A4086 IN ITEM_IN_OPTIMIZER::VAL_INT (THIS=0X986F240) AT ITEM_CMPFUNC.CC:1833#16 0X0850B980 IN END_SEND_GROUP (JOIN=0X9847A38, JOIN_TAB=0X9877444, END_OF_RECORDS=TRUE) AT SQL_SELECT.CC:12329#17 0X085063C3 IN SUB_SELECT (JOIN=0X9847A38, JOIN_TAB=0X98772B0, END_OF_RECORDS=TRUE) AT SQL_SELECT.CC:11276#18 0X08505A99 IN DO_SELECT (JOIN=0X9847A38, FIELDS=0X9848BA0, TABLE=0X0, PROCEDURE=0X0) AT SQL_SELECT.CC:11069#19 0X084DB4A6 IN JOIN::EXEC (THIS=0X9847A38) AT SQL_SELECT.CC:2315#20 0X084DC3DD IN MYSQL_SELECT (THD=0X97E07D8, RREF_POINTER_ARRAY=0X97E1C78, TABLES=0X9832C70, WILD_NUM=0, FIELDS=..., CONDS=0X98427C0,     OG_NUM=2, ORDER=0X98435F8, GROUP=0X0, HAVING=0X9843438, PROC_PARAM=0X0, SELECT_OPTIONS=2147764736, RESULT=0X9843770, UNIT=0X97E1910,     SELECT_LEX=0X97E1B80) AT SQL_SELECT.CC:2510#21 0X084CD9C5 IN HANDLE_SELECT (THD=0X97E07D8, LEX=0X97E18B4, RESULT=0X9843770, SETUP_TABLES_DONE_OPTION=0) AT SQL_SELECT.CC:269#22 0X08408425 IN EXECUTE_SQLCOM_SELECT (THD=0X97E07D8, ALL_TABLES=0X9832C70) AT SQL_PARSE.CC:5052#23 0X083F5598 IN MYSQL_EXECUTE_COMMAND (THD=0X97E07D8) AT SQL_PARSE.CC:2248#24 0X0840CB28 IN MYSQL_PARSE (THD=0X97E07D8,     INBUF=0X9832058 SELECT    MIN(  TABLE1 . `COL_INT_KEY` ) AS FIELD1 FROM ( CC AS TABLE1 RIGHT  JOIN C AS TABLE2 ON (TABLE2 . `COL_INT_KEY` = TABLE1 . `COL_INT_NOKEY`  ) ) WHERE (  ( K, C )  IN ( SELECT E , L..., LENGTH=1012, FOUND_SEMICOLON=0XB6FCB058)    AT SQL_PARSE.CC:5971#25 0X083F09D8 IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0X97E07D8, PACKET=0X9826111 , PACKET_LENGTH=1013) AT SQL_PARSE.CC:1233#26 0X083EEC2F IN DO_COMMAND (THD=0X97E07D8) AT SQL_PARSE.CC:874#27 0X083EB29B IN HANDLE_ONE_CONNECTION (ARG=0X97E07D8) AT SQL_CONNECT.CC:1127#28 0X008AB80E IN START_THREAD (ARG=0XB6FCBB70) AT PTHREAD_CREATE.C:300#29 0X0028C8DE IN CLONE () AT ..SYSDEPSUNIXSYSVLINUXI386CLONE.S:130HOW TO REPEAT:#* SERVER0: MYSQL 5.1.46-GCOV-DEBUG-LOG **!50400 SET SESSION OPTIMIZER_SWITCH = INDEX_MERGE=ON,INDEX_MERGE_UNION=ON,INDEX_MERGE_SORT_UNION=ON,INDEX_MERGE_INTERSECTION=ON *;*!50400 SET SESSION ENGINE_CONDITION_PUSHDOWN = ON *;#* BEGIN TEST CASE FOR QUERY 1 *--DISABLE_WARNINGSDROP TABLE *! IF EXISTS * CC;DROP TABLE *! IF EXISTS * C;DROP TABLE *! IF EXISTS * B;--ENABLE_WARNINGSCREATE TABLE `CC` (  `PK` INT(11) NOT NULL AUTO_INCREMENT,  `COL_INT_NOKEY` INT(11) DEFAULT NULL,  `COL_INT_KEY` INT(11) DEFAULT NULL,  `COL_DATETIME_KEY` DATETIME DEFAULT NULL,  `COL_VARCHAR_KEY` VARCHAR(1) DEFAULT NULL,  PRIMARY KEY (`PK`),  KEY `COL_INT_KEY` (`COL_INT_KEY`),  KEY `COL_DATETIME_KEY` (`COL_DATETIME_KEY`),  KEY `COL_VARCHAR_KEY` (`COL_VARCHAR_KEY`,`COL_INT_KEY`)) ENGINE=MYISAM AUTO_INCREMENT=30 DEFAULT CHARSET=LATIN1;INSERT INTO `CC` VALUES (10,7,8,2002-02-26 06:14:37,V);INSERT INTO `CC` VALUES (11,1,9,1900-01-01 00:00:00,R);INSERT INTO `CC` VALUES (12,5,9,2006-12-03 09:37:26,A);INSERT INTO `CC` VALUES (13,3,186,2008-05-26 12:27:10,M);INSERT INTO `CC` VALUES (14,6,NULL,2004-12-14 16:37:30,Y);INSERT INTO `CC` VALUES (15,92,2,2003-02-11 21:19:41,J);INSERT INTO `CC` VALUES (16,7,3,2009-10-18 02:27:49,D);INSERT INTO `CC` VALUES (17,NULL,0,2000-09-26 07:45:57,Z);INSERT INTO `CC` VALUES (18,3,133,NULL,E);INSERT INTO `CC` VALUES (19,5,1,2005-11-10 12:40:29,H);INSERT INTO `CC` VALUES (20,1,8,2009-04-25 00:00:00,B);INSERT INTO `CC` VALUES (21,2,5,2002-11-27 00:00:00,S);INSERT INTO `CC` VALUES (22,NULL,5,2004-01-26 20:32:32,E);INSERT INTO `CC` VALUES (23,1,8,2007-10-26 11:41:40,J);INSERT INTO `CC` VALUES (24,0,6,2005-10-07 00:00:00,E);INSERT INTO `CC` VALUES (25,210,51,2000-07-15 05:00:34,F);INSERT INTO `CC` VALUES (26,8,4,2000-04-03 16:33:32,V);INSERT INTO `CC` VALUES (27,7,7,NULL,X);INSERT INTO `CC` VALUES (28,5,6,2001-04-25 01:26:12,M);INSERT INTO `CC` VALUES (29,NULL,4,2000-12-27 00:00:00,C);CREATE TABLE `C` (  `PK` INT(11) NOT NULL AUTO_INCREMENT,  `COL_INT_NOKEY` INT(11) DEFAULT NULL,  `COL_INT_KEY` INT(11) DEFAULT NULL,  `COL_DATETIME_KEY` DATETIME DEFAULT NULL,  `COL_VARCHAR_KEY` VARCHAR(1) DEFAULT NULL,  PRIMARY KEY (`PK`),  KEY `COL_INT_KEY` (`COL_INT_KEY`),  KEY `COL_DATETIME_KEY` (`COL_DATETIME_KEY`),  KEY `COL_VARCHAR_KEY` (`COL_VARCHAR_KEY`,`COL_INT_KEY`)) ENGINE=MYISAM AUTO_INCREMENT=21 DEFAULT CHARSET=LATIN1;INSERT INTO `C` VALUES (1,NULL,2,2004-10-11 18:13:16,W);INSERT INTO `C` VALUES (2,7,9,NULL,M);INSERT INTO `C` VALUES (3,9,3,1900-01-01 00:00:00,M);INSERT INTO `C` VALUES (4,7,9,2009-07-25 00:00:00,K);INSERT INTO `C` VALUES (5,4,NULL,NULL,R);INSERT INTO `C` VALUES (6,2,9,2008-07-27 00:00:00,T);INSERT INTO `C` VALUES (7,6,3,2002-11-13 16:37:31,J);INSERT INTO `C` VALUES (8,8,8,1900-01-01 00:00:00,U);INSERT INTO `C` VALUES (9,NULL,8,2003-12-10 00:00:00,H);INSERT INTO `C` VALUES (10,5,53,2001-12-21 22:38:22,O);INSERT INTO `C` VALUES (11,NULL,0,2008-12-13 23:16:44,NULL);INSERT INTO `C` VALUES (12,6,5,2005-08-15 12:39:41,K);INSERT INTO `C` VALUES (13,188,166,NULL,E);INSERT INTO `C` VALUES (14,2,3,2006-09-11 12:06:14,N);INSERT INTO `C` VALUES (15,1,0,2007-12-15 12:39:34,T);INSERT INTO `C` VALUES (16,1,1,2005-08-09 00:00:00,C);INSERT INTO `C` VALUES (17,0,9,2001-09-02 22:50:02,M);INSERT INTO `C` VALUES (18,9,5,2005-12-16 22:58:11,Y);INSERT INTO `C` VALUES (19,NULL,6,2007-04-19 00:19:53,F);INSERT INTO `C` VALUES (20,4,2,1900-01-01 00:00:00,D);CREATE TABLE `B` (  `PK` INT(11) NOT NULL AUTO_INCREMENT,  `COL_INT_NOKEY` INT(11) DEFAULT NULL,  `COL_INT_KEY` INT(11) DEFAULT NULL,  `COL_DATETIME_KEY` DATETIME DEFAULT NULL,  `COL_VARCHAR_KEY` VARCHAR(1) DEFAULT NULL,  PRIMARY KEY (`PK`),  KEY `COL_INT_KEY` (`COL_INT_KEY`),  KEY `COL_DATETIME_KEY` (`COL_DATETIME_KEY`),  KEY `COL_VARCHAR_KEY` (`COL_VARCHAR_KEY`,`COL_INT_KEY`)) ENGINE=MYISAM AUTO_INCREMENT=2 DEFAULT CHARSET=LATIN1;INSERT INTO `B` VALUES (1,1,7,2005-02-05 00:00:00,F);SELECT    MIN(  TABLE1 . `COL_INT_KEY` ) AS FIELD1 FROM ( CC AS TABLE1 RIGHT  JOIN C AS TABLE2 ON (TABLE2 . `COL_INT_KEY` = TABLE1 . `COL_INT_NOKEY`  ) ) WHERE (  ( K, C )  IN ( SELECT E , L UNION  SELECT J , T ) ) OR ( TABLE1 . `COL_INT_KEY` = TABLE1 . `COL_INT_KEY` AND TABLE1 . `PK` = 232 ) OR (  TABLE1 . `COL_VARCHAR_KEY`  IN ( SELECT   SUBQUERY2_T2 . `COL_VARCHAR_KEY` AS SUBQUERY2_FIELD1 FROM ( B AS SUBQUERY2_T1 LEFT  JOIN B AS SUBQUERY2_T2 ON (SUBQUERY2_T2 . `PK` = SUBQUERY2_T1 . `COL_INT_KEY`  ) ) WHERE SUBQUERY2_T1 . `COL_VARCHAR_KEY` <> TABLE1 . `COL_VARCHAR_KEY` AND SUBQUERY2_T1 . `COL_VARCHAR_KEY` < TABLE2 . `COL_VARCHAR_KEY` ) OR TABLE1 . `COL_INT_KEY` >= TABLE2 . `COL_INT_KEY` )  HAVING  ( 7, 7 )  IN ( SELECT DISTINCT SQL_SMALL_RESULT SUBQUERY3_T1 . `COL_INT_NOKEY` AS SUBQUERY3_FIELD1 , SUBQUERY3_T1 . `COL_INT_NOKEY` AS SUBQUERY3_FIELD2 FROM C AS SUBQUERY3_T1 WHERE SUBQUERY3_T1 . `COL_VARCHAR_KEY` < Y   ) ORDER BY TABLE1 . `COL_DATETIME_KEY`  , FIELD1 LIMIT 2;DROP TABLE CC;DROP TABLE C;DROP TABLE B;#* END OF TEST CASE FOR QUERY 1 * ","SUMMARY":"BUGU00A0#52336  SEGFAULT  CRASH IN 5.1 COPY_FIELDS (PARAM=0X9872980) AT SQL_SELECT.CC:15355 ","CLASS":1}
{"ID_DEFECT":"53334","DESCRIPTION":"     [30 APR 2010 21:05]   KRISTIAN NIELSEN          DESCRIPTION:--SOURCE INCLUDEHAVE_INNODB.INCCREATE TABLE T1 (ID INT PRIMARY KEY) ENGINE=INNODB;CREATE TABLE T2 (ID INT) ENGINE=INNODB;INSERT INTO T1 VALUES (75);INSERT INTO T1 VALUES (79);INSERT INTO T1 VALUES (78);INSERT INTO T1 VALUES (77);REPLACE INTO T1 VALUES (76);REPLACE INTO T1 VALUES (76);INSERT INTO T1 VALUES (104);INSERT INTO T1 VALUES (103);INSERT INTO T1 VALUES (102);INSERT INTO T1 VALUES (101);INSERT INTO T1 VALUES (105);INSERT INTO T1 VALUES (106);INSERT INTO T1 VALUES (107);INSERT INTO T2 VALUES (107),(75),(1000);SELECT T1.ID,T2.ID FROM T2 LEFT JOIN T1 ON T1.ID>=74 AND T1.ID<=0WHERE T2.ID=75 AND T1.ID IS NULL;DROP TABLE T1,T2;# RESULT HAS NO ROWS, WHERE IT SHOULD RETURN A SINGLE ROW (NULL, 75)HOW TO REPEAT:RUN ABOVE TEST CASE WITH MYSQL 5.1.46.THIS TEST IS TAKES FROM JOIN.TEST, USING INNODB INSTEAD OF MYISAM AS THE ENGINE. IT WORKS CORRECT WITH MYISAM (IT ALSO FAILS USING PBXT).THIS SEEMS TO BE A REGRESSION SINCE MYSQL 5.1.44 (I TESTED WITH MARIADB 5.1.44).SUGGESTED FIX:QUERY SHOULD RETURN THE CORRECT RESULT (NULL, 75), NOT EMPTY RESULT. ","SUMMARY":"BUGU00A0#53334  INCORRECT RESULT FOR INNODB IN LEFT JOIN WITH IMPOSSIBLE CONDITION ","CLASS":1}
{"ID_DEFECT":"54416","DESCRIPTION":"     [11 JUN 2010 6:15]   SERGEI GLUKHOV          DESCRIPTION:CONSIDER THE QUERY SELECT  MAX(TABLE1 .`PK`) FIELD1FROM T1 TABLE1  JOIN T2 TABLE2  ON TABLE2 .`COL_VARCHAR_NOKEY` LIKE XHAVING FIELD1 < 7;THE JOIN ITSELF (QUERY WITHOUT MAX) RETURNS THE EMPTY SET,WITH MAX IT RETURNS NULL.+--------+| FIELD1 |+--------+|   NULL |+--------+HOW TO REPEAT:CREATE TABLE T1 (  `PK` INT(11) NOT NULL AUTO_INCREMENT,  `COL_VARCHAR_NOKEY` VARCHAR(1) DEFAULT NULL,  PRIMARY KEY (`PK`));INSERT INTO T1 VALUES (1,F);CREATE TABLE T2 (  `PK` INT(11) NOT NULL AUTO_INCREMENT,  `COL_VARCHAR_NOKEY` VARCHAR(1) DEFAULT NULL,  PRIMARY KEY (`PK`));INSERT INTO T2 VALUES (2,M);INSERT INTO T2 VALUES (3,M);INSERT INTO T2 VALUES (11,NULL);INSERT INTO T2 VALUES (12,K);SELECT  MAX(TABLE1 .`PK`) FIELD1FROM T1 TABLE1  JOIN T2 TABLE2  ON TABLE2 .`COL_VARCHAR_NOKEY` LIKE XHAVING FIELD1 < 7;SELECT  TABLE1 .`PK` FIELD1FROM T1 TABLE1  JOIN T2 TABLE2  ON TABLE2 .`COL_VARCHAR_NOKEY` LIKE XHAVING FIELD1 < 7;SUGGESTED FIX:--- SQLSQL_SELECT.CC    2010-06-10 08:23:33 +0000+++ SQLSQL_SELECT.CC    2010-06-11 05:52:36 +0000@@ -1124,7 +1124,7 @@     ELEMENTS MAY BE LOST DURING FURTHER HAVING     CONDITION TRANSFORMATION IN JOIN::EXEC.   *-  IF (HAVING && CONST_TABLE_MAP)+  IF (HAVING && CONST_TABLE_MAP && !HAVING->WITH_SUM_FUNC)        HAVING->UPDATE_USED_TABLES();     HAVING= REMOVE_EQ_CONDS(THD, HAVING, &HAVING_VALUE) ","SUMMARY":"BUGU00A0#54416  MAX FROM JOIN WITH HAVING RETURNING NULL WITH 5.1 AND EMPTY SET ","CLASS":1}
{"ID_DEFECT":"56423","DESCRIPTION":"     [31 AUG 2010 20:03]   SVETA SMIRNOVA          DESCRIPTION:SELECT QUERY RETURNS MORE ROWS THAN CREATE ... SELECT QUERY:SELECT  ...+--------------+60 ROWS IN SET (0.01 SEC)CREATE TABLE T1 SELECT ...QUERY OK, 50 ROWS AFFECTED (0.16 SEC)RECORDS: 50  DUPLICATES: 0  WARNINGS: 0HOW TO REPEAT:SEE TEST CASE ATTACHED. ","SUMMARY":"BUGU00A0#56423  DIFFERENT COUNT WITH SELECT AND CREATE SELECT QUERIES ","CLASS":1}
{"ID_DEFECT":"57703","DESCRIPTION":"     [25 OCT 2010 3:27]   SHANE BESTER          DESCRIPTION:SIMILAR TO CLOSED BUG #54568 AND BUG #52120 WHOSE TESTCASES NO LONGER CRASH ON CURRENT SOURCES.VERSION: 5.6.1-M4-VALGRIND-MAX-DEBUG  SOCKET: TMPMYSQL.SOCK  PORT: 3307  SOURCE DISTRIBUTION[NEW THREAD 0X7FFFF429F710 (LWP 26340)]MYSQLD: HOMESBESTERBUILDBZRMYSQL-TRUNKSQLITEM_SUBSELECT.CC:846: VIRTUAL LONGLONG ITEM_IN_SUBSELECT::VAL_INT(): ASSERTION `0 FAILED.5.6.1-DEBUG STACK:#0  IN RAISE (SIG=6) AT ..NPTLSYSDEPSUNIXSYSVLINUXRAISE.C:64#1  IN ABORT () AT ABORT.C:92#2  IN __ASSERT_FAIL  AT ASSERT.C:81#3  IN ITEM_IN_SUBSELECT::VAL_INT  AT .SQLITEM_SUBSELECT.CC:846#4  IN ITEM_FUNC_NOP_ALL::VAL_INT  AT .SQLITEM_CMPFUNC.CC:359#5  IN EVAL_CONST_COND  AT .SQLITEM_FUNC.CC:78#6  IN INTERNAL_REMOVE_EQ_CONDS  AT .SQLSQL_SELECT.CC:9440#7  IN REMOVE_EQ_CONDS  AT .SQLSQL_SELECT.CC:9533#8  IN OPTIMIZE_COND  AT .SQLSQL_SELECT.CC:9315#9  IN JOIN::OPTIMIZE  AT .SQLSQL_SELECT.CC:909#10 IN SUBSELECT_SINGLE_SELECT_ENGINE::EXEC  AT .SQLITEM_SUBSELECT.CC:1905#11 IN ITEM_SUBSELECT::EXEC  AT .SQLITEM_SUBSELECT.CC:288#12 IN ITEM_SINGLEROW_SUBSELECT::VAL_INT  AT .SQLITEM_SUBSELECT.CC:601#13 IN ITEM_FUNC_SUBSTR::FIX_LENGTH_AND_DEC  AT .SQLITEM_STRFUNC.CC:1417#14 IN ITEM_FUNC::FIX_FIELDS  AT .SQLITEM_FUNC.CC:219#15 IN ITEM_STR_FUNC::FIX_FIELDS  AT .SQLITEM_STRFUNC.CC:117#16 IN FIND_ORDER_IN_LIST AT .SQLSQL_SELECT.CC:14720#17 IN SETUP_GROUP  AT .SQLSQL_SELECT.CC:14796#18 IN SETUP_WITHOUT_GROUP  AT .SQLSQL_SELECT.CC:466#19 IN JOIN::PREPARE  AT .SQLSQL_SELECT.CC:536#20 IN ST_SELECT_LEX_UNIT::PREPARE  AT .SQLSQL_UNION.CC:266#21 IN MYSQL_CREATE_VIEW  AT .SQLSQL_VIEW.CC:553#22 IN MYSQL_EXECUTE_COMMAND  AT .SQLSQL_PARSE.CC:4244#23 IN MYSQL_PARSE  AT .SQLSQL_PARSE.CC:5586#24 IN DISPATCH_COMMAND AT .SQLSQL_PARSE.CC:1130#25 IN DO_COMMAND AT .SQLSQL_PARSE.CC:802#26 IN DO_HANDLE_ONE_CONNECTION AT .SQLSQL_CONNECT.CC:1192#27 IN HANDLE_ONE_CONNECTION AT .SQLSQL_CONNECT.CC:1131#28 IN START_THREAD AT PTHREAD_CREATE.C:301#29 IN CLONE () AT ..SYSDEPSUNIXSYSVLINUXX86_64CLONE.S:115(GDB) HOW TO REPEAT:#ON DEBUG BUILD:DROP TABLE IF EXISTS `T1`;CREATE TABLE `T1`(`A` INT)ENGINE=MYISAM;CREATE OR REPLACE VIEW `V1` AS SELECT 1 FROM `T1` GROUP BYSUBSTRING(1 FROM (SELECT 3 FROM `T1` WHERE `A`>=ANY(SELECT 1))); ","SUMMARY":"BUGU00A0#57703  CREATE VIEW CAUSE ASSERTION FAILED: 0, FILE .ITEM_SUBSELECT.CC, LINE 846 ","CLASS":1}
{"ID_DEFECT":"23333","DESCRIPTION":"     [16 OCT 2006 13:23]   GUILHEM BICHOT          DESCRIPTION:**** I DID NOT TEST 5.0; VERIFIER, PLEASE TEST IT ****THIS IS A PROBLEM SIMILAR TO THE ONE OF BUG#12713, APPLIED TO MIXED AND STATEMENT-BASED REPLICATION.MYSQL_UPDATE() HAS:  IF ((ERROR < 0) || (UPDATED && !TRANSACTIONAL_TABLE))      IF (MYSQL_BIN_LOG.IS_OPEN())          IF (ERROR < 0)        THD->CLEAR_ERROR();      IF (THD->BINLOG_QUERY(THD::ROW_QUERY_TYPE,                            THD->QUERY, THD->QUERY_LENGTH,                            TRANSACTIONAL_TABLE, FALSE) &&          TRANSACTIONAL_TABLE)      TERROR=1;TTTT ROLLBACK UPDATE          IN MY TESTCASE, THE TABLE IN UPDATE IS TRANSACTIONAL, THERE IS AN ERROR, SO THE IF() CONDITION IS FALSE AND NOTHING IS WRITTEN TO THE BINLOG. BUT AS A SIDE-EFFECT OF THE UPDATE, A NON-TRANSACTIONAL TABLE IS UPDATED, SO THE BINLOG IS OUT OF SYNC.ROW-BASED BINLOGGING DOES NOT HAVE THIS PROBLEM APPARENTLY (MY TESTCASE DOES NOT PRODUCE BAD RESULTS THERE).HOW TO REPEAT:SOURCE INCLUDEMASTER-SLAVE.INC;CREATE TABLE T1(A INT, UNIQUE(A)) ENGINE=INNODB;CREATE TABLE T2(A INT) ENGINE=MYISAM;DROP FUNCTION IF EXISTS FN1;DELIMITER |;CREATE FUNCTION FN()       RETURNS INTBEGIN  INSERT INTO T2 VALUES(100);  RETURN 1;END|DELIMITER ;|INSERT INTO T1 VALUES(1),(2);--ERROR 1062UPDATE T1 SET A=FN() WHERE A=2;SELECT * FROM T1;SELECT * FROM T2;SYNC_SLAVE_WITH_MASTER;SELECT * FROM T1;SELECT * FROM T2;CONNECTION MASTER;SHOW BINLOG EVENTS;DROP TABLE T1,T2;DROP FUNCTION FN;SYNC_SLAVE_WITH_MASTER;RESULTS:*** 0 ****--- 1,50 ----+ STOP SLAVE;+ DROP TABLE IF EXISTS T1,T2,T3,T4,T5,T6,T7,T8,T9;+ RESET MASTER;+ RESET SLAVE;+ DROP TABLE IF EXISTS T1,T2,T3,T4,T5,T6,T7,T8,T9;+ START SLAVE;+ CREATE TABLE T1(A INT, UNIQUE(A)) ENGINE=INNODB;+ WARNINGS:+ WARNING       1266    USING STORAGE ENGINE MYISAM FOR TABLE T1+ CREATE TABLE T2(A INT) ENGINE=MYISAM;+ DROP FUNCTION IF EXISTS FN1;+ WARNINGS:+ NOTE  1305    FUNCTION FN1 DOES NOT EXIST+ CREATE FUNCTION FN()+ RETURNS INT+ BEGIN+ INSERT INTO T2 VALUES(100);+ RETURN 1;+ END|+ INSERT INTO T1 VALUES(1),(2);+ UPDATE T1 SET A=FN() WHERE A=2;+ ERROR 23000: DUPLICATE ENTRY 1 FOR KEY A+ SELECT * FROM T1;+ A+ 1+ 2+ SELECT * FROM T2;+ A+ 100+ SELECT * FROM T1;+ A+ 1+ 2+ SELECT * FROM T2;+ A+ SHOW BINLOG EVENTS;+ LOG_NAME      POS     EVENT_TYPE      SERVER_ID       END_LOG_POS     INFO+ MASTER-BIN.000001     4       FORMAT_DESC     1       102     SERVER VER: 5.1.13-BETA-VALGRIND-MAX-DEBUG-LOG, BINLOG VER: 4+ MASTER-BIN.000001     102     QUERY   1       212     USE `TEST`; CREATE TABLE T1(A INT, UNIQUE(A)) ENGINE=INNODB+ MASTER-BIN.000001     212     QUERY   1       311     USE `TEST`; CREATE TABLE T2(A INT) ENGINE=MYISAM+ MASTER-BIN.000001     311     QUERY   1       481     USE `TEST`; CREATE DEFINER=`ROOT`@`LOCALHOST` FUNCTION FN()+ RETURNS INT+ BEGIN+ INSERT INTO T2 VALUES(100);+ RETURN 1;+ END+ MASTER-BIN.000001     481     QUERY   1       572     USE `TEST`; INSERT INTO T1 VALUES(1),(2)+ DROP TABLE T1,T2;+ DROP FUNCTION FN;SEE: T2 IS NON-EMPTY ON MASTER BUT IS EMPTY ON SLAVE.SUGGESTED FIX:QUITE A CONVOLUTED EXAMPLE, BUT BETTER KNOW IT THAN NOT. ","SUMMARY":"BUGU00A0#23333  STORED FUNCTION + NON-TRANSAC TABLE + TRANSAC TABLE = BREAKS STMT-BASED BINLOG ","CLASS":1}
{"ID_DEFECT":"28086","DESCRIPTION":"     [25 APR 2007 0:42]   JONATHAN MILLER          DESCRIPTION:HI,I GOT AROUND THE TABLE LOCKING ISSUES, BUT THE DIFF OF THE DUMPS FOR MASTER AND SLAVE CAUSES THE TEST TO FAIL ON:SAPSRV1 AUTOPUSHSAPSRV2 -MAXSOL10-SPARC-A -MAXPOWERMACG5 -MAXI HAVE ALSO REPRODUCED IT LOCALLY BY RUNNING..MYSQL-TEST-RUN.PL --DO-TEST=RPL_NDB_STM --MYSQLD=--BINLOG-FORMAT=STATEMENTTHE DIFF OF THE FILES SHOW:DATA1MYSQL-5.1-TELCO2MYSQL-TEST> DIFF .VARTMPMASTER_APPLY_STATUS.SQL .VARTMPSLAVE_APPLY_STATUS.SQL1111,1125C1111,1125< INSERT INTO `HISTORY` VALUES (1,98,5,10,1.00,2007-04-25 03:25:39,ROOT@LOCALHOST,AD59B120-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (2,1,30,10,1.00,2007-04-25 03:25:39,ROOT@LOCALHOST,AD5A7EFC-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (3,58,8,10,1.00,2007-04-25 03:25:39,ROOT@LOCALHOST,AD5B4102-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (4,8,1,10,1.00,2007-04-25 03:25:39,ROOT@LOCALHOST,AD5BEC1A-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (5,3,63,10,1.00,2007-04-25 03:25:39,ROOT@LOCALHOST,AD5C95F2-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (6,59,10,10,1.00,2007-04-25 03:26:09,ROOT@LOCALHOST,BF58EEB8-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (7,3,1,10,1.00,2007-04-25 03:26:09,ROOT@LOCALHOST,BF5BFFE0-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (8,1,2,10,1.00,2007-04-25 03:26:09,ROOT@LOCALHOST,BF5CAE0E-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (9,10,20,10,1.00,2007-04-25 03:26:09,ROOT@LOCALHOST,BF5D64E8-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (10,65,64,10,1.00,2007-04-25 03:26:09,ROOT@LOCALHOST,BF5E105A-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (11,9,67,10,1.00,2007-04-25 03:26:40,ROOT@LOCALHOST,D1604C1E-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (12,9,65,10,1.00,2007-04-25 03:26:40,ROOT@LOCALHOST,D16407D2-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (13,9,9,10,1.00,2007-04-25 03:26:40,ROOT@LOCALHOST,D164B344-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (14,8,2,10,1.00,2007-04-25 03:26:40,ROOT@LOCALHOST,D165563C-4413-102A-97AE-00E081203F51,COMPLETED TRANS);< INSERT INTO `HISTORY` VALUES (15,64,1,10,1.00,2007-04-25 03:26:40,ROOT@LOCALHOST,D165F498-4413-102A-97AE-00E081203F51,COMPLETED TRANS);---> INSERT INTO `HISTORY` VALUES (1,98,5,10,1.00,2007-04-25 03:25:39,X?<000.??0??6??0?,ADA85938-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (2,1,30,10,1.00,2007-04-25 03:25:39,X?<000.??0??6??0?,ADA960A8-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (3,58,8,10,1.00,2007-04-25 03:25:39,X?<000.??0??6??0?,ADAA5B7A-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (4,8,1,10,1.00,2007-04-25 03:25:39,X?<000.??0??6??0?,ADAB4F62-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (5,3,63,10,1.00,2007-04-25 03:25:39,X?<000.??0??6??0?,ADAC3DF0-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (6,59,10,10,1.00,2007-04-25 03:26:09,X?<000.??0??6??0?,BF67E184-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (7,3,1,10,1.00,2007-04-25 03:26:09,X?<000.??0??6??0?,BF68D5B2-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (8,1,2,10,1.00,2007-04-25 03:26:09,X?<000.??0??6??0?,BF69C8E6-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (9,10,20,10,1.00,2007-04-25 03:26:09,X?<000.??0??6??0?,BF6ABCA6-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (10,65,64,10,1.00,2007-04-25 03:26:09,X?<000.??0??6??0?,BF6BAC88-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (11,9,67,10,1.00,2007-04-25 03:26:40,O?<000.??0??6??0?,D16CCE8A-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (12,9,65,10,1.00,2007-04-25 03:26:40,O?<000.??0??6??0?,D16D8820-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (13,9,9,10,1.00,2007-04-25 03:26:40,O?<000.??0??6??0?,D16E3D24-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (14,8,2,10,1.00,2007-04-25 03:26:40,P?<000.??0??6??0?,D16EF89A-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);> INSERT INTO `HISTORY` VALUES (15,64,1,10,1.00,2007-04-25 03:26:40,P?<000.??0??6??0?,D16FA9AC-4413-102A-ABE3-00E081203F51,COMPLETED TRANS);LOOKING AT THE BINLOG YOU CAN SEE THE STATEMENT THAT WERE REPLICATED.MASTER-BIN.000001       3789    XID     1       3816    COMMIT * XID=5213 *MASTER-BIN.000001       3816    QUERY   1       3884    USE `TEST`; BEGINMASTER-BIN.000001       3884    QUERY   1       187     USE `TPCB`; UPDATE TPCB.ACCOUNT SET BALANCE =  NAME_CONST(BAL,1.00), FILLER = ACCOUNT UPDATED     WHERE ID =  NAME_CONST(ACCT,64)MASTER-BIN.000001       4071    QUERY   1       374     USE `TPCB`; UPDATE TPCB.BRANCH SET BALANCE =  NAME_CONST(BBAL,1.00), FILLER = BRANCH UPDATED     WHERE BID =  NAME_CONST(BRCH,10)MASTER-BIN.000001       4258    QUERY   1       560     USE `TPCB`; UPDATE TPCB.TELLER SET BALANCE =  NAME_CONST(TBAL,3.00), FILLER = TELLER UPDATED     WHERE TID =  NAME_CONST(TELL,1)MASTER-BIN.000001       4444    INTVAR  1       588     INSERT_ID=15MASTER-BIN.000001       4472    QUERY   1       832     USE `TPCB`; INSERT INTO TPCB.HISTORY VALUES(NULL, NAME_CONST(ACCT,64), NAME_CONST(TELL,1), NAME_CONST(BRCH,10), NAME_CONST(AMOUNT,1.00), NOW(), USER(),UUID(),COMPLETED TRANS)MASTER-BIN.000001       4716    XID     1       4743    COMMIT * XID=5260 *HOW TO REPEAT:USE RPL_NDB_STM_INNODB.TEST IN THE 5.1-TELCO CLONE AND RUN USING THE FOLLOWING.MYSQL-TEST-RUN.PL --DO-TEST=RPL_NDB_STM --MYSQLD=--BINLOG-FORMAT=STATEMENT ","SUMMARY":"BUGU00A0#28086  SBR OF USER() BECOMES CORRUPTED ON SLAVE  ","CLASS":1}
{"ID_DEFECT":"28908","DESCRIPTION":"     [5 JUN 2007 22:31]   JONATHAN MILLER          DESCRIPTION:SETTING THE  GLOBAL SERVER_ID IS NOT SETTING THE SESSION SERVER_ID WHICH CAUSE CHANGED TO FOLLOW TO RECORD THE OLD SEVER ID.THE DOCS STATE THAT VAR SCOPE IS BOTH (SESSIONGLOBAL) AND THAT IT IS DYNAMIC.IF YOU TRY TO SET THE SESSION ID YOU GET BACK:MYSQL> SET SERVER_ID = 5;ERROR 1229 (HY000): VARIABLE SERVER_ID IS A GLOBAL VARIABLE AND SHOULD BE SET WITH SET GLOBALSO WE HAVE ISSUES HERE OF INCONSTANCY. HOW TO REPEAT:SETUP MYSQLD USING BINLOG WITH SERVER_ID=1.CREATE TABLESHOW BINLOG EVENT (SEE ID = 1)SET GLOBAL SERVER_ID=2CREATE TABLE SHOW BINLOG EVENT (SEE ID = 1)SET SERVER_ID = 3;READ ERROR MESSAGEERROR 1229 (HY000): VARIABLE SERVER_ID IS A GLOBAL VARIABLE AND SHOULD BE SET WITH SET GLOBALLOG OUT OF MYSQLLOG INTO MYSQLCREATE TABLE SHOW BINLOG EVENT (SEE ID = 2)SUGGESTED FIX:DO AWAY WITH SESSION SERVER_ID AND HAVE GLOBAL SERVER_ID ONLY ","SUMMARY":"BUGU00A0#28908  REPLICATION: SET GLOBAL SERVER_ID IS NOT SETTING THE SESSION SERVER_ID .... ","CLASS":1}
{"ID_DEFECT":"31240","DESCRIPTION":"     [27 SEP 2007 13:56]   ANDREI ELKIN          DESCRIPTION:CREATE_FILE_LOG_EVENT THAT IS PREPARED BY 4.0 MASTER CAN NOT BE PARSEDBY NEITHER 5.1 CLIENT (MYSQLBINLOG) NOR SERVER.COMPARING EXECUTIONS OF 5.1 AND 5.0 MYSQLBINLOG I FOUND THATGIVEN AN INSTANT OF A CREATE_FILE_LOG_EVENT PREPARED BY A 4.0TH SERVER 5.1TH VERSION OF MYSQLBINLOG (OR SLAVE SERVER) COMPUTES FIELD_LENS= (UCHAR*)SQL_EX.INIT()WRONG WHICH RESULTS IN INCORRECT TABLE_NAME ETC.HOW TO REPEAT:USE BINLOG FILES UPLOADED TO THE CSC PAGE; EXECUTEMYSQLBINLOG --START-POSITION=1042490638 --STOP-POSITION=1045408279 BINLOG_FILE_722WITH VERSION(MYSQLBINLOG) == 5.1.SUGGESTED FIX:BESIDES THE TECHNICAL ISSUE ITSELF, THIS MUST BE A GENERAL ISSUE OF A POSSIBLE UPGRADE PATH.THE PROBLEM IS VAST ALREADY IN THAT ITS NOT TRIVIAL TO TEST CROSS-VERSION REPLICATIONS WHEN MASTER AND SLAVE ARE SEPARATED BY SEVERAL MAJOR VERSION LIKE IN THE CURRENT CASE. ","SUMMARY":"BUGU00A0#31240  LOAD DATA INFILE REPLICATION BETWEEN (4.0 OR 4.1) AND 5.1 FAILS ","CLASS":1}
{"ID_DEFECT":"31581","DESCRIPTION":"     [13 OCT 2007 15:55]   SERGE KOZLOV          DESCRIPTION:THERE ARE MASTER 5.1-TELCO-6.1 AND SLAVE 5.1.22 WITH ROW-BASED REPLICATION. SLAVE CRASHES DURING STARTING IF THE MASTER BINLOG HAS NEW EVENTS.HOW TO REPEAT:1. INSTALL MYSQL 5.1.22 2. INSTALL MYSQL 5.1-TELCO-6.13. COPY M4R.PL (PATCHED MTR) INTO 5.1.22MYSQL-TEST 4. COPY ATTACHED TEST CASE INTO 5.1.22MYSQL-TESTSUITEBUGT5. SET CURRENT DIR 5.1.22MYSQL-TEST 6. TRY TO CREATE RESULT FILE FOR TEST CASE:.M4R22.PL --MASTER-BASEDIR=PATHTO5.1-TELCO-6.1 --SUITE=BUGS --RECORD--MYSQLD=--BINLOG-FORMAT=ROW <TEST CASE> ","SUMMARY":"BUGU00A0#31581  5.1-TELCO-6.1 -> 5.1.22.  SLAVE CRASHES DURING STARTING ","CLASS":1}
{"ID_DEFECT":"32407","DESCRIPTION":"     [15 NOV 2007 13:10]   SVEN SANDBERG          DESCRIPTION:WHEN RUNNING MYSQLBINLOG --BASE64-OUTPUT, THE BASE64 OUTPUT IS NOT WRITTEN FOR EVERY TYPE OF EVENT. FOR INSTANCE, IT IS NOT WRITTEN FOR FORMAT_DESCRIPTION_LOG_EVENT.BEING ABLE TO REPRODUCE THE FORMAT_DESCRIPTION_LOG_EVENT WITH BINLOG STATMENTS IS CRUCIAL IN ORDER TO USE BINLOG STATEMENTS WITH EVENTS GENERATED BY OLDER VERSIONS OF THE BINLOG. THIS IS NEEDED IN ORDER TO CREATE REGRESSION TESTS.HOW TO REPEAT:THE ATTACHED BINLOG WAS CREATED BY RUNNING: USE TEST; CREATE TABLE T1 (A INT); INSERT INTO T1 VALUES (1); BEGIN; INSERT INTO T1 VALUES (2); INSERT INTO T1 VALUES (3); COMMIT;HERE IS THE OUTPUT FROM MYSQLBINLOG:$ MYSQLBINLOG --HEXDUMP --BASE64-OUTPUT MASTER-BIN.000001CLIENTMYSQLBINLOG --BASE64-OUTPUT VARLOGMASTER-BIN.000001 *!40019 SET @@SESSION.MAX_INSERT_DELAYED_THREADS=0*;*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*;DELIMITER *!*;# AT 4#071115 13:56:39 SERVER ID 1  END_LOG_POS 106   START: BINLOG V 4, SERVER V 5.1.23-BETA-DEBUG-LOG CREATED 071115 13:56:39 AT STARTUP# WARNING: THIS BINLOG WAS NOT CLOSED PROPERLY. MOST PROBABLY MYSQLD CRASHED WRITING IT.ROLLBACK*!*;# AT 106#071115 13:56:56 SERVER ID 1  END_LOG_POS 192 BINLOG GEI8RWIBAAAAVGAAAMAAAAAQAAEAAAAAAAAABAAAGGAAAEAAAAEAAAAAAAAAAAYDC3RKBAGACAAIAHRLC3QAY3JLYXRLIHRHYMXLIHQXICHHIGLUDCK=*!*;# AT 192# AT 233#071115 13:57:02 SERVER ID 1  END_LOG_POS 233   TABLE_MAP: `TEST`.`T1` MAPPED TO NUMBER 16#071115 13:57:02 SERVER ID 1  END_LOG_POS 267   WRITE_ROWS: TABLE ID 16 FLAGS: STMT_END_FBINLOG HKI8RXMBAAAAKQAAAOKAAAAAABAAAAAAAAAABHRLC3QAANQXAAEDAAE=HKI8RXCBAAAAIGAAAASBAAAQABAAAAAAAAEAAF+AQAAAA==*!*;# AT 267# AT 308#071115 13:57:09 SERVER ID 1  END_LOG_POS 308   TABLE_MAP: `TEST`.`T1` MAPPED TO NUMBER 16#071115 13:57:09 SERVER ID 1  END_LOG_POS 342   WRITE_ROWS: TABLE ID 16 FLAGS: STMT_END_FBINLOG JUI8RXMBAAAAKQAAADQBAAAAABAAAAAAAAAABHRLC3QAANQXAAEDAAE=JUI8RXCBAAAAIGAAAFYBAAAQABAAAAAAAAEAAF+AGAAAA==*!*;# AT 342# AT 383#071115 13:57:12 SERVER ID 1  END_LOG_POS 383   TABLE_MAP: `TEST`.`T1` MAPPED TO NUMBER 16#071115 13:57:12 SERVER ID 1  END_LOG_POS 417   WRITE_ROWS: TABLE ID 16 FLAGS: STMT_END_FBINLOG KEI8RXMBAAAAKQAAAH8BAAAAABAAAAAAAAAABHRLC3QAANQXAAEDAAE=KEI8RXCBAAAAIGAAAKEBAAAQABAAAAAAAAEAAF+AWAAAA==*!*;DELIMITER ;# END OF LOG FILEROLLBACK * ADDED BY MYSQLBINLOG *;*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*; ","SUMMARY":"BUGU00A0#32407  IMPOSSIBLE TO DO POINT-IN-TIME RECOVERY FROM OLDER BINLOG ","CLASS":1}
{"ID_DEFECT":"32580","DESCRIPTION":"     [21 NOV 2007 16:31]   GUILHEM BICHOT          DESCRIPTION:IN STATEMENT-BASED OR MIXED BINLOGGING MODE, WHEN A USER VARIABLE (@SOMETHING) IS USED INSIDE AN INSERT STATEMENT, A USER_VAR BINLOG EVENT IS WRITTEN TO THE BINLOG, AND IS NEEDED FOR THE STATEMENT TO REPLAY PROPERLY.APPARENTLY IN 5.1 THIS IS BROKEN:ON ONE INSTALLATION I SEE MYSQLBINLOG PRINTSET @`R`:=%.14*!*;WHICH IS NOT VALID SYNTAX, AND ON ANOTHER INSTALLATION MYSQLBINLOG SEGFAULTS.THIS IS S1 BECAUSE IT ENDANGERS RECOVERY FROM BACKUPS, AND SO COULD EVEN BE P1 IF I HAD THIS POWER :)HOW TO REPEAT:CREATE TBUG.TEST:-- SOURCE INCLUDEHAVE_BINLOG_FORMAT_MIXED_OR_STATEMENT.INCCREATE TABLE U(A INT);SET @R=(RAND()*1000-500);INSERT INTO U VALUES(@R);SELECT * FROM U;SHOW BINLOG EVENTS;RUN THAT IN 5.1 (.MTR --RECORD BUG): THE RESULT FILE WILL BE CORRECT, BUT MYSQLBINLOG ON THIS BINLOG WILL SHOW INCORRECT RESULTS OR CRASH. ","SUMMARY":"BUGU00A0#32580  MYSQLBINLOG CANNOT READ BINLOG EVENT GENERATED BY USER VARIABLE USAGE ","CLASS":1}
{"ID_DEFECT":"34355","DESCRIPTION":"     [6 FEB 2008 17:10]   SVEN SANDBERG          DESCRIPTION:PROBLEM: WHEN THE WINDOWS VERSION OF MYSQLBINLOG READS 4.1 BINLOGS CONTAINING LOAD DATA INFILE, IT OUTPUTS BACKSLASHES AS PATH SEPARATORS IN FILENAMES. HOWEVER, THE OUTPUT IS TYPICALLY PIPED TO A CLIENT, AND CLIENT EXPECT FORWARD SLASHES.HOW TO REPEAT:RUN MTR BINLOG_OLD_VERSIONS UNDER WINDOWSSUGGESTED FIX:REPLACE  BY  IN FILENAMES. ","SUMMARY":"BUGU00A0#34355  MYSQLBINLOG OUTPUTS BACKSLASH AS PATH SEPARATOR FOR 4.1 BINLOGS ","CLASS":1}
{"ID_DEFECT":"34541","DESCRIPTION":"     [14 FEB 2008 11:09]   SVEN SANDBERG          DESCRIPTION:WHEN USING STATEMENT-BASED LOGGING, AND THE AUTOCOMMIT MODE IS CHANGED BETWEEN TWO STATEMENTS, THE NEXT QUERY_LOG_EVENT WILL BE LOG THE AUTOCOMMIT MODE. WHEN THE BINLOG IS LATER PROCESSED BY MYSQLBINLOG, A SET STATEMENT WITH NO VARIABLE WILL BE PRINTED:SET *!*;THE REASON IS THAT MYSQLBINLOG (IN LOG_EVENT.CC, QUERY_LOG_EVENT::PRINT_QUERY_HEADER(), WHERE IT CALLS PRINT_SET_OPTION()) WILL DETECT THAT FLAGS2 CHANGED, SO IT WILL PRINT A SET. THEN IT WILL CHECK THE BITS OF FLAGS2 THAT IT KNOWS ABOUT, AND PRINT A VARIABLE TO SET FOR EACH OF THEM. HOWEVER, IT FAILS TO TEST THE OPTION_NOT_AUTOCOMMIT BIT, SO IF THAT IS THE ONLY BIT THAT CHANGED, NO VARIABLE WILL BE PRINTED AFTER SET.HOW TO REPEAT:SOURCE INCLUDEMASTER-SLAVE.INCUSE TEST;CREATE TABLE T1 (A INT);SET AUTOCOMMIT = 0;INSERT INTO T1 VALUES (1);RUN MYSQLBINLOG ON MASTER-BIN.000001: IT PRODUCES THIS:HTTPS:INTRANET.MYSQL.COMSECUREPASTEDISPLAYPASTE.PHP?CODEID=3453SEE THE LINE ABOVE THE INSERT STATEMENT.SUGGESTED FIX:IF WE WANT TO REPLICATE THE AUTOCOMMIT FLAG, PRINT IT HERE.IF WE DONT WANT TO REPLICATE THE AUTOCOMMIT FLAG, REMOVE OPTION_NOT_AUTOCOMMIT FROM OPTIONS_WRITTEN_TO_BIN_LOG (AND UPDATE DOCUMENTATION FOR QUERY_LOG_EVENT, DESCRIPTION OF FLAGS2). ","SUMMARY":"BUGU00A0#34541  MYSQLBINLOG PRINTS SET; IN STM MODE AFTER CHANGING AUTOCOMMIT MODE ","CLASS":1}
{"ID_DEFECT":"34628","DESCRIPTION":"     [17 FEB 2008 17:11]   PARTHA DUTTA          DESCRIPTION:ISSUING A LOAD DATA CONCURRENT LOCAL INFILE COMMAND ONLY WRITES LOAD DATA LOCAL INFILE ITO THE BINARY LOG.  AS A RESULT, IF REPLICATION IS ON, QUERIES ON SLAVES WILL BLOCK THE REPLICATION SQL THREAD.HOW TO REPEAT:HAVE BINARY LOGGING ENABLED ON THE DATABASE SERVER, AND USE THIS TEST:MYSQL> CREATE TABLE A (A INT);QUERY OK, 0 ROWS AFFECTED (0.04 SEC)MYSQL> SHOW CREATE TABLE A;+-------+--------------------------------------------------------------------------------------+| TABLE | CREATE TABLE                                                                         |+-------+--------------------------------------------------------------------------------------+| A     | CREATE TABLE `A` (  `A` INT(11) DEFAULT NULL) ENGINE=MYISAM DEFAULT CHARSET=LATIN1 | +-------+--------------------------------------------------------------------------------------+1 ROW IN SET (0.04 SEC)MYSQL> ! CAT A1234MYSQL> LOAD DATA CONCURRENT LOCAL INFILE A INTO TABLE A;QUERY OK, 4 ROWS AFFECTED (0.05 SEC)RECORDS: 4  DELETED: 0  SKIPPED: 0  WARNINGS: 0FROM A SHELL COMMAND PROMPT:POWERBOOKDUTTA:USRLOCALMYSQLDATA PDUTTA$ SUDO MYSQLBINLOG USRLOCALMYSQLDATABINLOG.000001PASSWORD:*!40019 SET @@SESSION.MAX_INSERT_DELAYED_THREADS=0*;*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*;DELIMITER *!*;# AT 4#8217 12:1:29 SERVER ID 1  END_LOG_POS 106      START: BINLOG V 4, SERVER V 5.1.22-RC-LOG CREATED 8217 12:1:29 AT STARTUP# WARNING: THIS BINLOG WAS NOT CLOSED PROPERLY. MOST PROBABLY MYSQLD CRASHED WRITING IT.ROLLBACK*!*;# AT 106#8217 12:2:31 SERVER ID 1  END_LOG_POS 191      QUERY   THREAD_ID=3     EXEC_TIME=0     ERROR_CODE=0USE TEST*!*;SET TIMESTAMP=1203267751*!*;SET @@SESSION.FOREIGN_KEY_CHECKS=1, @@SESSION.SQL_AUTO_IS_NULL=1, @@SESSION.UNIQUE_CHECKS=1*!*;SET @@SESSION.SQL_MODE=0*!*;*!C LATIN1 **!*;SET @@SESSION.CHARACTER_SET_CLIENT=8,@@SESSION.COLLATION_CONNECTION=8,@@SESSION.COLLATION_SERVER=8*!*;CREATE TABLE A (A INT)*!*;# AT 191#8217 12:3:23 SERVER ID 1  END_LOG_POS 222 #BEGIN_LOAD_QUERY: FILE_ID: 1  BLOCK_LEN: 8# AT 222#8217 12:3:23 SERVER ID 1  END_LOG_POS 348      EXECUTE_LOAD_QUERY      THREAD_ID=3     EXEC_TIME=0     ERROR_CODE=0SET TIMESTAMP=1203267803*!*;LOAD DATA LOCAL INFILE VARTMPSQL_LOAD_MB-1-3 INTO TABLE A*!*;# FILE_ID: 1 DELIMITER ;# END OF LOG FILEROLLBACK * ADDED BY MYSQLBINLOG *;*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*;YOU CAN SEE THAT THE LOAD DATA COMMAND HAS NOT BEEN WRITTEN WITH THE CONCURRENT MODIFIER.I HAVE NOT TESTED THIS ON 5.0 BUT I IMAGINE THAT IT WOULD BE THE SAME.SUGGESTED FIX:ADD THE CONCURRENT IDENTIFIER TO THE BINARY LOG. ","SUMMARY":"BUGU00A0#34628  LOAD DATA CONCURRENT INFILE DROPS CONCURRENT IN BINARY LOG ","CLASS":1}
{"ID_DEFECT":"34739","DESCRIPTION":"     [21 FEB 2008 17:45]   ANDREI ELKIN          DESCRIPTION:THERE HAPPENED TWO ARTIFACTS WHEN--LOG-BIN WAS SET TO A DIRECTORY NAME.1. IF THERE IS THE TRAILING  AT THE END OF THE DIR NAME   THE BARE NAME OF THE BINLOG IS EMPTY SO THAT THE FILE LS:S LIKE   .0000012. IF THERE IS NO  SYMBOL    THERE IS  FILE $DIR.INDEX NOT FOUND (ERRCODE: 13) ERROR,   WHERE $DIR IS THE PATH TO THE DIRECTORYWHAT IS EXPECTED AN ERRORWARNING THAT --LOG-BINS PATH IS A DIRECTORY NOT A FILE NAME, FOR EITHER CASE, AND THE NAME IS SET ACCORDING TO --PID-FILE OR GETHOSTNAME(), IF THE FORMER IS NOT SET. GET THAT ON LINUX-UBUNTU 7.10 BUT IT SHOULD NOT BE LINUX-PECULIAR.HOW TO REPEAT:MYSQLD --LOG-BIN=SOMEEXISTINGDIRECTORYANDMYSQLD --LOG-BIN=SOMEEXISTINGDIRECTORYTO GETCD SOMEEXISTINGDIRECTORY && LS -A.000001.INDEXANDFILE SOMEEXISTINGDIRECTORY.INDEX NOT FOUND (ERRCODE: 13) ERROR ","SUMMARY":"BUGU00A0#34739  UNEXPECTED BINLOG FILE NAME WHEN --LOG-BIN IS SET TO A DIRECTORY NAME ","CLASS":1}
{"ID_DEFECT":"35762","DESCRIPTION":"     [2 APR 2008 5:57]   SVEN SANDBERG          DESCRIPTION:IF A CREATE ... ENGINE=INNODB ... SELECT STATEMENT FAILS (E.G., DUE TO A DUPLICATE KEY), THEN THE NEXT STATEMENT CAN CONTAIN A WRITE_ROWS_LOG_EVENT WITHOUT A PRECEDING TABLE_MAP_LOG_EVENT. THIS CAUSES THE SLAVE TO IGNORE THE WRITE_ROWS_LOG_EVENT, SO THE SLAVE WILL LOSE DATA.THERE ARE TWO PROBLEMS: (1) THE TABLE_MAP_LOG_EVENT SHOULD BE WRITTEN. (2) THE WRITE_ROWS_LOG_EVENT SHOULD NOT BE SILENTLY IGNORED. AN ERROR SHOULD BE PRODUCED, CAUSING THE SLAVE TO STOP.THE TEST CASE BELOW WORKS CORRECTLY IF IT IS MODIFIED SO THAT ONE OR MORE OF THE FOLLOWING HOLDS: - T2 IS MYISAM, OR - CREATE...SELECT DOES NOT FAIL.HOWEVER, THE ERROR REMAINS IF: - T1 IS INNODB INSTEAD OF MYISAM, OR - ALL THE INSERT STATEMENTS AND THE CREATE...SELECT ARE IN A TRANSACTION INSTEAD OF AUTOCOMMITTED.RELATED BUGS: BUG#22864.HOW TO REPEAT:==== RPL_BUG-MASTER.OPT ====--INNODB==== RPL_BUG-SLAVE.OPT ====--INNODB==== RPL_BUG.TEST ====SOURCE INCLUDEMASTER-SLAVE.INC;SOURCE INCLUDEHAVE_BINLOG_FORMAT_ROW.INC;--ECHO [ON MASTER]CREATE TABLE T1 (A INT);SET AUTOCOMMIT=1;INSERT INTO T1 VALUES (1);INSERT INTO T1 VALUES (1);--ERROR 1062CREATE TABLE T2 (A INT UNIQUE) ENGINE=INNODB SELECT * FROM T1;INSERT INTO T1 VALUES (2);SHOW TABLES;SELECT * FROM T1;SUGGESTED FIX:(1) MAKE SURE THAT THE ROWS_LOG_EVENT IS ALWAYS WRITTEN, EVEN IF THE TRANSACTION IS INTERRUPTED BY A FAILING CREATE-SELECT.(2) GENERATE AN ERROR WHENEVER AN ATTEMPT IS MADE TO EXECUTE A [WRITE|UPDATE|DELETE]_ROWS_LOG_EVENT[_OLD] WITHOUT A PRECEDING TABLE_MAP_LOG_EVENT.WORKAROUND:IF CREATE...SELECT FAILS, DO SOME HARMLESS MODIFICATION TO SOME TABLE, TO RESET THE LOGGING CODE TO A CLEAN STATE. ","SUMMARY":"BUGU00A0#35762  FAILING CREATE-SELECT STEELS TABLE MAP OF THE FOLLOWING QUERY ","CLASS":1}
{"ID_DEFECT":"36443","DESCRIPTION":"     [30 APR 2008 22:14]   GORDON SHANNON          DESCRIPTION:AFTER UPGRADING A 5.0.51A DATABASE TO 5.1.24 WITH MYSQL_UPGRADE, FOLLOWING HAPPENED.1. DURING MYSQL_UPGRADE, GOT THE WARNING   WARNING  : TRIGGERS FOR TABLE `CI_SENTIMENT_DB`.`DW_TOPIC_DIM` HAVE NO CREATION CONTEXTSTATUS   : OK2. DROPPED AND RECREATED THE TRIGGER JUST IN CASE.3. WHEN A ROW IS INSERTED INTO THE TABLE, THE SERVER CRASHES AND AUTORECOVERS.4. IF I DROP THE INSERT TRIGGER, THE INSERT WORKS WITHOUT ERROR.CONTENTS OF ERROR LOG:USRSBINMYSQLD(PRINT_STACKTRACE+0X1E)[0X6CD03E]USRSBINMYSQLD(HANDLE_SEGFAULT+0X320)[0X5B8610]LIB64LIBPTHREAD.SO.0[0X314E80DE70]USRSBINMYSQLD(_ZN3THD27RESTORE_SUB_STATEMENT_STATEEP19SUB_STATEMENT_STATE+0X61)[0X5A69A1]USRSBINMYSQLD(_ZN19TABLE_TRIGGERS_LIST16PROCESS_TRIGGERSEP3THD14TRG_EVENT_TYPE20TRG_ACTION_TIME_TYPEB+0XE4)[0X6EA8D4]USRSBINMYSQLD(_Z36FILL_RECORD_N_INVOKE_BEFORE_TRIGGERSP3THDR4LISTI4ITEMES4_BP19TABLE_TRIGGERS_LIST14TRG_EVENT_TYPE+0XD9)[0X5F7279]USRSBINMYSQLD(_Z12MYSQL_INSERTP3THDP10TABLE_LISTR4LISTI4ITEMERS3_IS5_ES6_S6_15ENUM_DUPLICATESB+0X800)[0X62DF90]USRSBINMYSQLD(_Z21MYSQL_EXECUTE_COMMANDP3THD+0X29A4)[0X5C4D44]USRSBINMYSQLD(_Z11MYSQL_PARSEP3THDPKCJPS2_+0X1B4)[0X5C78A4]USRSBINMYSQLD(_ZN15QUERY_LOG_EVENT14DO_APPLY_EVENTEPK14RELAY_LOG_INFOPKCJ+0X38B)[0X662F9B]USRSBINMYSQLD(_Z26APPLY_EVENT_AND_UPDATE_POSP9LOG_EVENTP3THDP14RELAY_LOG_INFOB+0X13D)[0X6BD91D]USRSBINMYSQLD(HANDLE_SLAVE_SQL+0X6E7)[0X6C1F97]LIB64LIBPTHREAD.SO.0[0X314E8062F7]LIB64LIBC.SO.6(CLONE+0X6D)[0X314DCCE85D]080430 16:50:44 - MYSQLD GOT SIGNAL 11 ;THIS COULD BE BECAUSE YOU HIT A BUG. IT IS ALSO POSSIBLE THAT THIS BINARYOR ONE OF THE LIBRARIES IT WAS LINKED AGAINST IS CORRUPT, IMPROPERLY BUILT,OR MISCONFIGURED. THIS ERROR CAN ALSO BE CAUSED BY MALFUNCTIONING HARDWARE.WE WILL TRY OUR BEST TO SCRAPE UP SOME INFO THAT WILL HOPEFULLY HELP DIAGNOSETHE PROBLEM, BUT SINCE WE HAVE ALREADY CRASHED, SOMETHING IS DEFINITELY WRONGAND THIS MAY FAIL.KEY_BUFFER_SIZE=8388600READ_BUFFER_SIZE=2097152MAX_USED_CONNECTIONS=2MAX_THREADS=200THREADS_CONNECTED=1IT IS POSSIBLE THAT MYSQLD COULD USE UP TOKEY_BUFFER_SIZE + (READ_BUFFER_SIZE + SORT_BUFFER_SIZE)*MAX_THREADS = 2058199 KBYTES OF MEMORYHOPE THATS OK; IF NOT, DECREASE SOME VARIABLES IN THE EQUATION.THD: 0X35E11A20ATTEMPTING BACKTRACE. YOU CAN USE THE FOLLOWING INFORMATION TO FIND OUTWHERE MYSQLD DIED. IF YOU SEE NO MESSAGES AFTER THIS, SOMETHING WENTTERRIBLY WRONG...TRYING TO GET SOME VARIABLES.SOME POINTERS MAY BE INVALID AND CAUSE THE DUMP TO ABORT...THD->QUERY AT 0X35E48B14 = INSERT INTO `DW_TOPIC_DIM` (`NAME`, `POSTING_QUARTILE`, `CUSIP`, `EXCHANGE_ID`, `INDUSTRY`, `SYMBOL`, `START_DATE_ID`, `TYPE`, `ACTIVE_FLAG`, `EXCHANGE`, `MARKET_CAP`, `ETF_FLAG`, `AUTO_CAT`, `SECTOR`) VALUES(CHOCOLATE SLAVERY, NULL, , NULL, NULL, CHOCOLATESLAVER, 20080430, THEME, T, NULL, NULL, NULL, 1, )THD->THREAD_ID=383THD->KILLED=NOT_KILLEDTHE MANUAL PAGE AT HTTP:DEV.MYSQL.COMDOCMYSQLENCRASHING.HTML CONTAINSINFORMATION THAT SHOULD HELP YOU FIND OUT WHAT IS CAUSING THE CRASH.080430 16:50:44 MYSQLD_SAFE NUMBER OF PROCESSES RUNNING NOW: 0080430 16:50:44 MYSQLD_SAFE MYSQLD RESTARTEDINNODB: LOG SCAN PROGRESSED PAST THE CHECKPOINT LSN 1159 1609320313080430 16:50:51  INNODB: DATABASE WAS NOT SHUT DOWN NORMALLY!INNODB: STARTING CRASH RECOVERY.INNODB: READING TABLESPACE INFORMATION FROM THE .IBD FILES...INNODB: RESTORING POSSIBLE HALF-WRITTEN DATA PAGES FROM THE DOUBLEWRITEINNODB: BUFFER...INNODB: DOING RECOVERY: SCANNED UP TO LOG SEQUENCE NUMBER 1159 1614562816[...]INNODB: DOING RECOVERY: SCANNED UP TO LOG SEQUENCE NUMBER 1159 2352772735080430 16:53:39  INNODB: STARTING AN APPLY BATCH OF LOG RECORDS TO THE DATABASE...INNODB: PROGRESS IN PERCENTS: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 INNODB: APPLY BATCH COMPLETEDINNODB: IN A MYSQL REPLICATION SLAVE THE LAST MASTER BINLOG FILEINNODB: POSITION 0 304, FILE NAME MYSQL-BIN.000518 INNODB: LAST MYSQL BINLOG FILE POSITION 0 354642998, FILE NAME .MYSQL-BIN.000005080430 17:06:08  INNODB: STARTED; LOG SEQUENCE NUMBER 1159 2352772735080430 17:06:08 [NOTE] RECOVERING AFTER A CRASH USING MYSQL-BIN080430 17:06:10 [NOTE] STARTING CRASH RECOVERY...080430 17:06:10 [NOTE] CRASH RECOVERY FINISHED.080430 17:06:10 [NOTE] EVENT SCHEDULER: LOADED 0 EVENTS080430 17:06:10 [NOTE] USRSBINMYSQLD: READY FOR CONNECTIONS.VERSION: 5.1.24-RC-COMMUNITY-LOG  SOCKET: VARLIBMYSQLMYSQL.SOCK  PORT: 3306  MYSQL COMMUNITY SERVER (GPL)080430 17:43:54 [NOTE] SLAVE SQL THREAD INITIALIZED, STARTING REPLICATION IN LOG MYSQL-BIN.000518 AT POSITION 864246105, RELAY LOG .RELAY-BIN.000012 POSITION: 360959689HOW TO REPEAT:1. UPGRADE 5.0 DATABASE TO 5.12. EXECUTE INSERT INTO TABLE WITH INSERT TRIGGER ","SUMMARY":"BUGU00A0#36443  SERVER CRASHES WHEN EXECUTING INSERT WHEN INSERT TRIGGER ON TABLE ","CLASS":1}
{"ID_DEFECT":"36763","DESCRIPTION":"     [16 MAY 2008 18:45]   TIM CLARK          DESCRIPTION:THERE MAY BE A COUPLE OF BUGS (OR AT LEAST DOCUMENTATION ISSUES) HERE. IM NOT COMPLETELY SURE WHAT THE CORRECT BEHAVIOR IS SUPPOSED TO BE.IN THE PROCESS OF DEVELOPING A STORAGE ENGINE THAT ONLY SUPPORTS ROW-BASED REPLICATION, I DISCOVERED THAT TRUNCATE TABLE IS NOT REPLICATED FOR TABLES BELONGING TO THAT STORAGE ENGINE WHEN THE BINLOG_FORMAT IS MIXED. HOWEVER, THIS IS NOT REPORTED TO THE USER (AS IT WOULD BE IF THE BINLOG_FORMAT WERE STATEMENT). THE TRUNCATE SUCCEEDS WITHOUT ERROR OR WARNING ON THE MASTER BUT IS NEVER REPLICATED TO THE SLAVE.HOW TO REPEAT:THIS CAN BE REPRODUCED WITH INNODB BY SETTING THE TRANSACTION ISOLATION LEVEL TO READ UNCOMMITTED, SINCE THAT FORCES INNODB TO NOT SUPPORT STATEMENT-BASED LOGGING. HOWEVER, THE SAME BEHAVIOR CAN BE SEEN ON ANY STORAGE ENGINE THAT ONLY SUPPORTS ROW-BASED LOGGING, REGARDLESS OF THE ISOLATION LEVEL.ASSUMING THAT MASTERSLAVE SERVERS HAVE BEEN SET UP FOR REPLICATION, THE FOLLOWING SEQUENCE WILL REPRODUCE THE PROBLEM.ON THE MASTER:MYSQL> SET BINLOG_FORMAT=MIXED;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> CREATE TABLE T3 (I INT) ENGINE=INNODB;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)MYSQL> INSERT INTO T3 VALUES(1),(2),(3);QUERY OK, 3 ROWS AFFECTED (0.02 SEC)RECORDS: 3  DUPLICATES: 0  WARNINGS: 0MYSQL> SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> TRUNCATE TABLE T3;QUERY OK, 3 ROWS AFFECTED (0.00 SEC)MYSQL> SELECT * FROM T3;EMPTY SET (0.01 SEC)NOW ON THE SLAVE, WHICH SHOULD ALSO RETURN THE EMPTY SET:MYSQL> SELECT * FROM T3;+------+| I    |+------+|    1 ||    2 ||    3 |+------+3 ROWS IN SET (0.00 SEC)SUGGESTED FIX:I SUSPECT THAT ROW-LOGGING-ONLY STORAGE ENGINES SHOULD NOT BE PERMITTED TO WORK IN A BINLOG_FORMAT=MIXED ENVIRONMENT. THEREFORE, I WOULD EXPECT TO SEE AN ERROR AS I WOULD WHEN BINLOG_FORMAT=STATEMENT: ERROR 1598 (HY000): BINARY LOGGING NOT POSSIBLE. MESSAGE: STATEMENT-BASED FORMAT REQUIRED FOR THIS STATEMENT, BUT NOT ALLOWED BY THIS COMBINATION OF ENGINES ","SUMMARY":"BUGU00A0#36763  TRUNCATE TABLE FAILS TO REPLICATE WHEN STMT-BASED BINLOGGING IS NOT SUPPORTED. ","CLASS":1}
{"ID_DEFECT":"38174","DESCRIPTION":"     [16 JUL 2008 14:50]   PHILIP STOEV          DESCRIPTION:IF SECURE-FILE-PRIV IS SET ON SLAVE, IT BECOMES UNABLE TO EXECUTE LOAD DATA INFILE STATEMENTS SENT FROM MASTER USING STATEMENT-BASED REPLICATION.THE SLAVE ERROR LOG SAYS:080716 17:45:14 [ERROR] SLAVE SQL: ERROR THE MYSQL SERVER IS RUNNING WITH THE --SECURE-FILE-PRIV OPTION SO IT CANNOT EXECUTE THIS STATEMENT ON QUERY. DEFAULT DATABASE: TEST. QUERY: LOAD DATA INFILE ..TMPSQL_LOAD-2-1-1.DATA REPLACE INTO TABLE C, ERROR_CODE: 1290080716 17:45:14 [WARNING] SLAVE: THE MYSQL SERVER IS RUNNING WITH THE --SECURE-FILE-PRIV OPTION SO IT CANNOT EXECUTE THIS STATEMENT ERROR_CODE: 1290080716 17:45:14 [ERROR] ERROR RUNNING QUERY, SLAVE SQL THREAD ABORTED. FIX THE PROBLEM, AND RESTART THE SLAVE SQL THREAD WITH SLAVE START. WE STOPPED AT LOG MASTER-BIN.000001 POSITION 1056775.1 DOES NOT APPEAR TO BE AFFECTED.HOW TO REPEAT:A TEST CASE WILL BE UPLOADED SHORTLY.SUGGESTED FIX:IT APPEARS THAT THE SLAVE THREAD PLACES THE DATA OBTAINED FROM THE MASTER IN A TEMPORARY FILE IN A DIRECTORY NAMED ..TMP (?), WHICH IS NOT THE ONE SPECIFIED WITH --SECURE-FILE-PRIV. THE SOLUTION WOULD BE TO PLACE THE TEMP FILES IN THE ALLOWED DIRECTORY ANDOR PERMANENTLY ALLOW THAT OTHER DIRECTORY AS WELL. ","SUMMARY":"BUGU00A0#38174  SECURE-FILE-PRIV BREAKS LOAD DATA INFILE REPLICATION IN STATEMENT MODE ","CLASS":1}
{"ID_DEFECT":"38197","DESCRIPTION":"     [17 JUL 2008 14:09]   SVEN SANDBERG          DESCRIPTION:SOME ERRORS THAT CAUSE THE SLAVE SQL THREAD TO STOP ARE NOT SHOWN IN THE SLAVE_SQL_ERROR COLUMN OF SHOW SLAVE STATUS. INSTEAD, THE ERROR IS ONLY IN THE SERVERS ERROR LOG.THAT MAKES IT DIFFICULT TO ANALYZE THE ERROR FOR THE USER. IN PARTICULAR, WHEN ERRORS HAPPEN IN PUSHBUILD, THE SERVER LOGS ARE OFTEN REMOVED, WHEREAS A SLAVE THAT GETS AN UNEXPECTED ERROR USUALLY ISSUES SHOW SLAVE STATUS SO THAT THE ERROR IS PART OF THE OUTPUT FROM THE TEST.ONE EXAMPLE OF AN ERROR THAT STOPS THE SLAVE BUT IS NOT SHOWN BY SHOW SLAVE STATUS IS WHEN @@GLOBAL.INIT_SLAVE IS SET INCORRECTLY (E.G., IT CONTAINS SOMETHING THAT IS NOT VALID SQL).HOW TO REPEAT:EITHER INSPECT THE CODE OR RUN THIS TEST CASE:--------- BEGIN TEST CASE ---------SOURCE INCLUDEMASTER-SLAVE.INC;CONNECTION SLAVE;STOP SLAVE;SOURCE INCLUDEWAIT_FOR_SLAVE_TO_STOP.INC;# PRODUCE AN ERRORSET @@GLOBAL.INIT_SLAVE = GARBAGE;START SLAVE;SOURCE INCLUDEWAIT_FOR_SLAVE_SQL_TO_STOP.INC;QUERY_VERTICAL SHOW SLAVE STATUS;--------- END TEST CASE ---------SUGGESTED FIX:REPLACE CALLS TO SQL_PRINT_ERROR() BY CALLS TO RLI->REPORT() IN SLAVE.CC:HANDLE_SLAVE_SQL() ","SUMMARY":"BUGU00A0#38197  ERRORS IN @@INIT_SLAVE NOT VISIBLE IN SHOW SLAVE STATUS ","CLASS":1}
{"ID_DEFECT":"38205","DESCRIPTION":"     [17 JUL 2008 16:44]   ERIC JENSEN          DESCRIPTION:I CANT STOP AND START THE REPLICATION AT ALL WITHOUT BREAKING THEREPLICATION. IF I DO STOP SLAVE AND THEN START SLAVE AGAIN ITIMMEDIATELY HAS AN ERROR LIKE THIS, SEEMINGLY FOR RANDOM TABLES THATHAVE BEEN WRITTEN TO (NOT ONE IN PARTICULAR):COULD NOT EXECUTE WRITE_ROWS EVENT ON TABLEXXX; DUPLICATE ENTRYYYY FOR KEY ZZZ,ERROR_CODE: 1062; HANDLER ERROR HA_ERR_FOUND_DUPP_KEY; THE EVENTSMASTER LOG BINLOG.000003, END_LOG_POS 704849 IN MY APP, IM DOING LOTS OF BATCHED, LARGE INSERT VALUES ... STATEMENTS INTO MYISAM TABLES THAT TAKE THE BULK OF THE TIME, SO ITS TOUGH TO BE ABLE TO STOP REPLICATION AND NOT HIT THE MIDDLE OF ONE OF THEM.  IS IT THE CASE THAT WITH A NON-TRANSACTIONAL ENGINE, IT IS IMPOSSIBLE TO GUARANTEE THAT STOPPING AND STARTING RBR WONT BREAK REPLICATION THEN?  THE PREVIOUS CONVERSATIONS BELOW SEEMED TO SUGGEST THIS...THERE ARE A FEW RBR INCONSISTENCY BUGS FLOATING AROUND THAT MAY EXPLAIN THIS, ALTHOUGH NONE OF THEM SUGGEST THIS HAPPENS ON EVERY STOPSTART SLAVE, AND NONE TOUCH ON THIS DOCUMENTATION ISSUE:  HTTP:BUGS.MYSQL.COMSEARCH.PHP?SEARCH_FOR=&STATUS=ACTIVE&SEVERITY=&LIMIT=90&ORDER_BY=PRI...I REALIZE THIS IS NOT A WELL-ENCAPSULATED BUG REPORT.  I ORIGINALLY INQUIRED ABOUT IT ON A FEW PLACES:HTTP:LISTS.MYSQL.COMREPLICATION1335 HTTP:FORUMS.MYSQL.COMREAD.PHP?26,216227,216227HTTP:BUGS.MYSQL.COMBUG.PHP?ID=36826BUT RECEIVED NO RESPONSE.  IT IS PREVENTING ME FROM UPGRADING TO 5.1.  SHOULDNT THE LISTS AND FORUMS BE MERGED?HOW TO REPEAT:WHILE DOING LARGE BATCHED INSERTS ON THE MASTER USING EITHER ROW OR MIXED LOG FORMAT, STOP AND START THE SLAVE.  I ALSO HAD THIS PROBLEM WHEN TRYING 5.1.24 ","SUMMARY":"BUGU00A0#38205  ROW-BASED REPLICATION (RBR) CAUSES INCONSISTENCIES: HA_ERR_FOUND_DUPP_KEY ","CLASS":1}
{"ID_DEFECT":"38734","DESCRIPTION":"     [12 AUG 2008 3:37]   ZHENXING HE          DESCRIPTION:RPL_SERVER_ID2 TEST FAILED:MYSQLTEST: AT LINE 18: SYNC_WITH_MASTER FAILED: SELECT MASTER_POS_WAIT(SLAVE-BIN.000001, 194, 300) RETURNED NULL INDICATING SLAVE SQL THREAD FAILUREHOW TO REPEAT:HTTPS:INTRANET.MYSQL.COMSECUREPUSHBUILDGETLOG.PL?DIR=BZR_MYSQL-5.1-RPL&ENTRY=MAGNUS_S... ","SUMMARY":"BUGU00A0#38734  RPL_SERVER_ID2 SYNC_WITH_MASTER FAILED ","CLASS":1}
{"ID_DEFECT":"38798","DESCRIPTION":"     [14 AUG 2008 13:36]   PHILIP STOEV          DESCRIPTION:WHEN EXECUTING A CONCURRENT WORKLOAD MEANT TO TEST REPLICATION, THE MASTER ASSERTED AS FOLLOWS:#8  0X003DF57E IN __ASSERT_FAIL () FROM LIBLIBC.SO.6#9  0X082FF973 IN BINLOG_TRANS_LOG_SAVEPOS (THD=0X93C0DC0, POS=0XB2B87EA8) AT LOG.CC:1272#10 0X082FFA13 IN THD::BINLOG_SET_STMT_BEGIN (THIS=0X93C0DC0) AT LOG.CC:3652#11 0X082FFB19 IN THD::BINLOG_START_TRANS_AND_STMT (THIS=0X93C0DC0) AT LOG.CC:3623#12 0X082DC67E IN SELECT_CREATE::PREPARE (THIS=0X93D1BC8, VALUES=@0X93C21BC, U=0X93C1EB0) AT SQL_INSERT.CC:3528#13 0X082D43B5 IN JOIN::PREPARE (THIS=0X93D1C60, RREF_POINTER_ARRAY=0X93C2220, TABLES_INIT=0X93D19D0, WILD_NUM=1, CONDS_INIT=0X0, OG_NUM=0, ORDER_INIT=0X0,    GROUP_INIT=0X0, HAVING_INIT=0X0, PROC_PARAM_INIT=0X0, SELECT_LEX_ARG=0X93C2128, UNIT_ARG=0X93C1EB0) AT SQL_SELECT.CC:629#14 0X082D47AE IN MYSQL_SELECT (THD=0X93C0DC0, RREF_POINTER_ARRAY=0X93C2220, TABLES=0X93D19D0, WILD_NUM=1, FIELDS=@0X93C21BC, CONDS=0X0, OG_NUM=0,    ORDER=0X0, GROUP=0X0, HAVING=0X0, PROC_PARAM=0X0, SELECT_OPTIONS=2416200192, RESULT=0X93D1BC8, UNIT=0X93C1EB0, SELECT_LEX=0X93C2128)    AT SQL_SELECT.CC:2338#15 0X082D9524 IN HANDLE_SELECT (THD=0X93C0DC0, LEX=0X93C1E54, RESULT=0X93D1BC8, SETUP_TABLES_DONE_OPTION=0) AT SQL_SELECT.CC:269#16 0X08257E5C IN MYSQL_EXECUTE_COMMAND (THD=0X93C0DC0) AT SQL_PARSE.CC:2503#17 0X0825F95C IN MYSQL_PARSE (THD=0X93C0DC0, INBUF=0X93D1650 CREATE TABLE N SELECT * FROM O ; TRUNCATE TABLE N, LENGTH=49, FOUND_SEMICOLON=0XB2B8925C)    AT SQL_PARSE.CC:5650#18 0X08260533 IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0X93C0DC0, PACKET=0X93C55C9 CREATE TABLE N SELECT * FROM O ; TRUNCATE TABLE N, PACKET_LENGTH=49)    AT SQL_PARSE.CC:1137#19 0X08261692 IN DO_COMMAND (THD=0X93C0DC0) AT SQL_PARSE.CC:794#20 0X0824EDE6 IN HANDLE_ONE_CONNECTION (ARG=0X93C0DC0) AT SQL_CONNECT.CC:1115#21 0X0057D32F IN START_THREAD () FROM LIBLIBPTHREAD.SO.0#22 0X0049A27E IN CLONE () FROM LIBLIBC.SO.6(GDB) LIST1267      DBUG_ASSERT(POS != NULL);1268      IF (THD_GET_HA_DATA(THD, BINLOG_HTON) == NULL)1269        THD->BINLOG_SETUP_TRX_DATA();1270      BINLOG_TRX_DATA *CONST TRX_DATA=1271        (BINLOG_TRX_DATA*) THD_GET_HA_DATA(THD, BINLOG_HTON);1272      DBUG_ASSERT(MYSQL_BIN_LOG.IS_OPEN()); <<<<<< HERE1273      *POS= TRX_DATA->POSITION();1274      DBUG_PRINT(RETURN, (*POS: %LU, (ULONG) *POS));1275      DBUG_VOID_RETURN;1276    (GDB) PRINT MYSQL_BIN_LOG.IS_OPEN$6 = BOOL (MYSQL_LOG *) 0X81BB18A <MYSQL_LOG::IS_OPEN()>(GDB) PRINT (BOOL) MYSQL_BIN_LOG.IS_OPEN$7 = FALSEHOW TO REPEAT:THIS BUG IS REPEATABLE, A TEST CASE WILL BE UPLOADED SHORTLY. ","SUMMARY":"BUGU00A0#38798  ASSERTION MYSQL_BIN_LOG.IS_OPEN() FAILED IN BINLOG_TRANS_LOG_SAVEPOS() ","CLASS":1}
{"ID_DEFECT":"39393","DESCRIPTION":"     [11 SEP 2008 13:13]   CYRIL SCETBON          DESCRIPTION:WHEN USING SBR SLAVE-SKIP-ERRORS WORKS BUT NOT IN RBR MODEHOW TO REPEAT:ON THE MASTER :MASTER [LOCALHOST] MSANDBOX (TEST) > SET SQL_LOG_BIN=0;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > DELETE FROM TOTO WHERE ID IN (103072);QUERY OK, 1 ROW AFFECTED (0.06 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > DELETE FROM TOTO WHERE ID IN (359181);QUERY OK, 1 ROW AFFECTED (0.06 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > DELETE FROM TOTO WHERE ID IN (545417,43442,430833);QUERY OK, 3 ROWS AFFECTED (0.03 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > SELECT COUNT(*) FROM TOTO;+----------+| COUNT(*) |+----------+|     4812 |+----------+1 ROW IN SET (0.01 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > BYEMYSQL:USRLOCALMYSQLSANDBOX_DIR# ..5.1.26BINMYSQL --DEFAULTS-FILE=USRLOCALMYSQLSANDBOX_DIRRSANDBOX_5_1_26MASTERMY.SANDBOX.CNF TESTREADING TABLE INFORMATION FOR COMPLETION OF TABLE AND COLUMN NAMESYOU CAN TURN OFF THIS FEATURE TO GET A QUICKER STARTUP WITH -AWELCOME TO THE MYSQL MONITOR.  COMMANDS END WITH ; OR .YOUR MYSQL CONNECTION ID IS 3SERVER VERSION: 5.1.26-RC-LOG MYSQL COMMUNITY SERVER (GPL)TYPE HELP; OR H FOR HELP. TYPE C TO CLEAR THE BUFFER.MASTER [LOCALHOST] MSANDBOX (TEST) > SELECT COUNT(*) FROM TOTO;+----------+| COUNT(*) |+----------+|     4812 |+----------+1 ROW IN SET (0.00 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > INSERT INTO TOTO VALUES(103072);QUERY OK, 1 ROW AFFECTED (0.00 SEC)ON THE SLAVE :SLAVE1 [LOCALHOST] MSANDBOX (TEST) > SHOW SLAVE STATUS*************************** 1. ROW ***************************               SLAVE_IO_STATE: WAITING FOR MASTER TO SEND EVENT                  MASTER_HOST: 127.0.0.1                  MASTER_USER: MSANDBOX                  MASTER_PORT: 21341                CONNECT_RETRY: 60              MASTER_LOG_FILE: MYSQL-BIN.000005          READ_MASTER_LOG_POS: 320               RELAY_LOG_FILE: MYSQL_SANDBOX21342-RELAY-BIN.000013                RELAY_LOG_POS: 251        RELAY_MASTER_LOG_FILE: MYSQL-BIN.000005             SLAVE_IO_RUNNING: YES            SLAVE_SQL_RUNNING: NO              REPLICATE_DO_DB:           REPLICATE_IGNORE_DB:            REPLICATE_DO_TABLE:        REPLICATE_IGNORE_TABLE:       REPLICATE_WILD_DO_TABLE:   REPLICATE_WILD_IGNORE_TABLE:                    LAST_ERRNO: 1062                   LAST_ERROR: COULD NOT EXECUTE WRITE_ROWS EVENT ON TABLE TEST.TOTO; DUPLICATE ENTRY 103072 FOR KEY PRIMARY, ERROR_CODE: 1062; HANDLER ERROR HA_ERR_FOUND_DUPP_KEY; THE EVENTS MASTER LOG MYSQL-BIN.000005, END_LOG_POS 251                 SKIP_COUNTER: 0          EXEC_MASTER_LOG_POS: 106              RELAY_LOG_SPACE: 676              UNTIL_CONDITION: NONE               UNTIL_LOG_FILE:                 UNTIL_LOG_POS: 0           MASTER_SSL_ALLOWED: NO           MASTER_SSL_CA_FILE:            MASTER_SSL_CA_PATH:               MASTER_SSL_CERT:             MASTER_SSL_CIPHER:                MASTER_SSL_KEY:         SECONDS_BEHIND_MASTER: NULLMASTER_SSL_VERIFY_SERVER_CERT: NO                LAST_IO_ERRNO: 0                LAST_IO_ERROR:                LAST_SQL_ERRNO: 1062               LAST_SQL_ERROR: COULD NOT EXECUTE WRITE_ROWS EVENT ON TABLE TEST.TOTO; DUPLICATE ENTRY 103072 FOR KEY PRIMARY, ERROR_CODE: 1062; HANDLER ERROR HA_ERR_FOUND_DUPP_KEY; THE EVENTS MASTER LOG MYSQL-BIN.000005, END_LOG_POS 2511 ROW IN SET (0.01 SEC)SLAVE1 [LOCALHOST] MSANDBOX (TEST) > SHOW GLOBAL VARIABLES LIKE SLAVE_SKIP_ERRORS;+-------------------+-------+| VARIABLE_NAME     | VALUE |+-------------------+-------+| SLAVE_SKIP_ERRORS | ALL   | +-------------------+-------+1 ROW IN SET (0.01 SEC) ","SUMMARY":"BUGU00A0#39393  SLAVE-SKIP-ERRORS DOES NOT WORK WHEN USING ROW BASED REPLICATION ","CLASS":1}
{"ID_DEFECT":"39526","DESCRIPTION":"     [18 SEP 2008 19:18]   SCOTT NOYES          DESCRIPTION:CREATING A PROCEDURE USING ANSI_QUOTES DOES NOT PASS THAT SQL_MODE CORRECTLY TO THE BINARY LOG, RESULTING IN AN ERROR ON THE SLAVE.HOW TO REPEAT:ON THE MASTER:SET SQL_MODE=ANSI_QUOTES;CREATE TABLE T1 (ID INT);CREATE PROCEDURE TESTPROC() SELECT * FROM T1;IT DOES NOT MATTER IF THE SLAVE HAS ANSI_QUOTES SET OR NOT, BECAUSE THE BINARY LOG CONTAINS THE WRONG SETTING. NOTE HOW IT IS CORRECTLY SET TO 4 BEFORE THE CREATE TABLE, BUT THEN INCORRECTLY SET BACK TO 0 BEFORE THE CREATE PROCEDURE:# AT 580#080918 14:08:45 SERVER ID 5128  END_LOG_POS 667        QUERY   THREAD_ID=1     EXEC_TIME=0     ERROR_CODE=0SET TIMESTAMP=1221764925*!*;SET @@SESSION.SQL_MODE=4*!*;CREATE TABLE T1 (ID INT)*!*;# AT 667#080918 14:08:59 SERVER ID 5128  END_LOG_POS 805        QUERY   THREAD_ID=1     EXEC_TIME=0     ERROR_CODE=0SET TIMESTAMP=1221764939*!*;SET @@SESSION.SQL_MODE=0*!*;CREATE DEFINER=`ROOT`@`LOCALHOST` PROCEDURE `TESTPROC`()SELECT * FROM T1*!*;SUGGESTED FIX:MAKE SURE THE CORRECT SQL_MODE IS SET CORRECTLY IN THE BINARY LOG ","SUMMARY":"BUGU00A0#39526  SQL_MODE NOT RETAINED IN BINARY LOG FOR CREATE PROCEDURE ","CLASS":1}
{"ID_DEFECT":"40482","DESCRIPTION":"     [3 NOV 2008 16:45]   SVEN SANDBERG          DESCRIPTION:WHEN THE SERVER READS A BINLOG WITH AN INCIDENT_LOG_EVENT CONTAINING AN INVALID INCIDENT NUMBER, AND DEBUG MODE IS ON, IT RAISES AN ASSERTION.MOREOVER, THE ASSERTION CAUSES A COMPILER WARNING WITH THIS VERSION OF GCC:C++ COMPILER VERSION... G++ G++ (GCC) 4.1.2 20071124 (RED HAT 4.1.2-42)ON 64 BIT LINUX.HOW TO REPEAT:SOURCE INCLUDEHAVE_LOG_BIN.INC;SOURCE INCLUDEHAVE_DEBUG.INC;EXEC $MYSQL_BINLOG < $MYSQL_TEST_DIRSTD_DATABUG-BIN.000001;ILL UPLOAD BUG-BIN.000001 SHORTLY.SUGGESTED FIX:DONT USE ASSERTIONS TO VALIDATE INPUT, USE ERRORS:=== MODIFIED FILE SQLLOG_EVENT.CC--- SQLLOG_EVENT.CCT2008-10-23 19:27:09 +0000+++ SQLLOG_EVENT.CCT2008-11-03 16:11:06 +0000@@ -9035,7 +9035,17 @@ INCIDENT_LOG_EVENT::INCIDENT_LOG_EVENT(C   DBUG_PRINT(INFO,(EVENT_LEN: %U; COMMON_HEADER_LEN: %D; POST_HEADER_LEN: %D,                      EVENT_LEN, COMMON_HEADER_LEN, POST_HEADER_LEN)); -  M_INCIDENT= STATIC_CAST<INCIDENT>(UINT2KORR(BUF + COMMON_HEADER_LEN));+  INT INCIDENT_NUMBER= UINT2KORR(BUF + COMMON_HEADER_LEN);+  IF (INCIDENT_NUMBER >= (INT)INCIDENT_COUNT ||+      INCIDENT_NUMBER <= (INT)INCIDENT_NONE)+  +     IF THE INCIDENT IS NOT RECOGNIZED, THIS BINLOG EVENT IS+     INVALID.  IF WE SET INCIDENT_NUMBER TO INCIDENT_NONE, THE+     INVALIDITY WILL BE DETECTED BY IS_VALID().+    INCIDENT_NUMBER= INCIDENT_NONE;+    DBUG_VOID_RETURN;+  +  M_INCIDENT= STATIC_CAST<INCIDENT>(INCIDENT_NUMBER);   CHAR CONST *PTR= BUF + COMMON_HEADER_LEN + POST_HEADER_LEN;   CHAR CONST *CONST STR_END= BUF + EVENT_LEN;   UINT8 LEN= 0;                    ASSIGNMENT TO KEEP COMPILER HAPPY@@ -9063,9 +9073,6 @@ INCIDENT_LOG_EVENT::DESCRIPTION() CONST    DBUG_PRINT(INFO, (M_INCIDENT: %D, M_INCIDENT)); -  DBUG_ASSERT(0 <= M_INCIDENT);-  DBUG_ASSERT((SIZE_T) M_INCIDENT <= SIZEOF(DESCRIPTION)SIZEOF(*DESCRIPTION));-   RETURN DESCRIPTION[M_INCIDENT];  === MODIFIED FILE SQLLOG_EVENT.H--- SQLLOG_EVENT.HT2008-09-29 05:36:42 +0000+++ SQLLOG_EVENT.HT2008-11-03 16:11:22 +0000@@ -3886,7 +3886,10 @@ PUBLIC:    VIRTUAL LOG_EVENT_TYPE GET_TYPE_CODE()  RETURN INCIDENT_EVENT;  -  VIRTUAL BOOL IS_VALID() CONST  RETURN 1; +  VIRTUAL BOOL IS_VALID() CONST+  +    RETURN (INT)M_INCIDENT > INCIDENT_NONE && (INT)M_INCIDENT < INCIDENT_COUNT;+     VIRTUAL INT GET_DATA_SIZE()      RETURN INCIDENT_HEADER_LEN + 1 + M_MESSAGE.LENGTH;   === MODIFIED FILE SQLRPL_CONSTANTS.H--- SQLRPL_CONSTANTS.HT2007-03-29 18:31:09 +0000+++ SQLRPL_CONSTANTS.HT2008-11-03 16:05:08 +0000@@ -6,10 +6,10 @@  * ENUM INCIDENT    ** NO INCIDENT *-  INCIDENT_NONE,+  INCIDENT_NONE = 0,    ** THERE ARE POSSIBLY LOST EVENTS IN THE REPLICATION STREAM *-  INCIDENT_LOST_EVENTS,+  INCIDENT_LOST_EVENTS = 1,    ** SHALL BE LAST EVENT OF THE ENUMERATION *   INCIDENT_COUNT ","SUMMARY":"BUGU00A0#40482  SERVERMYSQLBINLOG CRASHES WHEN READING INVALID INCIDENT_LOG_EVENT ","CLASS":1}
{"ID_DEFECT":"41166","DESCRIPTION":"     [2 DEC 2008 8:04]   DEVANANDA VAN DER VEEN          DESCRIPTION:THERE ARE REALLY TWO ERRORS HERE, AND IM NOT SURE HOW THEY ARE RELATED.1) MANUAL PAGE HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENSTORED-PROGRAMS-LOGGING.HTML STATES THAT ONE MUST SPECIFY AT LEAST ONE OF DETERMINISTIC, NO SQL, OR READS SQL DATA, BUT IN 5.1.28 AND 5.1.30, WHEN @@BINLOG_FORMAT IS STATEMENT, THE SERVER REFUSES TO EXECUTE A STORED FUNCTION IF DETERMINISTIC IS NOT SPECIFIED (EVEN IF READS SQL DATA IS SPECIFIED). THE FUNCTION CALL WORKS IF @@BINLOG_FORMAT IS MIXED OR THE FUNCTION IS DEFINED AS DETERMINISTIC.2) WHEN THE ABOVE ERROR HAPPENS, THE SERVER CLAIMSERROR 1536 (HY000): SLAVE RUNNING WITH --LOG-SLAVE-UPDATES MUST USE ROW-BASED BINARY LOGGING TO BE ABLE TO REPLICATE ROW-BASED BINARY LOG EVENTSEVEN WHEN --LOG-SLAVE-UPDATES IS NOT ENABLED AND THE SLAVE PROCESS IS NOT CONFIGURED.HERE IS TRANSCRIPT OF ERROR HAPPENING ON A TEST MACHINE, RHEL 4 I386, 5.1.30, LOG SLAVE UPDATES OFF, AND SLAVE PROCESS UNCONFIGURED. SAME ERROR (AND SAME ERROR MESSAGE) HAPPENED ON PRODUCTION MACHINE, RHEL 5 X86_64, 5.1.30, LOG SLAVE UPDATES ON, ACTIVE SLAVE.# MYSQL TESTREADING TABLE INFORMATION FOR COMPLETION OF TABLE AND COLUMN NAMESYOU CAN TURN OFF THIS FEATURE TO GET A QUICKER STARTUP WITH -AWELCOME TO THE MYSQL MONITOR.  COMMANDS END WITH ; OR .YOUR MYSQL CONNECTION ID IS 6SERVER VERSION: 5.1.30-COMMUNITY-LOG MYSQL COMMUNITY SERVER (GPL)TYPE HELP; OR H FOR HELP. TYPE C TO CLEAR THE BUFFER.LOCALHOST:TEST> DROP FUNCTION IF EXISTS MY_T;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)LOCALHOST:TEST> SHOW MASTER STATUS;+------------------+----------+--------------+------------------+| FILE             | POSITION | BINLOG_DO_DB | BINLOG_IGNORE_DB |+------------------+----------+--------------+------------------+| MYSQL-BIN.000019 |    19207 |              |                  |+------------------+----------+--------------+------------------+1 ROW IN SET (0.00 SEC)LOCALHOST:TEST> SHOW SLAVE STATUSEMPTY SET (0.00 SEC)LOCALHOST:TEST> SHOW VARIABLES LIKE LOG_SLAVE%;+-------------------+-------+| VARIABLE_NAME     | VALUE |+-------------------+-------+| LOG_SLAVE_UPDATES | OFF   |+-------------------+-------+1 ROW IN SET (0.00 SEC)LOCALHOST:TEST> SET @@BINLOG_FORMAT=STATEMENT;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)LOCALHOST:TEST> DELIMITER ;;LOCALHOST:TEST> CREATE FUNCTION MY_T(I INT) RETURNS INT READS SQL DATA BEGIN RETURN I * 2; END;;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)LOCALHOST:TEST> DELIMITER ;LOCALHOST:TEST> SELECT MY_T(1);ERROR 1536 (HY000): SLAVE RUNNING WITH --LOG-SLAVE-UPDATES MUST USE ROW-BASED BINARY LOGGING TO BE ABLE TO REPLICATE ROW-BASED BINARY LOG EVENTS-- THE FOLLOWING DEMONSTRATE WORKING CASESLOCALHOST:TEST> SET @@BINLOG_FORMAT=MIXED;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)LOCALHOST:TEST> SELECT MY_T(1);+---------+| MY_T(1) |+---------+|       2 |+---------+1 ROW IN SET (0.00 SEC)LOCALHOST:TEST> SET @@BINLOG_FORMAT=STATEMENT;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)LOCALHOST:TEST> DROP FUNCTION IF EXISTS MY_T;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)LOCALHOST:TEST> DELIMITER ;;LOCALHOST:TEST> CREATE FUNCTION MY_T(I INT) RETURNS INT DETERMINISTIC READS SQL DATA BEGIN RETURN I * 2; END;;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)LOCALHOST:TEST> DELIMITER ;LOCALHOST:TEST> SELECT MY_T(1);+---------+| MY_T(1) |+---------+|       2 |+---------+1 ROW IN SET (0.00 SEC)HOW TO REPEAT:SET @@BINLOG_FORMAT=STATEMENT;DROP FUNCTION IF EXISTS MY_T;DELIMITER ;;CREATE FUNCTION MY_T(I INT) RETURNS INT READS SQL DATA BEGIN RETURN I * 2; END;;DELIMITER ;SELECT MY_T(1);SUGGESTED FIX:1) ALLOW FUNCTION TO BE CALLED AND LOG THE STATEMENT APPROPRIATELY2) RETURN A PROPER OR MORE DESCRIPTIVE ERROR MESSAGE ","SUMMARY":"BUGU00A0#41166  STORED FUNCTION REQUIRES DETERMINISTIC IF BINLOG_FORMAT IS STATEMENT ","CLASS":1}
{"ID_DEFECT":"41961","DESCRIPTION":"     [8 JAN 2009 14:03]   SVEN SANDBERG          DESCRIPTION:EACH LOG_EVENT HAS A COMMON-HEADER, POST-HEADER, AND DATA SECTION. THE COMMON-HEADER LENGTH IS FIXED FOR ALL EVENT TYPES BUT MAY DIFFER BETWEEN SERVER VERSIONS (E.G,. 19 BYTES IN 5.1). THE POST-HEADER LENGTH IS THE SAME FOR ALL EVENTS OF A GIVEN TYPE AND SERVER VERSION, BUT MAY DIFFER FOR EVENTS OF DIFFERENT TYPES OR EVENTS GENERATED BY DIFFERENT SERVER VERSIONS. THE LENGTH OF THE DATA PART VARIES FROM EVENT TO EVENT.THE COMMON-HEADER AND POST-HEADER LENGTHS ARE DEFINED IN THE FORMAT_DESCRIPTION_LOG_EVENT, AND THE DATA LENGTH IS DEFINED IN EACH EVENT.WHEN AN EVENT IS READ FROM FILE (E.G., BY THE SLAVE IO THREAD FROM THE RELAY LOG, OR BY MYSQLBINLOG), AND THE SERVER THAT READS THE FILE HAS DIFFERENT LENGTHS OF THE TWO HEADERS THAN THE SERVER THAT WROTE THE FILE, THEN THE SERVER THAT READS THE FILE CAN USE THE INFORMATION IN FORMAT_DESCRIPTION_LOG_EVENT TO PARSE THE EVENT CORRECTLY.IN THE CURRENT IMPLEMENTATION, THE FOLLOWING EVENTS HAVE POST-HEADER LENGTH 0:  INTVAR_EVENT  RAND_EVENT  USER_VAR_EVENT  XID_EVENTHENCE, ALL THEIR DATA BELONGS TO THE DATA PART. HOWEVER, THE READER FUNCTIONS FOR THESE EVENTS DO *NOT* READ THE POST-HEADER LENGTH FROM THE FORMAT_DESCRIPTION_LOG_EVENT. SO IF A FUTURE SERVER VERSION ADDS BYTES TO THE POST-HEADER OF THESE EVENTS, THE CURRENT VERSION WILL NOT BE ABLE TO READ THE FUTURE VERSION. (THIS MAY HAPPEN, E.G., IF WE IMPLEMENT EVENT CHECKSUMS.)HOW TO REPEAT:READ THE CODESUGGESTED FIX:MAKE INTVAR, RAND, USER_VAR, AND XID SKIP THE POST-HEADER LENGTH BEFORE THEY READ THEIR DATA PARTS. ","SUMMARY":"BUGU00A0#41961  SOME LOG_EVENT TYPES DO NOT SKIP POST-HEADER WHEN READING ","CLASS":1}
{"ID_DEFECT":"41980","DESCRIPTION":"     [8 JAN 2009 20:10]   SERDAR S. KACAR          DESCRIPTION:EXCERPT :STATEMENT-BASED REPLICATION OF LIMIT CLAUSES IN DELETE, UPDATE, AND INSERT ... SELECT STATEMENTS IS UNSAFE SINCE THE ORDER OF THE ROWS AFFECTED IS NOT DEFINED. .. WHEN USING STATEMENT MODE, A WARNING THAT THE STATEMENT IS NOT SAFE FOR STATEMENT-BASED REPLICATION IS NOW ISSUED. THU0131S IS A CORRECT STATEMENT IF AND ONLY IF BINARY LOGGING IS ON.MOROVER, THE STATEMENT ASSERTS A WARNING IS ISSUED, NOT AN ERROR.HOWEVER, CURRENT IMPLEMENTATION DISREGARDS EFFECTIVE SQL_LOG_BIN STATE AND, AT LEAST FOR INSERT .. SELECT .. LIMIT STATEMENTS, THROWS STATEMENT IS NOT SAFE FOR STATEMENT-BASED REPLICATION IS NOW ISSUED. AS ERROR !HOW TO REPEAT:C:>MYSQL -U ROOT -PENTER PASSWORD:WELCOME TO THE MYSQL MONITOR.  COMMANDS END WITH ; OR .YOUR MYSQL CONNECTION ID IS 186SERVER VERSION: 5.1.30-COMMUNITY-LOG MYSQL COMMUNITY SERVER (GPL)TYPE HELP; OR H FOR HELP. TYPE C TO CLEAR THE BUFFER.MYSQL> USE TEST;DATABASE CHANGEDMYSQL> DROP TABLE IF EXISTS R1;QUERY OK, 0 ROWS AFFECTED, 1 WARNING (0.00 SEC)MYSQL> DROP TABLE IF EXISTS R2;QUERY OK, 0 ROWS AFFECTED, 1 WARNING (0.00 SEC)MYSQL> CREATE TABLE R1 (A INT PRIMARY KEY);QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> CREATE TABLE R2 (A INT PRIMARY KEY);QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> SET @@SQL_LOG_BIN = 0;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> SELECT @@SQL_LOG_BIN;+---------------+| @@SQL_LOG_BIN |+---------------+|             0 |+---------------+1 ROW IN SET (0.00 SEC)MYSQL> INSERT R1 SELECT * FROM R2 LIMIT 1;ERROR 1592 (HY000): STATEMENT IS NOT SAFE TO LOG IN STATEMENT FORMAT.MYSQL>SUGGESTED FIX:WHEN @@SESSION.SQL_LOG_BIN IS 0DO NOT ISSUE A WARNING OR AN ERROR THAT BEGINS WITH STATEMENT IS NOT SAFE TO LOG .. AND UPDATE THE DOCUMENTS. WE HAVE NOTHING TO DO WITH BINARY LOGGING IN THIS CASE.WHEN @@SESSION.SQL_LOG_BIN IS 1 CORRECT EITHER DOCUMENTATION OR IMPLEMENTATION REGARDING WARNINGERROR SELECTION. ","SUMMARY":"BUGU00A0#41980  SBL, INSERT .. SELECT .. LIMIT = ERROR, EVEN WHEN @@SQL_LOG_BIN IS 0 ! ","CLASS":1}
{"ID_DEFECT":"42829","DESCRIPTION":"     [13 FEB 2009 12:41]   NISHANT DESHPANDE          DESCRIPTION:I HAVE SCHEMAS S1, S2, S3.I SPECIFY IN MY.CNF:BINLOG-DO-DB = S1I EXPECT THAT S2 AND S3 WILL NOT BE BINLOGGED.BUT, IF I EXECUTE A STATEMENT ON S2S3 WHICH WOULD FAIL IF BINLOGGING WAS TURNED ON FOR THAT SCHEMA, I GET:ERROR 1598 (HY000): BINARY LOGGING NOT POSSIBLE. MESSAGE: TRANSACTION LEVEL READ-COMMITTED IN INNODB IS NOT SAFE FOR BINLOG MODE STATEMENTI WOULD EXPECT THIS *IF* I HAD ELECTED TO BINLOG THE SCHEMA ON WHICH I AM CARRYING OUT THIS STATEMENT.HOW TO REPEAT:[MY.CNF]TRANSACTION-ISOLATION   = READ-COMMITTEDBINLOG-DO-DB = S1===========================MYSQL> CREATE SCHEMA S2;MYSQL> CREATE TABLE T1 (X INT, Y INT);MYSQL> CREATE TABLE T2 (X INT, Y INT);MYSQL> INSERT INTO T1 SELECT * FROM T2;ERROR 1598 (HY000): BINARY LOGGING NOT POSSIBLE. MESSAGE: TRANSACTION LEVEL READ-COMMITTED IN INNODB IS NOT SAFE FOR BINLOG MODE STATEMENTSUGGESTED FIX:THIS SEEMS A REGRESSION AND DOES NOT CONFORM TO STATED FUNCTIONALITY ON THE USE OF BINLOG-DO-DB (OR BINLOG-IGNORE-DB EITHER IF I PUT THAT IN ABOVE). ","SUMMARY":"BUGU00A0#42829  BINLOGGING ENABLED FOR ALL SCHEMAS REGARDLESS OF BINLOG-DB-DB  BINLOG-IGNORE-DB ","CLASS":1}
{"ID_DEFECT":"42861","DESCRIPTION":"     [14 FEB 2009 19:30]   ALFRANIO CORREIA          DESCRIPTION:THIS ASSERTION FAILS WHEN THE --SLAVE-LOAD-TMPDIR IS NOT PROPERLY DEFINED (E.G.PERMISSION PROBLEMS, NONEXISTENT DIRECTORY, ETC):  #0  0XB8040430 IN __KERNEL_VSYSCALL ()                                                                 #0  0XB8040430 IN __KERNEL_VSYSCALL ()                                                                 #1  0XB8003158 IN PTHREAD_KILL () FROM LIBTLSI686CMOVLIBPTHREAD.SO.0                              #2  0X0871A949 IN MY_WRITE_CORE (SIG=6) AT STACKTRACE.C:310                                            #3  0X082BDDE8 IN HANDLE_SEGFAULT (SIG=6) AT MYSQLD.CC:2505                                            #4  <SIGNAL HANDLER CALLED>                                                                            #5  0XB8040430 IN __KERNEL_VSYSCALL ()                                                                 #6  0XB7E398A0 IN RAISE () FROM LIBTLSI686CMOVLIBC.SO.6                                           #7  0XB7E3B268 IN ABORT () FROM LIBTLSI686CMOVLIBC.SO.6                                           #8  0XB7E3272E IN __ASSERT_FAIL () FROM LIBTLSI686CMOVLIBC.SO.6                                   #9  0X082A5983 IN DIAGNOSTICS_AREA::SET_ERROR_STATUS (THIS=0X9BBF88C, THD=0X9BBEAE0,SQL_ERRNO_ARG=1,       MESSAGE_ARG=0XB7453D40 CANT CREATEWRITE TO FILE ROOTSQL_LOAD-2-1-1.DATA(ERRCODE: 13)) AT SQL_CLASS.CC:502#10 0X082BCADB IN MY_MESSAGE_SQL (ERROR=1, STR=0XB7453D40 CANT CREATEWRITE TO FILEROOTSQL_LOAD-2-1-1.DATA (ERRCODE: 13), MYFLAGS=36)    AT MYSQLD.CC:2849                                                                                                                       #11 0X08700F34 IN MY_ERROR (NR=1, MYFLAGS=36) AT MY_ERROR.C:97                                                                              #12 0X086F00C2 IN MY_REGISTER_FILENAME (FD=-1, FILENAME=0XB7453F46ROOTSQL_LOAD-2-1-1.DATA, TYPE_OF_FILE=FILE_BY_CREATE, ERROR_MESSAGE_NUMBER=1,     MYFLAGS=16) AT MY_OPEN.C:184                                                                                                                    #13 0X086F02A2 IN MY_CREATE (FILENAME=0XB7453F46 ROOTSQL_LOAD-2-1-1.DATA,CREATEFLAGS=0, ACCESS_FLAGS=131201, MYFLAGS=16) AT MY_CREATE.C:63      #14 0X083C3D04 IN APPEND_BLOCK_LOG_EVENT::DO_APPLY_EVENT (THIS=0X9BA01B0, RLI=0X9B563C0)AT LOG_EVENT.CC:6182                                        #15 0X0846736F IN LOG_EVENT::APPLY_EVENT (THIS=0X9BA01B0, RLI=0X9B563C0) ATLOG_EVENT.H:1058                                                         #16 0X0845D762 IN APPLY_EVENT_AND_UPDATE_POS (EV=0X9BA01B0, THD=0X9BBEAE0, RLI=0X9B563C0,SKIP=TRUE) AT SLAVE.CC:1987                                #17 0X084603D9 IN EXEC_RELAY_LOG_EVENT (THD=0X9BBEAE0, RLI=0X9B563C0) AT SLAVE.CC:2130                                                              #18 0X08461255 IN HANDLE_SLAVE_SQL (ARG=0X9B55138) AT SLAVE.CC:2801                                                                                 #19 0XB7FFE50F IN START_THREAD () FROM LIBTLSI686CMOVLIBPTHREAD.SO.0                                                                           #20 0XB7EEFA0E IN CLONE () FROM LIBTLSI686CMOVLIBC.SO.6HOW TO REPEAT:CAT RPL_SLAVE_LOAD_IN.TEST:---------------------------CONNECTION MASTER;CREATE TABLE T1(A INT NOT NULL AUTO_INCREMENT, B INT, PRIMARY KEY(A));LOAD DATA INFILE ....STD_DATARPL_LOADDATA.DAT INTO TABLE T1;RUN:----.MTR --SLAVE-LOAD-TMPDIR=ROOT RPL_SLAVE_LOAD_INSUGGESTED FIX:CHECK THE RETURN OF FUNCTION CLEANUP_LOAD_TMPDIR() IN LOG_EVENT.CC. ","SUMMARY":"BUGU00A0#42861  ASSIGNING INVALID DIRECTORIES TO --SLAVE-LOAD-TMPDIR CRASHES THE SLAVE ","CLASS":1}
{"ID_DEFECT":"43046","DESCRIPTION":"     [20 FEB 2009 8:40]   LI ZHOU          DESCRIPTION:IN MIXED MODE, IF WE CREATE A TEMPORARY TABLE AND DO SOME UPDATES THATSWITCHES THE FORMAT TO ROW FORMAT, THEN THE FORMAT WILL REMAIN ROWFORMAT AND PREVENT ANY CREATEDROPALTER STATEMENTS ON TEMPORARY TABLESBEEN BINLOGGED UNTIL THE TEMPORARY TABLE IS DROPPED.SO WE HAVE THE FOLLOWING PROBLEMS:1: DISCONNECT MASTER SERVER, DROP TEMP TABLE COMMAND DOESNT WRITE INTO BINLOG. SO SLAVE HAVE WRONG STATUS WITH TEMP TABLES.2: CREATEDROP TEMP TABLE DOESNT WRITE INTO BINLOG. SO THE TABLE CANT BE CREATED IN SLAVE.3: ALL THE OTHER OPERATIONS WILL BASED ON ROW FORMAT AFTER THE SWITCH.HOW TO REPEAT:WE CAN USE THE FOLLOWING TEST CASE TO REPRODUCT THIS BUG:+SOURCE INCLUDEMASTER-SLAVE.INC;+SOURCE INCLUDEHAVE_BINLOG_FORMAT_MIXED.INC;++--ECHO ==== THE FIRST TEST INITIALIZE ====++--ECHO [ON MASTER]+--CONNECTION MASTER++CREATE TABLE T1 (A CHAR(48));+CREATE TEMPORARY TABLE T1_TMP1(A INT);+INSERT INTO T1 VALUES (UUID());++--ECHO [ON SLAVE]+SYNC_SLAVE_WITH_MASTER;++--ECHO ==== VERIFY RESULTS ON SLAVE ====+SHOW STATUS LIKE SLAVE_OPEN_TEMP_TABLES;++--ECHO [ON MASTER]+--CONNECTION MASTER++DISCONNECT MASTER;+--CONNECTION MASTER1++--ECHO [ON SLAVE]+SYNC_SLAVE_WITH_MASTER;++--ECHO ==== VERIFY RESULTS ON SLAVE ====+SHOW STATUS LIKE SLAVE_OPEN_TEMP_TABLES;++--ECHO ==== CLEAN UP ====++--ECHO [ON MASTER]+--CONNECTION MASTER1+DROP TABLE T1;++--ECHO [ON SLAVE]+SYNC_SLAVE_WITH_MASTER;++#+# THE SECOND TEST FOR CREATE AND DROP TEMP TABLE IN ROW BASED FORMAT+#++--ECHO ==== THE SECOND TEST INITIALIZE ====++--ECHO [ON MASTER]+--CONNECTION MASTER1++CREATE TABLE T1 (A CHAR(48));+CREATE TEMPORARY TABLE T1_TMP1(A INT);+INSERT INTO T1 VALUES (UUID());+CREATE TEMPORARY TABLE T1_TMP2(A INT);+CREATE TEMPORARY TABLE T1_TMP3(A INT);+DROP TEMPORARY TABLE T1_TMP1;++--ECHO [ON SLAVE]+SYNC_SLAVE_WITH_MASTER;++--ECHO ==== VERIFY RESULTS ON SLAVE ====+SHOW STATUS LIKE SLAVE_OPEN_TEMP_TABLES;++--ECHO [ON MASTER]++--CONNECTION MASTER1++CREATE TEMPORARY TABLE T1_TMP4(A INT);+INSERT INTO T1 VALUES (UUID());++--ECHO [ON SLAVE]+SYNC_SLAVE_WITH_MASTER;++--ECHO ==== VERIFY RESULTS ON SLAVE ====+SHOW STATUS LIKE SLAVE_OPEN_TEMP_TABLES;++--ECHO ==== CLEAN UP ====++--ECHO [ON MASTER]+--CONNECTION MASTER1+DROP TABLE T1;++--ECHO [ON SLAVE]+SYNC_SLAVE_WITH_MASTER; ","SUMMARY":"BUGU00A0#43046  MIXED MODE SWITCH TO ROW FORMAT WITH TEMP TABLE LEAD TO WRONG RESULT ","CLASS":1}
{"ID_DEFECT":"44179","DESCRIPTION":"     [9 APR 2009 7:10]   ANDREI ELKIN          DESCRIPTION:THE FOLLOWING PIECE OF CODE IN SQL_REPL.CC1026      IF ((ERROR= PURGE_RELAY_LOGS(&MI->RLI, THD,                      |1027                                   1 * JUST RESET *,                 |1028                                   &ERRMSG)))                          |029        GOTO ERR;DOES NOT SET SQL_ERRNO THAT IN COMBINATION WITH NON-ZERO RETURN FROMPURGE_RELAY_LOGS() LEADS TO #3  0XB7E0772E IN __ASSERT_FAIL () FROM LIBTLSI686CMOVLIBC.SO.6#4  0X082BDAEB IN MY_MESSAGE_SQL (ERROR=0, STR=0XB74BABF4 UNKNOWN ERROR 0,     MYFLAGS=0) AT MYSQLD.CC:2846#5  0X08703F44 IN MY_ERROR (NR=0, MYFLAGS=0) AT MY_ERROR.C:99#6  0X0846CCE6 IN RESET_SLAVE (THD=0X91AE748, MI=0X91F5EB0) AT SQL_REPL.CC:1066HOW TO REPEAT:INVOKE RESET SLAVE AND SIMULATE AN ERROR INSIDEMY_DELETE_ALLOW_OPENED() -> MY_DELETE().MYSQL_BIN_LOG::RESET_LOGS() WOULD REGISTER A WARNINGER_BINLOG_PURGE_FATAL_ERR AND RETURN 1.PURGE_RELAY_LOGS() THE CALLER PREPARES   *ERRMSG = FAILED DURING LOG RESETFOR RESET_SLAVE() EVENTUAL ERROR GENERATION. HOWEVER, IT DOES NOTSET THE SQL_ERRNO LIKE ITS DONE IN OTHER BRANCHES IN THE FUNCTION.SUGGESTED FIX:TO INTRODUCE A NEW ER_ CONSTANT TO SET SQL_ERRNO FOR THE CASE:  IF ((ERROR= PURGE_RELAY_LOGS(MI->RLI, THD,TTT       1 * JUST RESET *,TTT       &ERRMSG)))      SQL_ERRNO= ER_SLAVE_PURGE_RELAY_LOGS;    GOTO ERR;   ","SUMMARY":"BUGU00A0#44179  RESET SLAVE CRASHES IN MY_ERROR WHEN RESET_LOGS RETURNS NON-ZERO ","CLASS":1}
{"ID_DEFECT":"44270","DESCRIPTION":"     [14 APR 2009 17:35]   KYLE JOINER          DESCRIPTION:RESET SLAVE DOES NOT RESET THE LAST_IO_ERROR OR LAST_IO_ERRNO IN SHOW SLAVE STATUS.  HOW TO REPEAT:EXAMPLE:MASTER SERVER:  127.0.0.1 PORT 3306SLAVE SERVER: 127.0.0.1 PORT 3307MYSQL> STOP SLAVE;QUERY OK, 0 ROWS AFFECTED (45.23 SEC)MYSQL> SHOW SLAVE STATUS*************************** 1. ROW ***************************               SLAVE_IO_STATE:                  MASTER_HOST: 127.0.0.1                  MASTER_USER: REPL                  MASTER_PORT: 3306                CONNECT_RETRY: 60              MASTER_LOG_FILE: KJOINER-PC-BIN.000001          READ_MASTER_LOG_POS: 222               RELAY_LOG_FILE: KJOINER-PC-RELAY-BIN.000002                RELAY_LOG_POS: 256        RELAY_MASTER_LOG_FILE: KJOINER-PC-BIN.000001             SLAVE_IO_RUNNING: NO            SLAVE_SQL_RUNNING: NO              REPLICATE_DO_DB:          REPLICATE_IGNORE_DB:           REPLICATE_DO_TABLE:       REPLICATE_IGNORE_TABLE:      REPLICATE_WILD_DO_TABLE:  REPLICATE_WILD_IGNORE_TABLE:                   LAST_ERRNO: 0                   LAST_ERROR:                 SKIP_COUNTER: 0          EXEC_MASTER_LOG_POS: 222              RELAY_LOG_SPACE: 416              UNTIL_CONDITION: NONE               UNTIL_LOG_FILE:                UNTIL_LOG_POS: 0           MASTER_SSL_ALLOWED: NO           MASTER_SSL_CA_FILE:           MASTER_SSL_CA_PATH:              MASTER_SSL_CERT:            MASTER_SSL_CIPHER:               MASTER_SSL_KEY:        SECONDS_BEHIND_MASTER: NULLMASTER_SSL_VERIFY_SERVER_CERT: NO                LAST_IO_ERRNO: 2003                LAST_IO_ERROR: ERROR CONNECTING TO MASTER REPL@127.0.0.1:3306- RETRY-TIME: 60  RETRIES: 86400               LAST_SQL_ERRNO: 0               LAST_SQL_ERROR:1 ROW IN SET (0.00 SEC)MYSQL> RESET SLAVE;QUERY OK, 0 ROWS AFFECTED (0.03 SEC)MYSQL> SHOW SLAVE STATUS*************************** 1. ROW ***************************               SLAVE_IO_STATE:                  MASTER_HOST: 127.0.0.1                  MASTER_USER: TEST                  MASTER_PORT: 3306                CONNECT_RETRY: 60              MASTER_LOG_FILE:          READ_MASTER_LOG_POS: 4               RELAY_LOG_FILE: KJOINER-PC-RELAY-BIN.000001                RELAY_LOG_POS: 4        RELAY_MASTER_LOG_FILE:             SLAVE_IO_RUNNING: NO            SLAVE_SQL_RUNNING: NO              REPLICATE_DO_DB:          REPLICATE_IGNORE_DB:           REPLICATE_DO_TABLE:       REPLICATE_IGNORE_TABLE:      REPLICATE_WILD_DO_TABLE:  REPLICATE_WILD_IGNORE_TABLE:                   LAST_ERRNO: 0                   LAST_ERROR:                 SKIP_COUNTER: 0          EXEC_MASTER_LOG_POS: 0              RELAY_LOG_SPACE: 125              UNTIL_CONDITION: NONE               UNTIL_LOG_FILE:                UNTIL_LOG_POS: 0           MASTER_SSL_ALLOWED: NO           MASTER_SSL_CA_FILE:           MASTER_SSL_CA_PATH:              MASTER_SSL_CERT:            MASTER_SSL_CIPHER:               MASTER_SSL_KEY:        SECONDS_BEHIND_MASTER: NULLMASTER_SSL_VERIFY_SERVER_CERT: NO                LAST_IO_ERRNO: 2003                LAST_IO_ERROR: ERROR CONNECTING TO MASTER REPL@127.0.0.1:3306- RETRY-TIME: 60  RETRIES: 86400               LAST_SQL_ERRNO: 0               LAST_SQL_ERROR:1 ROW IN SET (0.00 SEC)MYSQL> CHANGE MASTER TO    -> MASTER_USER=REPL,    -> MASTER_LOG_POS=222,    -> MASTER_LOG_FILE=KJOINER-PC-BIN.000001,    -> MASTER_PORT=3306,    -> MASTER_PASSWORD=REPL;QUERY OK, 0 ROWS AFFECTED (0.02 SEC)MYSQL> START SLAVE;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> SHOW SLAVE STATUS*************************** 1. ROW ***************************               SLAVE_IO_STATE: WAITING FOR MASTER TO SEND EVENT                  MASTER_HOST: 127.0.0.1                  MASTER_USER: REPL                  MASTER_PORT: 3306                CONNECT_RETRY: 60              MASTER_LOG_FILE: KJOINER-PC-BIN.000002          READ_MASTER_LOG_POS: 106               RELAY_LOG_FILE: KJOINER-PC-RELAY-BIN.000003                RELAY_LOG_POS: 256        RELAY_MASTER_LOG_FILE: KJOINER-PC-BIN.000002             SLAVE_IO_RUNNING: YES            SLAVE_SQL_RUNNING: YES              REPLICATE_DO_DB:          REPLICATE_IGNORE_DB:           REPLICATE_DO_TABLE:       REPLICATE_IGNORE_TABLE:      REPLICATE_WILD_DO_TABLE:  REPLICATE_WILD_IGNORE_TABLE:                   LAST_ERRNO: 0                   LAST_ERROR:                 SKIP_COUNTER: 0          EXEC_MASTER_LOG_POS: 106              RELAY_LOG_SPACE: 566              UNTIL_CONDITION: NONE               UNTIL_LOG_FILE:                UNTIL_LOG_POS: 0           MASTER_SSL_ALLOWED: NO           MASTER_SSL_CA_FILE:           MASTER_SSL_CA_PATH:              MASTER_SSL_CERT:            MASTER_SSL_CIPHER:               MASTER_SSL_KEY:        SECONDS_BEHIND_MASTER: 0MASTER_SSL_VERIFY_SERVER_CERT: NO                LAST_IO_ERRNO: 2003                LAST_IO_ERROR: ERROR CONNECTING TO MASTER REPL@127.0.0.1:3306- RETRY-TIME: 60  RETRIES: 86400               LAST_SQL_ERRNO: 0               LAST_SQL_ERROR:1 ROW IN SET (0.00 SEC)MYSQL>SUGGESTED FIX:RESET THE VALUES WHEN RESET SLAVE IS ISSUED. ","SUMMARY":"BUGU00A0#44270  RESET SLAVE DOES NOT RESET LAST_IO_ERROR OR LAST_IO_ERRNO ","CLASS":1}
{"ID_DEFECT":"44331","DESCRIPTION":"     [16 APR 2009 23:22]   HEMA SRIDHARAN          DESCRIPTION:* SET UP 2 SERVERS TO ACT AS MASTER AND SLAVE* CREATE DATABASE, TABLE AND EVENTS IN MASTER* EXECUTE BACKUP IN SLAVE(DB12S.BAK) AND COPY THE BACKUP IMAGE FILE TO MASTER SERVER* PERFORM RESTORE FROM (DB1S.BAK) MASTER SERVER* NOTE THAT RESTORE WILL PRODUCE WARNING MESSAGE IN MASTER AND SLAVE SERVERS.HOW TO REPEAT:IN MASTER=========MYSQL> GRANT REPLICATION SLAVE ON *.* TO REPL@%;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> CREATE DATABASE DB1;QUERY OK, 1 ROW AFFECTED (0.01 SEC)MYSQL> CREATE TABLE DB1.T12(DETAILS CHAR(30));QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> CREATE EVENT DB1.E1 ON SCHEDULE AT CURRENT_TIMESTAMP    ->   ON COMPLETION PRESERVE DISABLE    ->   DO INSERT INTO DB1.T12 VALUES(EVENT E1 FIRED);QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> BACKUP DATABASE DB1 TO DB1M.BAK;+-----------+| BACKUP_ID |+-----------+| 270       |+-----------+1 ROW IN SET (0.34 SEC)IN SLAVE========MYSQL> BACKUP DATABASE DB1 TO DB1S.BAK;+-----------+| BACKUP_ID |+-----------+| 270       |+-----------+1 ROW IN SET (0.36 SEC)MYSQL> SHOW CREATE EVENT DB1.E1;EVENT   SQL_MODE        TIME_ZONE       CREATE EVENT    CHARACTER_SET_CLIENT   COLLATION_CONNECTION     DATABASE COLLATIONE1              SYSTEM  CREATE DEFINER=``@`` EVENT `E1` ON SCHEDULE AT 2009-04-17 02:13:46 ON COMPLETION PRESERVE DISABLE ON SLAVE DO INSERT INTO DB1.T12 VALUES(EVENT E1 FIRED)    LATIN1  LATIN1_SWEDISH_CI       LATIN1_SWEDISH_CINOTE THAT DEFINER IS NOT ROOT USER IN SLAVE AND SHOWS @NOW COPY THE BACKUP IMAGE FILE FROM SLAVE TO MASTER SERVERFROM MASTER===========MYSQL> RESTORE FROM DB1S.BAK OVERWRITE;+-----------+| BACKUP_ID |+-----------+| 272       |+-----------+1 ROW IN SET, 1 WARNING (0.11 SEC)MYSQL> SHOW WARNINGS;+-------+------+--------------------------------------------------------+| LEVEL | CODE | MESSAGE                                                |+-------+------+--------------------------------------------------------+| NOTE  | 1449 | THE USER SPECIFIED AS A DEFINER (@) DOES NOT EXIST |+-------+------+--------------------------------------------------------+1 ROW IN SET (0.00 SEC)MYSQL> RESTORE FROM DB1M.BAK OVERWRITE;+-----------+| BACKUP_ID |+-----------+| 273       |+-----------+1 ROW IN SET (0.10 SEC)MYSQL> SHOW WARNINGS;EMPTY SET (0.00 SEC) ","SUMMARY":"BUGU00A0#44331  RESTORE OF DATABASE WITH EVENTS PRODUCES WARNING IN REPLICATION ","CLASS":1}
{"ID_DEFECT":"44378","DESCRIPTION":"     [21 APR 2009 9:39]   ALFRANIO CORREIA          DESCRIPTION:==19390== CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S)==19390==    AT 0X84859CE: INCIDENT_LOG_EVENT::IS_VALID() CONST (LOG_EVENT.H:3907)==19390==    BY 0X8482024: LOG_EVENT::READ_LOG_EVENT(CHAR CONST*, UNSIGNED, CHAR CONST**, FORMAT_DESCRIPTION_LOG_EVENT CONST*) (LOG_EVENT.CC:1227)==19390==    BY 0X8482434: LOG_EVENT::READ_LOG_EVENT(ST_IO_CACHE*, ST_SAFE_MUTEX_T*, FORMAT_DESCRIPTION_LOG_EVENT CONST*) (LOG_EVENT.CC:1034)==19390==    BY 0X8521A25: _ZL10NEXT_EVENTP14RELAY_LOG_INFO (SLAVE.CC:4095)==19390==    BY 0X852D656: _ZL20EXEC_RELAY_LOG_EVENTP3THDP14RELAY_LOG_INFO (SLAVE.CC:2245)==19390==    BY 0X852E5D7: HANDLE_SLAVE_SQL (SLAVE.CC:3015)==19390==    BY 0X406650E: START_THREAD (IN LIBTLSI686CMOVLIBPTHREAD-2.8.90.SO)==19390==    BY 0X42C8A0D: CLONE (IN LIBTLSI686CMOVLIBC-2.8.90.SO)HOW TO REPEAT:.MTR --VALGRIND-MYSQLD RPL_BINLOG_CORRUPTIONSUGGESTED FIX:=== MODIFIED FILE SQLLOG_EVENT.CC--- SQLLOG_EVENT.CC    2009-04-13 13:24:28 +0000+++ SQLLOG_EVENT.CC    2009-04-21 09:38:07 +0000@@ -9269,7 +9269,7 @@      IF THE INCIDENT IS NOT RECOGNIZED, THIS BINLOG EVENT IS      INVALID.  IF WE SET INCIDENT_NUMBER TO INCIDENT_NONE, THE      INVALIDITY WILL BE DETECTED BY IS_VALID().-    INCIDENT_NUMBER= INCIDENT_NONE;+    M_INCIDENT= INCIDENT_NONE;     DBUG_VOID_RETURN;      M_INCIDENT= STATIC_CAST<INCIDENT>(INCIDENT_NUMBER); ","SUMMARY":"BUGU00A0#44378  RPL_BINLOG_CORRUPTION FAILS WITH WARNING MESSAGES IN VALGRIND ","CLASS":1}
{"ID_DEFECT":"44442","DESCRIPTION":"     [23 APR 2009 17:03]   MATS KINDAHL          DESCRIPTION:IF A BINARY LOG CONTAIN AN INCIDENT LOG EVENT AND MYSQLBINLOG IS APPLIED TO IT, ALL THAT SHOWS IN THE OUTPUT IS A COMMENT CONTAINING THE ERROR MESSAGE.IF THAT OUTPUT IS FED INTO A RUNNING SERVER, IT WILL APPLY CORRECTLY, EVEN THOUGH THE INCIDENT LOG EVENT INDICATES THAT, E.G., THE DATABASE NEED TO BE RE-SYNCHRONIZED.HOW TO REPEAT:RUN MYSQLBINLOG ON A BINARY LOG WITH AN INCIDENT LOG EVENT AND CHECK THE OUTPUT.SUGGESTED FIX:WRITE A NON-EXISTING COMMAND INTO THE OUTPUT, WHICH WILL GENERATE A SYNTAX ERROR AND FORCE THE DBA TO RESOLVE THE ISSUES SOMEHOW. ","SUMMARY":"BUGU00A0#44442  INCIDENT EVENTS ARE SILENT IN MYSQLBINLOG OUTPUT ","CLASS":1}
{"ID_DEFECT":"45214","DESCRIPTION":"     [31 MAY 2009 6:05]   ZHENXING HE          DESCRIPTION:FUNCTION GET_MASTER_VERSION_AND_CLOCK IN SQLSLAVE.CC DOES NOT REPORT  ERROR WHEN QUERIES FAIL ON MASTER. THIS WOULD MAKE THE SLAVE TO GET A FALSE PASS WHEN THE QUERY FAILED BECAUSE OF NETWORK PROBLEMS WHEN RUNNING THE QUERY ON MASTER.THIS WAS REQUESTED BY MARK CALLAGHAN IN COMMENTS TO BUG#41400.HOW TO REPEAT:READING THE SOURCE CODE OF GET_MASTER_VERSION_AND_CLOCK IN SQLSLAVE.CC, WHICH IGNORES THE ERROR AND CONTINUES WHEN QUERIES DOES NOT RETURN SUCCESS ON MASTER.SUGGESTED FIX:GET_MASTER_VERSION_AND_CLOCK SHOULD RETURN ERROR IF THE QUERY FAILS AND RETRY IF THE ERROR WAS CAUSED BY A TRANSIENT NETWORK PROBLEM, AND FAIL OTHERWISE. ","SUMMARY":"BUGU00A0#45214  GET_MASTER_VERSION_AND_CLOCK DOES NOT REPORT  ERROR WHEN QUERIES FAIL ","CLASS":1}
{"ID_DEFECT":"46129","DESCRIPTION":"     [11 JUL 2009 12:44]   ALFRANIO CORREIA          DESCRIPTION:AFTER BUG#43929, A FAILING NON-TRANSACTIONAL STATEMENT ISSUED IN THE CONTEXT OF A TRANSACTION FLUSHES THE TRANSACTIONAL CACHE CAUSING A MISMATCH BETWEEN EXECUTION AND LOGGING HISTORIES.EXECUTION:CREATE TABLE NT_1 (A TEXT, B INT PRIMARY KEY, C TEXT) ENGINE = MYISAM;CREATE TABLE TT_1 (A TEXT, B INT PRIMARY KEY, C TEXT) ENGINE = INNODB;CREATE TRIGGER TR_I_TT_1_TO_NT_1 BEFORE INSERT ON TT_1 FOR EACH ROWBEGIN  INSERT INTO NT_1 VALUES (NEW.A, NEW.B, NEW.C);ENDBEGIN;INSERT INTO NT_1 VALUES (NEW TEXT 2, 2, );--ERROR ER_DUP_ENTRYINSERT INTO TT_1 VALUES (NEW TEXT 1, 1, ), (NEW TEXT 2, 2, );INSERT INTO TT_1 VALUES (NEW TEXT 3, 3, );ROLLBACK;WRONG BINARY LOG ENTRIES:LOG_NAME        POS     EVENT_TYPE      SERVER_ID       END_LOG_POS     INFOMASTER-BIN.000001       #       QUERY   #       #       USE `TEST`; INSERT INTO NT_1 VALUES (NEW TEXT 2, 2, )MASTER-BIN.000001       #       QUERY   #       #       BEGINMASTER-BIN.000001       #       QUERY   #       #       USE `TEST`; INSERT INTO TT_1 VALUES (NEW TEXT 1, 1, ), (NEW TEXT 2, 2, )MASTER-BIN.000001       #       QUERY   #       #       ROLLBACKMASTER-BIN.000001       #       QUERY   #       #       BEGINMASTER-BIN.000001       #       QUERY   #       #       USE `TEST`; INSERT INTO TT_1 VALUES (NEW TEXT 3, 3, )MASTER-BIN.000001       #       QUERY   #       #       ROLLBACKCORRECT BINARY LOG ENTRIES:LOG_NAME        POS     EVENT_TYPE      SERVER_ID       END_LOG_POS     INFOMASTER-BIN.000001       #       QUERY   #       #       USE `TEST`; INSERT INTO NT_1 VALUES (NEW TEXT 2, 2, )MASTER-BIN.000001       #       QUERY   #       #       BEGINMASTER-BIN.000001       #       QUERY   #       #       USE `TEST`; INSERT INTO TT_1 VALUES (NEW TEXT 1, 1, ), (NEW TEXT 2, 2, )MASTER-BIN.000001       #       QUERY   #       #       USE `TEST`; INSERT INTO TT_1 VALUES (NEW TEXT 3, 3, )MASTER-BIN.000001       #       QUERY   #       #       ROLLBACKHOW TO REPEAT:CONNECTION MASTER;SET SQL_LOG_BIN=0;CREATE TABLE NT_1 (A TEXT, B INT PRIMARY KEY, C TEXT) ENGINE = MYISAM;CREATE TABLE TT_1 (A TEXT, B INT PRIMARY KEY, C TEXT) ENGINE = INNODB;SET SQL_LOG_BIN=1;CONNECTION SLAVE;SET SQL_LOG_BIN=0;CREATE TABLE NT_1 (A TEXT, B INT PRIMARY KEY, C TEXT) ENGINE = MYISAM;CREATE TABLE TT_1 (A TEXT, B INT PRIMARY KEY, C TEXT) ENGINE = INNODB;SET SQL_LOG_BIN=1;CONNECTION MASTER;DELIMITER |;CREATE TRIGGER TR_I_TT_1_TO_NT_1 BEFORE INSERT ON TT_1 FOR EACH ROWBEGIN  INSERT INTO NT_1 VALUES (NEW.A, NEW.B, NEW.C);END|DELIMITER ;|LET $BINLOG_START= QUERY_GET_VALUE(SHOW MASTER STATUS, POSITION, 1);BEGIN;INSERT INTO NT_1 VALUES (NEW TEXT 2, 2, );--ERROR ER_DUP_ENTRYINSERT INTO TT_1 VALUES (NEW TEXT 1, 1, ), (NEW TEXT 2, 2, );INSERT INTO TT_1 VALUES (NEW TEXT 3, 3, );ROLLBACK;--SOURCE INCLUDESHOW_BINLOG_EVENTS.INCCONNECTION MASTER;DROP TABLE TT_1;DROP TABLE NT_1;SYNC_SLAVE_WITH_MASTER; ","SUMMARY":"BUGU00A0#46129  FAILING MIXED STM (WITH TRANS AND NON-TRANS TABLES) CAUSES WRONG SEQ IN BINLOG ","CLASS":1}
{"ID_DEFECT":"46130","DESCRIPTION":"     [11 JUL 2009 13:34]   ALFRANIO CORREIA          DESCRIPTION:SLAVE DOES NOT CORRECTLY HANDLE EXPECTED ERRORS LEADING TO INCONSISTENCIES BETWEEN THE MATER AND SLAVE.SPECIFICALLY, WHEN A STATEMENT CHANGES BOTH TRANSACTIONAL AND NON-TRANSACTIONAL TABLES, THE TRANSACTIONAL CHANGES ARE AUTOMATICALLY ROLLED BACK ON THE MASTER BUT THE SLAVE IGNORES THE ERROR AND DOES NOT ROLLBACK THEM THUS LEADING TO INCONSISTENCIES.CREATE TABLE NT_1 (A TEXT, B INT PRIMARY KEY, C TEXT) ENGINE = MYISAM;CREATE TABLE TT_1 (A TEXT, B INT PRIMARY KEY, C TEXT) ENGINE = INNODB;CREATE TRIGGER TR_I_TT_1_TO_NT_1 BEFORE INSERT ON TT_1 FOR EACH ROWBEGIN  INSERT INTO NT_1 VALUES (NEW.A, NEW.B, NEW.C);ENDBEGIN;INSERT INTO NT_1 VALUES (NEW TEXT 2, 2, );--ERROR ER_DUP_ENTRYINSERT INTO TT_1 VALUES (NEW TEXT 1, 1, ), (NEW TEXT 2, 2, );INSERT INTO TT_1 VALUES (NEW TEXT 3, 3, );COMMIT;ON MASTER:SELECT * FROM TT_1;A       B       CNEW TEXT 3      3SELECT * FROM NT_1;A       B       CNEW TEXT 2      2NEW TEXT 1      1NEW TEXT 3      3ON SLAVE:SELECT * FROM TT_1;A       B       CNEW TEXT 1      1NEW TEXT 3      3SELECT * FROM NT_1;A       B       CNEW TEXT 2      2NEW TEXT 1      1NEW TEXT 3      3HOW TO REPEAT:APPLY THE PATCH FOR BUG#33864 AND USE THE TEST CASE REPORTED THERE. ","SUMMARY":"BUGU00A0#46130  SLAVE DOES NOT CORRECTLY HANDLE EXPECTED ERRORS ","CLASS":1}
{"ID_DEFECT":"46166","DESCRIPTION":"     [14 JUL 2009 11:19]   LUIS SOARES          DESCRIPTION:BINARY LOG NAMES ARE CREATED USING THE FUNCTION:FIND_UNIQ_FILENAME. THIS FUNCTION CAN RETURN ERROR IN SOME CASES:  - THE GENERATED NAME EXCEEDS FN_REFLEN  - THE NUMBER OF EXTENSIONS IS EXHAUSTED  - OR SOME OTHER ERROR HAPPENED WHILE EXAMINING THE FILESYSTEMIF IT HAPPENS TO RETURN AN ERROR, THEN IT CAN BE THE CASE THATTHE ERROR IS IGNORED AT MYSQL_BIN_LOG::NEW_FILE_IMPL (IN LOG.CC):    (...)     IF (GENERATE_NEW_NAME(NEW_NAME, NAME))      GOTO END;     (...)  END:    IF (NEED_LOCK)      PTHREAD_MUTEX_UNLOCK(&LOCK_LOG);    PTHREAD_MUTEX_UNLOCK(&LOCK_INDEX);    DBUG_VOID_RETURN;IN THIS CASE, ERROR SHOULD BE PROPAGATED PROPERLY IN THE STACK SOTHAT COMMANDS LIKE FLUSH LOGS, WHICH CAUSE LOG ROTATION THENCEULTIMATELY CALL FIND_UNIQ_FILENAME, CAN RETURN TO THE USER ANERROR INSTEAD OF A WARNING.NOTE: LOG ROTATION CAN BE TRIGGERED FROM SEVERAL PLACES IN THE SOURCE CODE, WHICH NEED TO ADDRESS THIS ISSUE OF ERROR PROPAGATION ALSO. FOR INSTANCE, IN MYSQL_BIN_LOG::WRITE THE ROTATE_AND_PURGE ROUTINE IS CALLED, BUT SOME CALLERS OF MYSQL_BIN_LOG::WRITE ARE IGNORING THE ITS RETURN RESULT (SEE BUG#37148).HOW TO REPEAT:INSPECT SOURCE CODE. ","SUMMARY":"BUGU00A0#46166  MYSQL_BIN_LOG::NEW_FILE_IMPL IS NOT PROPAGATING ERROR WHEN GENERATING NEW NAME. ","CLASS":1}
{"ID_DEFECT":"47287","DESCRIPTION":"     [12 SEP 2009 21:06]   ELENA STEPANOVA          DESCRIPTION:THERE WAS A RECENT REGRESSION (BETWEEN 5.1.37 AND 5.1.38) DESCRIBED IN BUG#46864: IF A TRANSACTION CONTAINS A MULTI-ROW DML STATEMENT WHICH INVOLVES BOTH TRANSACTIONAL AND NON-TRANSACTIONAL ENGINES, THE STATEMENT FAILS, AND THE TRANSACTION IS FOLLOWED BY A COMMIT, MASTER AND SLAVE CAN END UP WITH DIFFERENT TABLE CONTENTS: THE STATEMENT IS CORRECTLY ROLLED BACK ON MASTER, BUT IS APPLIED ON SLAVE.SIMILARLY, IF THE BINLOG IS USED FOR RECOVERY RATHER THAN FOR REPLICATION, THE RESTORED DATA ALSO DIFFERS FROM THE ORIGINAL CONTENTS.THE BUG#46864 IS ABOUT TO BE CLOSED IN 5.1.39, BUT IT ONLY FIXES THE PROBLEM WITH SBR, WHILE IT STILL EXISTS FOR RBR (AND MBR IF THE STATEMENT IS SUCH THAT IT MAKES SERVER SWITCH TO RBR).THE TEST CASE PROVIDED IN HOW TO REPEAT SECTION IS THE SAME AS DESCRIBED IN BUG#46864, I ONLY MODIFIED IT SO THAT IT FAILS FOR BOTH RBR AND MBR, ELIMINATED DIRECT MODIFICATION OF AUTO-INCREMENT PK VALUES (WHICH IS OFTEN SAID TO BE A BAD THING TO DO), AND MADE THE KEY VALUES IN UPDATE MORE OBVIOUS. HOW TO REPEAT:# TRPL_FAILURE_RBR_MBR.TESTSOURCE INCLUDEHAVE_INNODB.INC;SOURCE INCLUDEMASTER-SLAVE.INC;--DISABLE_QUERY_LOG--DISABLE_RESULT_LOGCONNECTION MASTER;--DISABLE_WARNINGSDROP DATABASE IF EXISTS TST;--ENABLE_WARNINGSCREATE DATABASE TST;USE TST;CREATE TABLE TB1(  I1 INT NOT NULL AUTO_INCREMENT, PRIMARY KEY (I1),  I2 INT UNIQUE KEY,  F1 CHAR (15)) ENGINE=INNODB;INSERT INTO TB1 ( I2, F1 ) VALUES(2,INIT),(3,INIT),(4,INIT);CREATE TABLE LOG (  I1 INT NOT NULL AUTO_INCREMENT, PRIMARY KEY (I1),  ENTRY_DSC CHAR(100)) ENGINE=MYISAM;DELIMITER ;CREATE TRIGGER TB1_UPD AFTER UPDATE ON TB1 FOR EACH ROWBEGIN  INSERT INTO LOG (ENTRY_DSC)  VALUES (CONCAT(UPDATE ROW , OLD.I1, , OLD.F1, ->, NEW.F1));ENDDELIMITER ;SET AUTOCOMMIT = 0;--DISABLE_ABORT_ON_ERRORUPDATE TB1SET I2 = I2-1, F1 = UPDATE WHERE I2 IN (2,4);--ENABLE_ABORT_ON_ERRORCOMMIT;--ENABLE_QUERY_LOG--ENABLE_RESULT_LOG--ECHO # ON MASTER:SELECT * FROM TB1;SYNC_SLAVE_WITH_MASTER;CONNECTION SLAVE;USE TST;--ECHO # ON SLAVE:SELECT * FROM TB1;# END OF TRPL_FAILURE_RBR_MBR.TEST#----------------------------RUN THE TEST ABOVE WITH BINLOG_FORMAT=ROW OR MIXED, E.G :PERL .MYSQL-TEST-RUN.PL  --MYSQLD=--BINLOG_FORMAT=MIXED RPL_FAILURE_MBR_RBRTHE TEST WILL PRODUCE THE FOLLOWING OUTPUT:+# ON MASTER:+SELECT * FROM TB1;+I1     I2      F1+1      2       INIT+2      3       INIT+3      4       INIT+USE TST;+# ON SLAVE:+SELECT * FROM TB1;+I1     I2      F1+1      1       UPDATE+2      3       INIT+3      4       INITSUGGESTED FIX:THERE IS AN ONGOING DISCUSSION WHICH INFERS THAT THE PROBLEM MIGHT NEVER BE FIXED IN 5.1. IF SUCH DECISION IS TAKEN, I SUGGEST DECLARING IN THE DOCUMENTATION THAT A MIX OF TXN- AND NON-TXN ENGINES IN ONE STATEMENT IS CONSIDERED UNSAFE WITH ANY BINLOG FORMAT. AS FOR NOW, IN THE SCOPE OF BUG#28976 WE ARE GOING TO ISSUE THE FOLLOWING TEXT IN 5.1.39 CHANGELOG: (QUOTE)IN STATEMENT-BASED LOGGING MODE ...        3. A STATEMENT AFFECTING BOTH TRANSACTIONAL AND         NON-TRANSACTIONAL TABLES WITHIN A TRANSACTION IS ALWAYS        CONSIDERED UNSAFE. (END OF QUOTE)THUS, WE INDIRECTLY IMPLY THAT IN MIXED- OR ROW-BASED LOGGING MODE SUCH STATEMENTS ARE NOT CONSIDERED UNSAFE.NOW THE MANUAL HAS A WARNING THAT SUCH A MIX IS NOT ADVISED IN REPLICATION CONTEXT; HOWEVER, AS SAID IN THE DESCRIPTION, THE PROBLEM AFFECTS NOT ONLY REPLICATION, BUT ALSO RECOVERY FLOW. ","SUMMARY":"BUGU00A0#47287  RBR: REPLICATION DIFF ON BASIC CASE WITH TXN- AND NON-TXN TABLES IN A STATEMENT ","CLASS":1}
{"ID_DEFECT":"47995","DESCRIPTION":"     [12 OCT 2009 12:10]   SVEN SANDBERG          DESCRIPTION:STATEMENTS MAY BE MARKED UNSAFE, MEANING THAT THEY SHALL BE LOGGED IN ROW FORMAT IF BINLOG_FORMAT=MIXED. THE FOLLOWING USER FUNCTIONS ARE CURRENTLY MARKED UNSAFE:FOUND_ROWSLOAD_FILEROW_COUNTUUIDUUID_SHORTIN ADDITION, THE FOLLOWING SHOULD BE MARKED UNSAFE:CONNECTION_IDGET_LOCKIS_FREE_LOCKIS_USED_LOCKMASTER_POS_WAITRELEASE_LOCKSESSION_USERSYSTEM_USERUSERSLEEPHOW TO REPEAT:SEE THE MANUAL FOR EACH OF THESE FUNCTIONS: - CONNECTION_ID, SESSION_USER, SYSTEM_USER, USER ARE CONNECTION-DEPENDENT - GET_LOCK IS TIMING DEPENDENT - IS_FREE_LOCK, IS_USED_LOCK ARE NONDETERMINISTIC (AND MAY EVEN INTERACT WITH THE SLAVES GLOBAL ENVIRONMENT IN UNWANTED WAYS) - RELEASE_LOCK MAY RETURN A DIFFERENT VALUE ON SLAVE (BECAUSE GET_LOCK IS NOT CALLED ON SLAVE, SINCE GET_LOCK IS UNSAFE) - MASTER_POS_WAIT AND SLEEP ARE TIMING-DEPENDENTSUGGESTED FIX:MARK ALL THESE FUNCTIONS AS UNSAFE ","SUMMARY":"BUGU00A0#47995  MARK SYSTEM FUNCTIONS AS UNSAFE ","CLASS":1}
{"ID_DEFECT":"48297","DESCRIPTION":"     [26 OCT 2009 2:35]   ELENA STEPANOVA          DESCRIPTION:THE BEHAVIOR CHANGED BETWEEN 5.1.39 AND 5.1.40.WITH MBR OR SBR, IF LOAD DATA STATEMENT POPULATES A TABLE USING A FULLY QUALIFIED TABLE NAME, THE SCHEMA NAME IS NOT WRITTEN INTO THE BINLOG. WHEN THE CURRENT DATABASE IS DIFFERENT FROM THE TABLES SCHEMA, IT CAUSES REPLICATION FAILURES OR POPULATING A WRONG TABLE.INITIAL STATEMENT (AS WRITTEN IN GENERAL LOG):LOAD DATA LOCAL INFILE INFILE.TXT INTO TABLE DB1.T5.1.39 BINLOG:LOAD DATA LOCAL INFILE TMPSQL_LOAD_MB-1-4F INTO  TABLE DB1.T5.1.40 BINLOG:LOAD DATA LOCAL INFILE TMPSQL_LOAD_MB-1-50 INTO TABLE `T` FIELDS TERMINATED BY T ENCLOSED BY  ESCAPED BY  LINES TERMINATED BY  (I)HOW TO REPEAT:# RPL_LOAD_INFILE--SOURCE INCLUDEMASTER-SLAVE.INC--SOURCE INCLUDEHAVE_BINLOG_FORMAT_MIXED_OR_STATEMENT.INC--DISABLE_WARNINGSDROP DATABASE IF EXISTS DB1;DROP DATABASE IF EXISTS DB2;--ENABLE_WARNINGSCREATE DATABASE DB1;CREATE DATABASE DB2;USE DB1;--EXEC PERL -E PRINT 12 > INFILE.TXTCREATE TABLE T ( I INT );USE DB2;LOAD DATA LOCAL INFILE INFILE.TXT INTO TABLE DB1.T;--ECHO # MASTER:SELECT * FROM DB1.T;CONNECTION SLAVE;SLEEP 1;--ECHO # SLAVE:USE DB1;SELECT * FROM T;--VERTICAL_RESULTSSHOW SLAVE STATUS;# END OF RPL_LOAD_INFILE ","SUMMARY":"BUGU00A0#48297  SCHEMA NAME IS IGNORED WHEN LOAD DATA IS WRITTEN INTO BINLOG, REPLICATION ABORTS ","CLASS":1}
{"ID_DEFECT":"48321","DESCRIPTION":"     [26 OCT 2009 16:44]   SVEN SANDBERG          DESCRIPTION:THE FOLLOWING COMMANDS SUPPORT THE CURRENT_USER() FUNCTION WHERE A USER IS NEEDED:DROP USER CURRENT_USER()RENAME USER CURRENT_USER() ...GRANT ... TO CURRENT_USER()REVOKE ... FROM CURRENT_USER()CREATE DEFINER = CURRENT_USER [FUNCTION | PROCEDURE | TRIGGER | EVENT | VIEW]ALTER DEFINER = CURRENT_USER [EVENT | VIEW]FOR ALTER VIEW AND FOR ALL CREATE STATEMENTS, THE QUERY IS REWRITTEN BEFORE IT IS BINLOGGED, SO THAT CURRENT_USER IS EXPANDED TO THE NAME OF THE CURRENT USER. FOR DROP USER, RENAME USER, GRANT, REVOKE, AND ALTER EVENT, THE QUERY IS NOT REWRITTEN AND HENCE CURRENT_USER IS NOT EXPANDED. THIS BREAKS REPLICATION BECAUSE CURRENT_USER EXPANDS TO THE USER OF THE SLAVE SQL THREAD ON THE SLAVE.HOW TO REPEAT:FOR GRANT AND REVOKE, THIS CANNOT CURRENTLY BE REPRODUCED DUE TO BUG#41319.==== TEST FOR DROP USER ====--SOURCE INCLUDEMASTER-SLAVE.INCCREATE USER USER@LOCALHOST;GRANT ALL ON *.* TO USER@LOCALHOST;GRANT GRANT OPTION ON *.* TO USER@LOCALHOST;--CONNECT (USER,127.0.0.1,USER,,TEST,$MASTER_MYPORT,)--CONNECTION USERSELECT CURRENT_USER();DROP USER CURRENT_USER();SYNC_SLAVE_WITH_MASTER;==== TEST FOR RENAME USER ====--SOURCE INCLUDEMASTER-SLAVE.INCCREATE USER USER@LOCALHOST;GRANT ALL ON *.* TO USER@LOCALHOST;GRANT GRANT OPTION ON *.* TO USER@LOCALHOST;--CONNECT (USER,127.0.0.1,USER,,TEST,$MASTER_MYPORT,)--CONNECTION USERSELECT CURRENT_USER();RENAME USER CURRENT_USER() TO OTHER_USER@LOCALHOST;SYNC_SLAVE_WITH_MASTER;==== TEST FOR ALTER EVENT ====--SOURCE INCLUDEMASTER-SLAVE.INCCREATE DEFINER=CURRENT_USER() EVENT E1 ON SCHEDULE EVERY 10 YEAR DO INSERT INTO T1 VALUES (1);ALTER DEFINER=CURRENT_USER() EVENT E1 ON SCHEDULE EVERY 10 YEAR DO INSERT INTO T1 VALUES (1);SHOW EVENTS;--SYNC_SLAVE_WITH_MASTERSHOW EVENTS; ","SUMMARY":"BUGU00A0#48321  CURRENT_USER() INCORRECTLY REPLICATED FOR DROPRENAME USER;REVOKE;GRANT;ALTER EV ","CLASS":1}
{"ID_DEFECT":"48506","DESCRIPTION":"     [3 NOV 2009 14:10]   SVEN SANDBERG          DESCRIPTION:A SMALL TEST CASE FAILS WITH THE FOLLOWING STACK TRACE:#0  0XB80D7430 IN __KERNEL_VSYSCALL ()#1  0XB80B21C8 IN PTHREAD_KILL () FROM LIBTLSI686CMOVLIBPTHREAD.SO.0#2  0X08741D79 IN MY_WRITE_CORE (SIG=11) AT STACKTRACE.C:310#3  0X082C6DE4 IN HANDLE_SEGFAULT (SIG=11) AT MYSQLD.CC:2570#4  <SIGNAL HANDLER CALLED>#5  0X0844A1C2 IN TMP_USE_ALL_COLUMNS (TABLE=0X93E72C8, BITMAP=0X0) AT TABLE.H:1680#6  0X0845D4D8 IN STORE_CREATE_INFO (THD=0X93B7098, TABLE_LIST=0X9408D80, PACKET=0XB75A5198, CREATE_INFO_ARG=0XB75A6368, SHOW_DATABASE=FALSE) AT SQL_SHOW.CC:1272#7  0X0843C0C4 IN MYSQL_CREATE_LIKE_TABLE (THD=0X93B7098, TABLE=0X9408D80, SRC_TABLE=0X9408F88, CREATE_INFO=0XB75A6368) AT SQL_TABLE.CC:5424#8  0X082DB188 IN MYSQL_EXECUTE_COMMAND (THD=0X93B7098) AT SQL_PARSE.CC:2722#9  0X082E3791 IN MYSQL_PARSE (THD=0X93B7098, INBUF=0X9408CC0 CREATE TABLE IF NOT EXISTS T LIKE T3, LENGTH=36, FOUND_SEMICOLON=0XB75A7080) AT SQL_PARSE.CC:5963#10 0X082E45B5 IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0X93B7098, PACKET=0X93DBD29 CREATE TABLE IF NOT EXISTS T LIKE T3, PACKET_LENGTH=36) AT SQL_PARSE.CC:1224#11 0X082E5B30 IN DO_COMMAND (THD=0X93B7098) AT SQL_PARSE.CC:865#12 0X082D0B33 IN HANDLE_ONE_CONNECTION (ARG=0X93B7098) AT SQL_CONNECT.CC:1127#13 0XB80AD4FF IN START_THREAD () FROM LIBTLSI686CMOVLIBPTHREAD.SO.0#14 0XB7FB249E IN CLONE () FROM LIBTLSI686CMOVLIBC.SO.6HOW TO REPEAT:==== TEST FILE MYSQL-TESTSUITERPLRPL_BUG.TEST ====CREATE TABLE T1 SELECT 1 A;CREATE TEMPORARY TABLE T3 SELECT 3 A;CREATE VIEW T AS SELECT * FROM T1;CREATE TABLE IF NOT EXISTS T LIKE T3;--EXIT--SOURCE INCLUDEHAVE_LOG_BIN.INC==== END OF TEST FILE ====THE TEST DOES NOT CRASH IF I TAKE AWAY --SOURCE INCLUDEHAVE_LOG_BIN.INC. THIS IS FUNNY SINCE THE LINE APPEARS AFTER EXIT. THAT SUGGESTS THE FAILURE HAS SOMETHING TO DO WITH MYSQLTEST.ON THE OTHER HAND, THE TEST DOES NOT FAIL IF I MOVE IT AWAY FROM THE RPL SUITE AND INTO THE MAIN SUITE. THAT SUGGESTS IT EITHER HAS SOMETHING TO DO WITH MYSQLTEST OR WITH REPLICATION.THE TEST ALSO DOES NOT FAIL IF I CHANGE THE CREATE COMMANDS SLIGHTLY. THAT SUGGESTS IT HAS SOMETHING TO DO WITH CREATE TABLE. ","SUMMARY":"BUGU00A0#48506  CRASH IN CREATE TABLE <EXISTING_VIEW> IF NOT EXISTS LIKE <TMP_TBL> WITH RBL ","CLASS":1}
{"ID_DEFECT":"49479","DESCRIPTION":"     [6 DEC 2009 0:37]   LUIS SOARES          DESCRIPTION:IF A TABLE CONTAINS A FIELD NAME THAT MUST BE ESCAPED (EG, `KEY`INT), LOADING DATA INTO THAT TABLE, USING LOAD DATA INFILE, WILLBREAK REPLICATION.IF LOGGING IN MIXED OR STATEMENT MODE, THE MASTER WILL BINLOG ALOAD DATA EVENT WITHOUT ESCAPING THE FIELD NAMES. CONSEQUENTLY,THE SLAVE WILL STOP WITH A SYNTAX ERROR:LAST_SQL_ERRORTERROR YOU HAVE AN ERROR IN YOUR SQL SYNTAX; CHECK THE MANUAL THAT CORRESPONDS TO YOUR MYSQL SERVER VERSION FOR THE RIGHT SYNTAX TO USE NEAR KEY, C2) AT LINE 1 ON QUERY. DEFAULT DATABASE: TEST. QUERY: LOAD DATA INFILE ....TMPSQL_LOAD-2-1-1.DATA REPLACE INTO  TABLE `T` FIELDS TERMINATED BY T ENCLOSED BY  ESCAPED BY  LINES TERMINATED BY  (KEY, C2)EXAMINING THE MASTER BINLOG, WE FIND THE FOLLOWING EVENT:LOAD DATA LOCAL INFILE TMPSQL_LOAD_MB-1-7F REPLACE INTO TABLE `T` FIELDS TERMINATED BY T ENCLOSED BY  ESCAPED BY  LINES TERMINATED BY  (KEY, C2)NOTICE THAT THE FIELD NAMES ARE NOT ESCAPED AS THEY SHOULD BE,ESPECIALLY FOR THE KEY FIELD WHICH SHOULD HAVE BEEN WRITTEN AS`KEY`.I FOUND THIS IN:  - TREE: MYSQL-5.1-BUGTEAM  - REVID: DAVI.ARNAUT@SUN.COM-20091204153658-09W7L2EDGSZT8QE7RUNNING THE TEST CASE (SEE HOW TO REPEAT) ON MTR, REPORTS MYSQL VERSION:  - MYSQL VERSION 5.1.42HOW TO REPEAT:1. BZR CLONE -R REVID:DAVI.ARNAUT@SUN.COM-20091204153658-09W7L2EDGSZT8QE7 $YOUR_LOCAL_MYSQL_REPOMYSQL-5.1-BUGTEAM2. CD MYSQL-5.1-BUGTEAM3. .BUILDCOMPILE-PENTIUM64-DEBUG-MAX4. CD MYSQL-TEST5. CREATE A TEST CASE WITH THE FOLLOWING CONTENT:-- SOURCE INCLUDEMASTER-SLAVE.INC-- SOURCE INCLUDEHAVE_BINLOG_FORMAT_MIXED_OR_STATEMENT.INCCREATE TABLE T (`KEY` INT, C2 INT);LOAD DATA INFILE ....STD_DATALOADDATA5.DAT REPLACE INTO TABLE `T`;DROP TABLE T;-- SYNC_SLAVE_WITH_MASTER-- EXIT6. .MTR <YOUR_TEST_FILE_NAME>AFTER THIS, YOUR TEST CASE SHOULD FAIL WITH THE SLAVE SQL THREAD EXHIBITING A SYNTAX ERROR.SUGGESTED FIX:=== MODIFIED FILE SQLSQL_LOAD.CC--- SQLSQL_LOAD.CCT2009-11-28 04:43:16 +0000+++ SQLSQL_LOAD.CCT2009-12-05 02:04:32 +0000@@ -640,7 +640,11 @@       IF (N++)         PFIELDS.APPEND(, );       IF (ITEM->NAME)+      +        PFIELDS.APPEND(`);         PFIELDS.APPEND(ITEM->NAME);+        PFIELDS.APPEND(`);+             ELSE         ITEM->PRINT(&PFIELDS, QT_ORDINARY);     @@ -660,7 +664,9 @@       VAL= LV++;       IF (N++)         PFIELDS.APPEND(, );+      PFIELDS.APPEND(`);       PFIELDS.APPEND(ITEM->NAME);+      PFIELDS.APPEND(`);       PFIELDS.APPEND(=);       VAL->PRINT(&PFIELDS, QT_ORDINARY);      ","SUMMARY":"BUGU00A0#49479  SLAVE STOPS WITH SYNTAX ERROR: LOAD DATA EVENT WITHOUT ESCAPED FIELD NAMES ","CLASS":1}
{"ID_DEFECT":"49522","DESCRIPTION":"     [8 DEC 2009 1:33]   ARJEN LENTZ          DESCRIPTION:A TRANSACTION APPEARS TO BE INCORRECTLY TRANSPORTED IN REPLICATION WHEN THE MASTER IS MYISAM AND THE SLAVE IS INNODB.IT WORKS FINE IN 5.0.87, BUT FAILS IN 5.1.39HOW TO REPEAT:MYSQL 5.1.39MASTERSLAVE CONFIGURATION WITH FOLLOWING TABLE ON MASTER:CREATE TABLE `MAILERTYPE` (`ID` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,`ACTIVE` TINYINT(1) UNSIGNED DEFAULT NULL,`EN_US` VARCHAR(300) DEFAULT NULL,`EMAIL_ID` INT(10) UNSIGNED NOT NULL,`MIN_RESEND_HOURS` INT(10) UNSIGNED DEFAULT NULL,PRIMARY KEY (`ID`)) ENGINE=MYISAM DEFAULT CHARSET=LATIN1;ON SLAVE THE TABLE IS CONVERTED TO INNODB:ALTER TABLE MAILERTYPE ENGINE=INNODB;ON MASTER:SET AUTOCOMMIT=0;INSERT INTO MAILERTYPE (ACTIVE, EN_US, EMAIL_ID, MIN_RESEND_HOURS, ID)VALUES (1, OA BOMBS19, 13, NULL, 1501580);COMMIT;ROLLBACK;SET AUTOCOMMIT=1;RESULT ON MASTER:MYSQL> SELECT * FROM MAILERTYPE;+---------+--------+------------+----------+------------------+| ID | ACTIVE | EN_US | EMAIL_ID | MIN_RESEND_HOURS |+---------+--------+------------+----------+------------------+| 1501580 | 1 | OA BOMBS19 | 13 | NULL |+---------+--------+------------+----------+------------------+1 ROW IN SET (0.00 SEC)RESULT ON SLAVE:SELECT * FROM MAILERTYPE;EMPTY SET (0.00 SEC) ","SUMMARY":"BUGU00A0#49522  REPLICATION PROBLEM WITH MIXED MYISAMINNODB ","CLASS":1}
{"ID_DEFECT":"50095","DESCRIPTION":"     [5 JAN 2010 18:52]   MATTHIAS LEICH          DESCRIPTION:MY SCRIPT:==========--DISABLE_ABORT_ON_ERROR--SOURCE INCLUDEMASTER-SLAVE.INCDELIMITER |;CREATE EVENT E1 ON SCHEDULE EVERY 10 SECOND DO SELECT 1;GARBAGE|DELIMITER ;|CONNECTION MASTER;--SYNC_SLAVE_WITH_MASTEREXIT;RESULT ON MYSQL-NEXT-MR REVNO: 2954 2010-01-04VERSION: 5.5.99-M3==============================================....MYSQL-TEST-RUN --MYSQLD=--BINLOG-FORMAT=ROW RPL_ML11...TEST                                RESULT   TIME (MS)------------------------------------------------------...MAIN.RPL_ML11                            [ FAIL ]        TEST ENDED AT 2010-01-05 19:01:52CURRENT_TEST: MAIN.RPL_ML11=== SHOW MASTER STATUS ===....============================= SHOW SLAVE STATUS ===...LAST_ERROR      ERROR YOU HAVE AN ERROR IN YOUR SQL SYNTAX; CHECK THE MANUAL THAT CORRESPONDS TO YOUR MYSQL SERVER VERSION FOR THE RIGHT SYNTAX TO USE NEAR E1 AT LINE 1 ON QUERY. DEFAULT DATABASE: TEST. QUERY: CREATE DEFINER=`ROOT`@`LOCALHOST` EVENT E1 ON SCHEDULE EVERY 10 SECOND DO SELECT 1;UFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDE1...ANALYZE: SYNC_WITH_MASTERMYSQLTEST: AT LINE 9: SYNC_SLAVE_WITH_MASTER FAILED: SELECT MASTER_POS_WAIT(MASTER-BIN.000001, 278, 300) RETURNED NULL INDICATING SLAVE SQL THREAD FAILUREWHY IS THE OUTCOME OF THE TEST BAD:===================================0. IN CASE THE GARBAGE DOES NOT EXIST ALL,   THE BINLOG CONTENT IS:   -----------------------------------------   USE `TEST`; CREATE DEFINER=`ROOT`@`LOCALHOST` EVENT E1 ON SCHEDULE EVERY 10 SECOND DO SELECT 1   EFFECT IS:   ----------   - EVENT GETS CREATED   - REPLICATION DOES NOT STOP1. IN CASE THE LINE DIRECT BEFORE GARBAGE IS:   --------------------------------------------      CREATE EVENT E1 ON SCHEDULE EVERY 10 SECOND DO SELECT 1;   BINLOG CONTENT IS:   ------------------   USE `TEST`; CREATE DEFINER=`ROOT`@`LOCALHOST` EVENT E1 ON SCHEDULE EVERY 10 SECOND DO SELECT 1;UFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDUFFFDE1     <== THERE IS GARBAGE AT LINE END   EFFECT IS:   ----------   - EVENT GETS CREATED   - ERROR 1064 FOR GARBAGE   - REPLICATION STOPS2. LINE DIRECT BEFORE GARBAGE IS:   --------------------------------   CREATE PROCEDURE P1 () SELECT 1;   BINLOG CONTENT IS:   ------------------   USE `TEST`; CREATE DEFINER=`ROOT`@`LOCALHOST` PROCEDURE `P1`()   EFFECT IS:   ----------   - PROCEDURE GETS CREATED   - ERROR 1064 FOR GARBAGE   - REPLICATION DOES NOT STOPMY TREES WHERE I OBSERVED THIS BUG==================================- MYSQL-5.1-BUGTEAM  REVNO: 3302 2009-12-31  VERSION: 5.1.42- MYSQL-NEXT-MR   REVNO: 2954 2010-01-04  VERSION: 5.5.99-M3- MYSQL-6.0-CODEBASE-BUGFIXING  REVNO: 3806 2010-01-04  VERSION: 6.0.14-ALPHA- ALL VERSIONS WERE GENERATED WITH  .BUILDCOMPILE-PENTIUM64-DEBUG-MAXHOW TO REPEAT:SEE ABOVE ","SUMMARY":"BUGU00A0#50095  MULTI STATEMENT INCLUDING CREATE EVENT CAUSES ROTTEN BINLOG ENTRY ","CLASS":1}
{"ID_DEFECT":"50407","DESCRIPTION":"     [18 JAN 2010 11:11]   SVEN SANDBERG          DESCRIPTION:WHEN MYSQLBINLOG IS GIVEN THE --DATABASE=X FLAG, IT ONLY PRINTS STATEMENTS EXECUTED WHEN THE DEFAULT DATABASE SELECTED BY USE WAS X. OTHER STATEMENTS ARE SUPPRESSED.ONE EXCEPTION IS BEGIN, COMMIT, ROLLBACK, AND ROLLBACK TO SAVEPOINT: ALL THESE STATEMENTS ARE PRINTED EVEN IF THE DEFAULT DATABASE SELECTED BY USE WAS NOT X. SINCE ROLLBACK TO SAVEPOINT IS PRINTED BUT SAVEPOINT IS NOT PRINTED, THE OUTPUT FROM MYSQLBINLOG WILL BE BAD: WHEN THE ROLLBACK TO SAVEPOINT STATEMENT IS EXECUTED, MYSQLD WILL ISSUE ERROR ER_SP_DOES_NOT_EXIST (1305) SAVEPOINT S DOES NOT EXIST.HOW TO REPEAT:--SOURCE INCLUDEHAVE_BINLOG_FORMAT_STATEMENT.INC--SOURCE INCLUDEHAVE_INNODB.INCUSE TEST;CREATE TABLE T1 (A INT);CREATE TABLE T2 (A INT) ENGINE = INNODB;BEGIN;  INSERT INTO T1 VALUES (1);  INSERT INTO T2 VALUES (1);  SAVEPOINT S;    INSERT INTO T1 VALUES (2);    INSERT INTO T2 VALUES (2);  ROLLBACK TO S;COMMIT;--LET $MYSQLD_DATADIR= `SELECT @@DATADIR`--EXEC $MYSQL_BINLOG --DATABASE=OTHER --FORCE-IF-OPEN $MYSQLD_DATADIRMASTER-BIN.000001SUGGESTED FIX:=== MODIFIED FILE CLIENTMYSQLBINLOG.CC--- CLIENTMYSQLBINLOG.CCT2009-11-03 00:52:57 +0000+++ CLIENTMYSQLBINLOG.CCT2010-01-18 11:09:49 +0000@@ -731,6 +731,7 @@ EXIT_STATUS PROCESS_EVENT(PRINT_EVENT_IN     CASE QUERY_EVENT:       IF (STRNCMP(((QUERY_LOG_EVENT*)EV)->QUERY, BEGIN, 5) &&            STRNCMP(((QUERY_LOG_EVENT*)EV)->QUERY, COMMIT, 6) && +          STRNCMP(((QUERY_LOG_EVENT*)EV)->QUERY, SAVEPOINT, 9) &&           STRNCMP(((QUERY_LOG_EVENT*)EV)->QUERY, ROLLBACK, 8) &&             SHALL_SKIP_DATABASE(((QUERY_LOG_EVENT*)EV)->DB))         GOTO END; ","SUMMARY":"BUGU00A0#50407  MYSQLBINLOG --DATABASE=X PRODUCES BAD OUTPUT FOR SAVEPOINTS ","CLASS":1}
{"ID_DEFECT":"51226","DESCRIPTION":"     [16 FEB 2010 23:18]   VICTOR KIRKEBO          DESCRIPTION:WHEN USING TEMPORARY TABLES THE BINARY LOG NEEDS TO INSERT @@SESSION.PSEUDO_THREAD_ID FOR THREADS THAT ARE USING TEMPORARY TABLES EACH TIME A SWITCH HAPPENS BETWEEN TWO THREADS THAT ARE BOTH USING TEMPORARY TABLES.IN THE HOW-TO-REPEAT SECTION BELOW IS SHOWN THAT IF A THREAD ISSUES A FAILING STATEMENT BEFORE EXIT THEN THE BINARY LOG WILL BE MISSING THE @@SESSION.PSEUDO_THREAD_ID FOR THAT THREAD. THIS IN TURN CAN CAUSE THE BINARY LOG TO BE MISSING @@SESSION.PSEUDO_THREAD_ID FOR THE NEXT THREAD THAT TRIES TO DO SOMETHING WITH A TEMPORARY TABLE. A SUBSEQUENT REPLAY OF THE BINARY LOG WILL THEN FAIL WITH ERROR 1146 (42S02) AT LINE NN: TABLE TTTT DOESNT EXIST.HOW TO REPEAT:CLIENT #1---------MYSQL> CREATE DATABASE MYDB;QUERY OK, 1 ROW AFFECTED (0.00 SEC)MYSQL> USE MYDB;DATABASE CHANGEDMYSQL> CREATE TEMPORARY TABLE TMP(I INT);QUERY OK, 0 ROWS AFFECTED (0.01 SEC)CLIENT #2: ---------MYSQL> USE MYDB;DATABASE CHANGEDMYSQL> CREATE TEMPORARY TABLE TMP(I INT);QUERY OK, 0 ROWS AFFECTED (0.00 SEC)CLIENT #1---------HERE WE PROVOKE AN ERROR ON PURPOSE BEFORE EXITING. I DONT THINK IT MATTERS WHAT TYPE OF ERROR WE GET HERE. IVE TRIED LOCK WAIT TIMEOUT ERRORS AND EVEN SYNTAX ERRORS. THE RESULT IS THAT UPON EXIT @@SESSION.PSEUDO_THREAD_ID WILL BE MISSING IN THE BINARY LOG FOR THE DROP TEMPORARY TABLE STATEMENT FOR CLIENT #1---------MYSQL> CREATE TEMPORARY TABLE TMP(I INT);ERROR 1050 (42S01): TABLE TMP ALREADY EXISTSMYSQL> EXIT;BYECLIENT #2---------THE ERROR THAT CLIENT #1 CAUSED ABOVE HAS THE EFFECT THAT THE BINARY LOG FOR THE INSERT STATEMENT BELOW WILL BE MISSING @@SESSION.PSEUDO_THREAD_ID WHICH IN TURN WILL MAKE A MYSQLBINLOG REPLAY FAIL WITH ERROR 1146 (42S02) AT LINE NN: TABLE MYDB.TMP DOESNT EXIST---------MYSQL> INSERT INTO TMP VALUES(1);QUERY OK, 1 ROW AFFECTED (0.00 SEC)MYSQL> EXITBYEREPLAYING THE BINARY LOG:----------------------------MYSQLBINLOG MASTER-BIN.000001 | MYSQL ERROR 1146 (42S02) AT LINE 49: TABLE MYDB.TMP DOESNT EXISTHERES THE BINARY LOG.THREAD_ID=25 IS CLIENT #1 AND THREAD_ID=26 IS CLIENT #2:--------------------------------------------------------#100216 22:58:11 SERVER ID 1  END_LOG_POS 12474137      QUERY   THREAD_ID=25    EXEC_TIME=0     ERROR_CODE=0SET TIMESTAMP=1266357491*!*;SET @@SESSION.SQL_MODE=0*!*;CREATE DATABASE MYDB*!*;# AT 12474137#100216 23:01:02 SERVER ID 1  END_LOG_POS 12474233      QUERY   THREAD_ID=25    EXEC_TIME=0     ERROR_CODE=0USE MYDB*!*;SET TIMESTAMP=1266357662*!*;SET @@SESSION.PSEUDO_THREAD_ID=25*!*;CREATE TEMPORARY TABLE TMP(I INT)*!*;# AT 12474233#100216 23:01:31 SERVER ID 1  END_LOG_POS 12474329      QUERY   THREAD_ID=26    EXEC_TIME=0     ERROR_CODE=0SET TIMESTAMP=1266357691*!*;SET @@SESSION.PSEUDO_THREAD_ID=26*!*;CREATE TEMPORARY TABLE TMP(I INT)*!*;# AT 12474329#100216 23:02:43 SERVER ID 1  END_LOG_POS 12474440      QUERY   THREAD_ID=25    EXEC_TIME=0     ERROR_CODE=0SET TIMESTAMP=1266357763*!*;*!C UTF8 **!*;SET @@SESSION.CHARACTER_SET_CLIENT=33,@@SESSION.COLLATION_CONNECTION=8,@@SESSION.COLLATION_SERVER=8*!*;DROP *!40005 TEMPORARY * TABLE IF EXISTS `TMP`*!*;# AT 12474440#100216 23:02:52 SERVER ID 1  END_LOG_POS 12474528      QUERY   THREAD_ID=26    EXEC_TIME=0     ERROR_CODE=0SET TIMESTAMP=1266357772*!*;*!C LATIN1 **!*;SET @@SESSION.CHARACTER_SET_CLIENT=8,@@SESSION.COLLATION_CONNECTION=8,@@SESSION.COLLATION_SERVER=8*!*;INSERT INTO TMP VALUES(1)*!*;# AT 12474528#100216 23:02:54 SERVER ID 1  END_LOG_POS 12474639      QUERY   THREAD_ID=26    EXEC_TIME=0     ERROR_CODE=0SET TIMESTAMP=1266357774*!*;*!C UTF8 **!*;SET @@SESSION.CHARACTER_SET_CLIENT=33,@@SESSION.COLLATION_CONNECTION=8,@@SESSION.COLLATION_SERVER=8*!*;DROP *!40005 TEMPORARY * TABLE IF EXISTS `TMP`*!*;DELIMITER ;# END OF LOG FILEROLLBACK * ADDED BY MYSQLBINLOG *; ","SUMMARY":"BUGU00A0#51226  MYSQLBINLOG REPLAY: ERROR 1146 WHEN USING TEMP TABLES + FAILING STATEMENTS  ","CLASS":1}
{"ID_DEFECT":"51251","DESCRIPTION":"     [17 FEB 2010 18:46]   MATTHIAS LEICH          DESCRIPTION:MY SCRIPT:------------SOURCE INCLUDEMASTER-SLAVE.INC--SOURCE INCLUDEHAVE_INNODB.INCSET SESSION BINLOG_FORMAT = ROW;CREATE TABLE `T1` ( PK INT , PRIMARY KEY (PK)) ENGINE=INNODB;CREATE TEMPORARY TABLE IF NOT EXISTS  T2 LIKE T1;TRUNCATE TABLE TEST . T2;--CONNECTION MASTER--SYNC_SLAVE_WITH_MASTERRESULT ON 5.1.45MYSQL-5.1-BUGTEAM REVNO: 3345 2010-02-17----------------------------------------.MYSQL-TEST-RUN.PL --MYSQLD=--BINLOG-FORMAT=ROW --RECORD --NO-CHECK-TESTCASES --SKIP-NDBCLUSTER --MEM  TRPL_ML15.TEST...MAIN.RPL_ML15                            [ FAIL ]...=== SHOW SLAVE STATUS ===---- 1. ----...LAST_ERRNO      1146LAST_ERROR      ERROR TABLE TEST.T2 DOESNT EXIST ON QUERY. DEFAULT DATABASE: TEST. QUERY: TRUNCATE TABLE TEST . T2THIS IS NOT SURPRISING BECAUSE THE BINARY LOG IS INCOMPLETE.SHOW BINLOG EVENTS IN MASTER-BIN.000001;LOG_NAME        POS     EVENT_TYPE      SERVER_ID       END_LOG_POS     INFOMASTER-BIN.000001       4       FORMAT_DESC     1       106     SERVER VER: 5.1.45-DEBUG-LOG, BINLOG VER: 4MASTER-BIN.000001       106     QUERY   1       229     USE `TEST`; CREATE TABLE `T1` ( PK INT , PRIMARY KEY (PK)) ENGINE=INNODBMASTER-BIN.000001       229     QUERY   1       316     USE `TEST`; TRUNCATE TABLE TEST . T2   <== TRUNCATING A TEMPORARY TABLE WHERE THE       THE CREATE TEMPORARY TABLE .. IS ALREADY       MISSING CANNOT WORK.THE PROBLEM DISAPPEARS IF I- USE MYISAM INSTEAD OF INNODBOR- USE SESSION BINLOG_FORMAT = STATEMENT OR ROWOR- LET T2 BE A NON TEMPORARY TABLEWE HAVE THE SAME PROBLEM IN5.5.99-M3MYSQL-NEXT REVNO: 3101 2010-02-16THERE ARE SEVERAL BUGS FOR REPLICATION, TRUNCATE ANDINNODB BUT NONE OF THEM SEEMS TO MATCH MY SCENARIO.HOW TO REPEAT:SEE ABOVE.MYSQL-TEST-RUN.PL --MYSQLD=--BINLOG-FORMAT=ROW --RECORD --NO-CHECK-TESTCASES --SKIP-NDBCLUSTER TRPL_ML15.TEST ","SUMMARY":"BUGU00A0#51251  WRONG BINLOGGING IN CASE OF TRUNCATE <TEMPORARY INNODB TABLE> ","CLASS":1}
{"ID_DEFECT":"51987","DESCRIPTION":"     [12 MAR 2010 11:45]   AXEL SCHWENKE          DESCRIPTION:A FAILED REVOKE STATEMENT IS LOGGED WITH ERROR=0 AND THUS CAUSES THE SLAVE TO STOP WHEN IT FAILS THERE TOO.HOW TO REPEAT:ON MASTER:GRANT ALL ON *.* TO FOO@1.2.3.4;QUERY OK, 0 ROWS AFFECTED (0,00 SEC)REVOKE ALL PRIVILEGES, GRANT OPTION FROM FOO;ERROR 1269 (HY000): CANT REVOKE ALL PRIVILEGES FOR ONE OR MORE OF THE REQUESTED USERSCAUSES ON SLAVE:SHOW SLAVE STATUSSLAVE_SQL_RUNNING: NOLAST_SQL_ERRNO: 1269LAST_SQL_ERROR: ERROR CANT REVOKE ALL PRIVILEGES FOR ONE OR MORE OF THE REQUESTED USERS ON QUERY. DEFAULT DATABASE: . QUERY: REVOKE ALL PRIVILEGES, GRANT OPTION FROM FOOBINLOG:# AT 106#100312 12:38:05 SERVER ID 1  END_LOG_POS 198   QUERY   THREAD_ID=1     EXEC_TIME=0     ERROR_CODE=0SET TIMESTAMP=1268393885*!*;SET @@SESSION.PSEUDO_THREAD_ID=1*!*;SET @@SESSION.FOREIGN_KEY_CHECKS=1, @@SESSION.SQL_AUTO_IS_NULL=1, @@SESSION.UNIQUE_CHECKS=1, @@SESSION.AUTOCOMMIT=1*!*;SET @@SESSION.SQL_MODE=0*!*;SET @@SESSION.AUTO_INCREMENT_INCREMENT=1, @@SESSION.AUTO_INCREMENT_OFFSET=1*!*;*!C LATIN1 **!*;SET @@SESSION.CHARACTER_SET_CLIENT=8,@@SESSION.COLLATION_CONNECTION=8,@@SESSION.COLLATION_SERVER=8*!*;SET @@SESSION.LC_TIME_NAMES=0*!*;SET @@SESSION.COLLATION_DATABASE=DEFAULT*!*;GRANT ALL ON *.* TO FOO@1.2.3.4*!*;# AT 198#100312 12:38:21 SERVER ID 1  END_LOG_POS 303   QUERY   THREAD_ID=1     EXEC_TIME=0     ERROR_CODE=0SET TIMESTAMP=1268393901*!*;REVOKE ALL PRIVILEGES, GRANT OPTION FROM FOO*!*;DELIMITER ;# END OF LOG FILESUGGESTED FIX:THE STATEMENT YIELDS ERROR 1269 ON BOTH MASTER AND SLAVE. IT SHOULD ALSO BE LOGGED WITH THIS ERROR. ","SUMMARY":"BUGU00A0#51987  REVOKE PRIVILEGES LOGS WRONG ERROR CODE ","CLASS":1}
{"ID_DEFECT":"52868","DESCRIPTION":"     [15 APR 2010 21:03]   MATTHIAS LEICH          DESCRIPTION:MY SCRIPT:------------SOURCE INCLUDEHAVE_BINLOG_FORMAT_ROW.INC--SOURCE INCLUDEMASTER-SLAVE.INC--DISABLE_WARNINGSDROP TABLE IF EXISTS T1;--ENABLE_WARNINGSCREATE TABLE T1 (  F10 BIGINT(20) DEFAULT 0,  F11 BIGINT(20) DEFAULT 0,  F12 BIGINT(20) DEFAULT 0,  F13 VARCHAR(1) DEFAULT ,  F1 BIGINT(20) DEFAULT 0,  F4 BIGINT(20) DEFAULT 0,  F2 BIGINT(20) DEFAULT 0,  F3 BIGINT(20) DEFAULT 0) ENGINE=MYISAM DEFAULT CHARSET=LATIN1;INSERT INTO T1 ( F1, F2 ) VALUES ( 1   , 35 );INSERT INTO T1 ( F1, F2 ) VALUES ( NULL, 35 );UPDATE T1 SET F1 = A;SELECT ON MASTER,F1,F2 FROM T1;--SYNC_SLAVE_WITH_MASTER--CONNECTION SLAVESELECT ON SLAVE,F1,F2 FROM T1;--CONNECTION MASTERDROP TABLE IF EXISTS T1;RESULT ON 5.1.47 (MYSQL-5.1 REVNO: 3446 2010-04-12):----------------------------------------------------STOP SLAVE;DROP TABLE IF EXISTS T1,T2,T3,T4,T5,T6,T7,T8,T9;RESET MASTER;RESET SLAVE;DROP TABLE IF EXISTS T1,T2,T3,T4,T5,T6,T7,T8,T9;START SLAVE;DROP TABLE IF EXISTS T1;CREATE TABLE T1 (F10 BIGINT(20) DEFAULT 0,F11 BIGINT(20) DEFAULT 0,F12 BIGINT(20) DEFAULT 0,F13 VARCHAR(1) DEFAULT ,F1 BIGINT(20) DEFAULT 0,F4 BIGINT(20) DEFAULT 0,F2 BIGINT(20) DEFAULT 0,F3 BIGINT(20) DEFAULT 0) ENGINE=MYISAM DEFAULT CHARSET=LATIN1;INSERT INTO T1 ( F1, F2 ) VALUES ( 1   , 35 );INSERT INTO T1 ( F1, F2 ) VALUES ( NULL, 35 );UPDATE T1 SET F1 = A;WARNINGS:WARNINGT1366TINCORRECT INTEGER VALUE: A FOR COLUMN F1 AT ROW 1WARNINGT1366TINCORRECT INTEGER VALUE: A FOR COLUMN F1 AT ROW 2   <== THESE WARNINGS ARE OK.SELECT ON MASTER,F1,F2 FROM T1;ON MASTERTF1TF2ON MASTERT0T35ON MASTERT0T35   <== THIS RESULT IS OK.SELECT ON SLAVE,F1,F2 FROM T1;ON SLAVETF1TF2ON SLAVET0T35ON SLAVETNULLT35   <== WHY IS F1 NULL FOR THE SECOND ROW?       THE REPLICATION IS OUT OF SYNC.DROP TABLE IF EXISTS T1;I WILL ADD RESULTS FOR VERSION 5.1+ SOON.HOW TO REPEAT:.MTR --MYSQLD=--BINLOG-FORMAT=ROW RPL_ML1 ","SUMMARY":"BUGU00A0#52868  WRONG HANDLING OF NULL VALUE DURING UPDATE, REPLICATION OUT OF SYNC ","CLASS":1}
{"ID_DEFECT":"53560","DESCRIPTION":"     [11 MAY 2010 11:52]   ALFRANIO CORREIA          DESCRIPTION:IF THERE IS AN ON-GOING TRANSACTION AND A TEMPORARY TABLE IS CREATED OR DROPPED, ANY FAILED STATEMENT THAT FOLLOWS THE CREATE OR DROP COMMANDS TRIGGERS A ROLLBACK AND BY CONSEQUENCE THE SLAVE WILL GO OUT SYNC BECAUSE THE BINARY LOG WILL HAVE A WRONG SEQUENCE OF EVENTS.HOW TO REPEAT:--- TEST CASE ---CREATE TABLE T_MYISAM (ID INT, NAME VARCHAR(64), PRIMARY KEY (ID)) ENGINE= MYISAM;INSERT INTO T_MYISAM (ID) VALUES(1);CREATE TABLE T_INNODB (ID INT, NAME VARCHAR(64)) ENGINE= INNODB;INSERT INTO T_INNODB (ID) VALUES(1);BEGIN;INSERT INTO T_INNODB(ID) VALUES(2);INSERT INTO T_MYISAM(ID) VALUES(3);CREATE TEMPORARY TABLE X (ID INT);--ERROR 1062INSERT INTO T_MYISAM(ID) VALUES(4),(1);INSERT INTO T_INNODB(ID) VALUES(5);COMMIT;--- RESULT ---SELECT * FROM T_INNODB;ID     NAME1      NULL2      NULL5      NULLSELECT * FROM T_INNODB;ID     NAME1      NULL5      NULLMASTER-BIN.000001       1189    QUERY   1       1257    BEGINMASTER-BIN.000001       1257    QUERY   1       1354    USE `TEST`; INSERT INTO T_INNODB(ID) VALUES(2)MASTER-BIN.000001       1354    QUERY   1       1451    USE `TEST`; INSERT INTO T_MYISAM(ID) VALUES(3)MASTER-BIN.000001       1451    QUERY   1       1547    USE `TEST`; CREATE TEMPORARY TABLE X (ID INT)MASTER-BIN.000001       1547    QUERY   1       1648    USE `TEST`; INSERT INTO T_MYISAM(ID) VALUES(4),(1)MASTER-BIN.000001       1648    QUERY   1       1719    ROLLBACKMASTER-BIN.000001       1719    QUERY   1       1787    BEGINMASTER-BIN.000001       1787    QUERY   1       1884    USE `TEST`; INSERT INTO T_INNODB(ID) VALUES(5)MASTER-BIN.000001       1884    XID     1       1911    COMMIT * XID=30 * ","SUMMARY":"BUGU00A0#53560  CREATE TEMP.DROP TEMP. ARE NOT BINLOGGED CORRECTLY AFTER A FAILED STATEMENT ","CLASS":1}
{"ID_DEFECT":"55263","DESCRIPTION":"     [14 JUL 2010 14:54]   MATTHIAS LEICH          DESCRIPTION:THE ASSERT HAPPENS IN LOG.CC:1744 :INT CHECK_BINLOG_MAGIC(IO_CACHE* LOG, CONST CHAR** ERRMSG)  CHAR MAGIC[4];  DBUG_ASSERT(MY_B_TELL(LOG) == 0); <-------------  IF (MY_B_READ(LOG, (UCHAR*) MAGIC, SIZEOF(MAGIC)))....MYSQL-TEST-RUN.PL  --MEM --MYSQLD=--BINLOG-FORMAT=STATEMENT --REPEAT=2 RPL_CROSS_VERSION --SKIP-NDB --TESTCASE-TIMEOUT=20 --SUITE=RPL RPL_CROSS_VERSIONRESULT ON 5.1.49-DEBUGMYSQL-5.1 REVNO: 3411 2010-07-08 COMPILED WITH DEBUG----------------------------------------------------THREAD 1 (PROCESS 14291):#0  0X00007F234CDEACE6 IN PTHREAD_KILL () FROM LIB64LIBPTHREAD.SO.0#1  0X0000000000B21A1F IN MY_WRITE_CORE (SIG=6) AT STACKTRACE.C:329#2  0X00000000006BD0ED IN HANDLE_SEGFAULT (SIG=6) AT MYSQLD.CC:2571#3  <SIGNAL HANDLER CALLED>#4  0X00007F234BFF35C5 IN RAISE () FROM LIB64LIBC.SO.6#5  0X00007F234BFF4BB3 IN ABORT () FROM LIB64LIBC.SO.6#6  0X00007F234BFEC1E9 IN __ASSERT_FAIL () FROM LIB64LIBC.SO.6#7  0X0000000000791F15 IN CHECK_BINLOG_MAGIC (LOG=0X1212E50, ERRMSG=0X400F1A68) AT LOG.CC:1744#8  0X00000000008721FE IN NEXT_EVENT (RLI=0X1212670) AT SLAVE.CC:4361#9  0X0000000000875BE1 IN EXEC_RELAY_LOG_EVENT (THD=0X123DD78, RLI=0X1212670) AT SLAVE.CC:2260#10 0X0000000000876C48 IN HANDLE_SLAVE_SQL (ARG=0X1211280) AT SLAVE.CC:3080#11 0X00007F234CDE6040 IN START_THREAD () FROM LIB64LIBPTHREAD.SO.0#12 0X00007F234C09408D IN CLONE () FROM LIB64LIBC.SO.6#13 0X0000000000000000 IN ?? ()HOW TO REPEAT:SEE ABOVE ","SUMMARY":"BUGU00A0#55263  ASSERT IN CHECK_BINLOG_MAGIC ","CLASS":1}
{"ID_DEFECT":"55322","DESCRIPTION":"     [16 JUL 2010 15:12]   SVEN SANDBERG          DESCRIPTION:WHEN SHOW BINLOG EVENTS IS EXECUTED, IT INCREASES THE VALUE OF @@SESSION.MAX_ALLOWED_PACKET. THE VALUE IS NOT RESTORED AT THE END OF SHOW BINLOG EVENTS.HOW TO REPEAT:SELECT @@MAX_ALLOWED_PACKET;SHOW BINLOG EVENTS;SELECT @@MAX_ALLOWED_PACKET;SHOW BINLOG EVENTS;SELECT @@MAX_ALLOWED_PACKET;SUGGESTED FIX:1. IT LOOKS STRANGE TO INCREASE MAX_ALLOWED_PACKET IN THE FIRST PLACE. MAXIMUM IS MAXIMUM, AND AUTOMATICALLY INCREASING IT BECAUSE A QUERY MAY RETURN SOMETHING BIGGER DEFATS THE PURPOSE OF HAVING A MAXIMUM. WE SHOULD CONSIDER IF IT IS BETTER TO NOT CHANGE IT AT ALL.2. IF THERE IS A GOOD REASON TO INCREASE MAX_ALLOWED_PACKET, THEN WE SHOULD RESTORE IT AT THE END OF THE STATEMENT. ","SUMMARY":"BUGU00A0#55322  SHOW BINLOG EVENTS INCREASES @@SESSION.MAX_ALLOWED_PACKET ","CLASS":1}
{"ID_DEFECT":"55375","DESCRIPTION":"     [19 JUL 2010 18:35]   SVEN SANDBERG          DESCRIPTION:WHEN THE SLAVE EXECUTES A TRANSACTION THAT IS BIGGER THAN THE LIMIT DETERMINED BY MAX_BINLOG_TRANSACTION_SIZE, THEN IT COREDUMPS.(THE ACTUAL LIMIT IS MUCH BIGGER THAN MAX_BINLOG_TRANSACTION_SIZE. THIS IS PROBABLY ANOTHER BUG.)HOW TO REPEAT:--SOURCE INCLUDEHAVE_BINLOG_FORMAT_STATEMENT.INC--SOURCE INCLUDEHAVE_INNODB.INC--SOURCE INCLUDEMASTER-SLAVE.INCCREATE TABLE T1 (A VARCHAR(100)) ENGINE = INNODB;--SYNC_SLAVE_WITH_MASTERSET GLOBAL MAX_BINLOG_CACHE_SIZE = 4096;STOP SLAVE;START SLAVE;--CONNECTION MASTER--LET $N= 380BEGIN;WHILE ($N)   INSERT INTO T1 VALUES (32BYTE);  --DEC $NCOMMIT;--SYNC_SLAVE_WITH_MASTER ","SUMMARY":"BUGU00A0#55375  TRANSACTION BIGGER THAN MAX_BINLOG_CACHE_SIZE CRASHES SLAVE ","CLASS":1}
{"ID_DEFECT":"55625","DESCRIPTION":"     [29 JUL 2010 12:25]   NIDHI SHROTRIYA          DESCRIPTION:WHILE TESTING WL5370WITH MYSQL-5.1-WL5370RBR BREAKS ON FAILING CREATE TABLE IF NOT EXISTS STMT. DELIMITER |CREATE FUNCTION F1() RETURNS INTBEGIN  INSERT INTO T2 VALUES(1);  INSERT INTO T3 VALUES(1);  RETURN 1;END|DELIMITER ;CREATE TABLE T2(A INT) ENGINE=MYISAM;CREATE TABLE T3(A INT) ENGINE=INNODB;CREATE TABLE T1(UNIQUE(A)) ENGINE=MYISAM SELECT 1 AS A UNION ALL SELECT F1();THROWS DUPLICATE KEY ERROR.RBR BREAKS ON EXECUTING BELOW STMT SAYING TABLE T1 ALREADY EXISTS.CREATE TABLE T1(UNIQUE(A)) ENGINE=INNODB SELECT 1 AS A UNION ALL SELECT F1();HOW TO REPEAT:DELIMITER |CREATE FUNCTION F1() RETURNS INTBEGIN  INSERT INTO T2 VALUES(1);  INSERT INTO T3 VALUES(1);  RETURN 1;END|DELIMITER ;CREATE TABLE T2(A INT) ENGINE=MYISAM;CREATE TABLE T3(A INT) ENGINE=INNODB;CREATE TABLE T1(UNIQUE(A)) ENGINE=MYISAM SELECT 1 AS A UNION ALL SELECT F1();CREATE TABLE T1(UNIQUE(A)) ENGINE=INNODB SELECT 1 AS A UNION ALL SELECT F1(); ","SUMMARY":"BUGU00A0#55625  RBR BREAKS ON FAILING CREATE TABLE  ","CLASS":1}
{"ID_DEFECT":"56118","DESCRIPTION":"     [19 AUG 2010 13:12]   ELENA STEPANOVA          DESCRIPTION:IF A TRANSACTION (AS A GROUP OF BINLOG EVENTS) INCLUDES ONLY CHANGES ON TRANSACTIONAL CHANGES AND CREATE TEMPORARY TABLE, STOP SLAVE DOES NOT WAIT TILL THE END OF THE GROUP, APPARENTLY ASSUMING THAT IT CAN BE SAFELY ROLLED BACK AND RE-APPLIED. BUT ITS NOT TRUE FOR CREATE, SO WHEN AFTER START SLAVE THE GROUP IS RE-PROCESSED, REPLICATION BREAKS WITH ER_TABLE_EXISTS_ERROR.REPRODUCIBLE ON PREVIOUS VERSIONS ALSO.HOW TO REPEAT:--SOURCE INCLUDEMASTER-SLAVE.INC--SOURCE INCLUDEHAVE_INNODB.INC--SOURCE INCLUDEHAVE_BINLOG_FORMAT_MIXED_OR_STATEMENT.INCDROP DATABASE IF EXISTS SLAVE_STOP;CREATE DATABASE SLAVE_STOP;USE SLAVE_STOP;CREATE TABLE SLAVE_STOP.T_DATA ( NUM INT ) ENGINE = INNODB;BEGIN;REPLACE T_DATA VALUES (0);CREATE TEMPORARY TABLE OPERATIONS ( OP VARCHAR(16) ) ENGINE = INNODB;LET $NUM=5000;--ECHO # DOING $NUM INSERTS ON MASTER--ECHO # IT CAN BE REPLACED BY ANY TRANSACTIONAL SEQUENCE OR A STATEMENT--ECHO # LONG ENOUGH FOR WAIT CONDITION TO CATCH; EXCEPT FOR USING SLEEP(),--ECHO # AS IT MIGHT MAKE STOP SLAVE HANG (SEE BUG#56096)--DISABLE_QUERY_LOGWHILE($NUM)TEVAL INSERT INTO T_DATA VALUES ($NUM);T--DEC $NUM--ENABLE_QUERY_LOGDROP TEMPORARY TABLE OPERATIONS;COMMIT;--CONNECTION SLAVELET $SHOW_STATEMENT= SHOW PROCESSLIST;LET $FIELD= INFO;LET $CONDITION= LIKE INSERT%;--SOURCE INCLUDEWAIT_SHOW_CONDITION.INCSTOP SLAVE;--ECHO # ON SLAVE: COUNT IS 0 - CHANGES WERE ROLLED BACKSELECT COUNT(*) FROM SLAVE_STOP.T_DATA;--ECHO # (IT COULD ALSO BE SEEN BY COMPARING RELAY_LOG_POS VALUES)--ECHO # ... BUT THE TEMPORARY TABLE IS STILL OPEN:SHOW STATUS LIKE %TEMP%;START SLAVE;LET $SHOW_STATEMENT= SHOW SLAVE STATUS;LET $FIELD= SLAVE_SQL_RUNNING;LET $CONDITION= = NO;--SOURCE INCLUDEWAIT_SHOW_CONDITION.INCIF ($FOUND)T--VERTICAL_RESULTSTSHOW SLAVE STATUS;T--ECHO # ^^^^T--ECHO # IF WE TRIED SYNC_SLAVE_WITH_MASTER HERE, IT WOULD HAVE FAILED,T--ECHO # BUT IT WOULD PRODUCE A LOT OF NOISE. INSTEAD WE JUSTT--ECHO # WAITED FOR SLAVE SQL THREAD TO ABORT.T# CLEANUP --CONNECTION MASTERDROP DATABASE SLAVE_STOP;--EXIT ","SUMMARY":"BUGU00A0#56118  STOP SLAVE DOES NOT WAIT TILL TRX WITH CREATE TMP TABLE ENDS, REPLICATION ABORTS ","CLASS":1}
{"ID_DEFECT":"59338","DESCRIPTION":"     [6 JAN 2011 19:05]   LEANDRO MORGADO          DESCRIPTION:WHEN USING STATEMENT BASED REPLICATION, AN INSERT ON DUPLICATE KEY UPDATE STATEMENT THAT DOES NOT CHANGE DATA (ROWS .. CHANGED: 0) WILL NOT BE RECORDED IN THE BINARY LOG. HOWEVER, AN SIMILAR UPDATE STATEMENT WILL. THIS INCONSISTENT BEHAVIOUR IS NOT DESIRABLE. HOW TO REPEAT:MASTER [LOCALHOST] MSANDBOX (TEST) > SELECT VERSION();+------------------------------------+| VERSION()                          |+------------------------------------+| 5.1.50-ENTERPRISE-GPL-ADVANCED-LOG |+------------------------------------+1 ROW IN SET (0.00 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > SHOW VARIABLES LIKE BINLOG_FORMAT;+---------------+-----------+| VARIABLE_NAME | VALUE     |+---------------+-----------+| BINLOG_FORMAT | STATEMENT |+---------------+-----------+1 ROW IN SET (0.00 SEC)************************************************************************============ TEST CASE FOR INSERT ON DUPLICATE KEY UPDATE ==============CREATE TABLE T1 (  C1 VARCHAR(15) NOT NULL,  C2 VARCHAR(20) DEFAULT NULL,  C3 TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  PRIMARY KEY (C1)) ENGINE=INNODB DEFAULT CHARSET=LATIN1;INSERT INTO T1(C1, C2) VALUES (A, B);SELECT * FROM  T1;INSERT INTO T1(C1, C2) VALUES (A, B) ON DUPLICATE KEY UPDATE C1=A, C2=B;SELECT * FROM T1;============ RESULT FOR INSERT ON DUPLICATE KEY UPDATE =================MASTER [LOCALHOST] MSANDBOX (TEST) > CREATE TABLE T1 (    ->   C1 VARCHAR(15) NOT NULL,    ->   C2 VARCHAR(20) DEFAULT NULL,    ->   C3 TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    ->   PRIMARY KEY (C1)    -> ) ENGINE=INNODB DEFAULT CHARSET=LATIN1;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > INSERT INTO T1(C1, C2) VALUES (A, B);QUERY OK, 1 ROW AFFECTED (0.01 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > SELECT * FROM T1;+----+------+---------------------+| C1 | C2   | C3                  |+----+------+---------------------+| A  | B    | 2011-01-06 20:01:26 |+----+------+---------------------+1 ROW IN SET (0.00 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > INSERT INTO T1(C1, C2) VALUES (A, B) ON DUPLICATE KEY UPDATE C1=A, C2=B;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > SELECT * FROM T1;+----+------+---------------------+| C1 | C2   | C3                  |+----+------+---------------------+| A  | B    | 2011-01-06 20:01:26 |+----+------+---------------------+1 ROW IN SET (0.00 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > SHOW BINLOG EVENTS*************************** 1. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 4 EVENT_TYPE: FORMAT_DESC  SERVER_ID: 1END_LOG_POS: 106       INFO: SERVER VER: 5.1.50-ENTERPRISE-GPL-ADVANCED-LOG, BINLOG VER: 4*************************** 2. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 106 EVENT_TYPE: QUERY  SERVER_ID: 1END_LOG_POS: 381       INFO: USE `TEST`; CREATE TABLE T1 (  C1 VARCHAR(15) NOT NULL,  C2 VARCHAR(20) DEFAULT NULL,  C3 TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  PRIMARY KEY (C1)) ENGINE=INNODB DEFAULT CHARSET=LATIN1*************************** 3. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 381 EVENT_TYPE: QUERY  SERVER_ID: 1END_LOG_POS: 449       INFO: BEGIN*************************** 4. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 449 EVENT_TYPE: QUERY  SERVER_ID: 1END_LOG_POS: 552       INFO: USE `TEST`; INSERT INTO T1(C1, C2) VALUES (A, B)*************************** 5. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 552 EVENT_TYPE: XID  SERVER_ID: 1END_LOG_POS: 579       INFO: COMMIT * XID=140 *5 ROWS IN SET (0.00 SEC)CONCLUSION: WE NEVER SEE THE INSERT .. ON DUPLICATE KEY UPDATE STATEMENT IN THE BINLOG.************************************************************************====================== TEST CASE FOR UPDATE ============================CREATE TABLE T1 (  C1 VARCHAR(15) NOT NULL,  C2 VARCHAR(20) DEFAULT NULL,  C3 TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  PRIMARY KEY (C1)) ENGINE=INNODB DEFAULT CHARSET=LATIN1;INSERT INTO T1(C1, C2) VALUES (A, B);SELECT * FROM  T1;UPDATE T1 SET C1=A, C2=B WHERE C1=A AND C2=B;SELECT * FROM T1;====================== RESULT FOR UPDATE ==========================MASTER [LOCALHOST] MSANDBOX (TEST) > CREATE TABLE T1 (    ->   C1 VARCHAR(15) NOT NULL,    ->   C2 VARCHAR(20) DEFAULT NULL,    ->   C3 TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    ->   PRIMARY KEY (C1)    -> ) ENGINE=INNODB DEFAULT CHARSET=LATIN1;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > INSERT INTO T1(C1, C2) VALUES (A, B);QUERY OK, 1 ROW AFFECTED (0.01 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > SELECT * FROM  T1;+----+------+---------------------+| C1 | C2   | C3                  |+----+------+---------------------+| A  | B    | 2011-01-06 19:58:42 |+----+------+---------------------+1 ROW IN SET (0.00 SEC)-- NOTICE CHANGED:0 BELOWMASTER [LOCALHOST] MSANDBOX (TEST) > UPDATE T1 SET C1=A, C2=B WHERE C1=A AND C2=B;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)ROWS MATCHED: 1  CHANGED: 0  WARNINGS: 0 MASTER [LOCALHOST] MSANDBOX (TEST) > SELECT * FROM T1;+----+------+---------------------+| C1 | C2   | C3                  |+----+------+---------------------+| A  | B    | 2011-01-06 19:58:42 |+----+------+---------------------+1 ROW IN SET (0.00 SEC)MASTER [LOCALHOST] MSANDBOX (TEST) > SHOW BINLOG EVENTS*************************** 1. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 4 EVENT_TYPE: FORMAT_DESC  SERVER_ID: 1END_LOG_POS: 106       INFO: SERVER VER: 5.1.50-ENTERPRISE-GPL-ADVANCED-LOG, BINLOG VER: 4*************************** 2. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 106 EVENT_TYPE: QUERY  SERVER_ID: 1END_LOG_POS: 381       INFO: USE `TEST`; CREATE TABLE T1 (  C1 VARCHAR(15) NOT NULL,  C2 VARCHAR(20) DEFAULT NULL,  C3 TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  PRIMARY KEY (C1)) ENGINE=INNODB DEFAULT CHARSET=LATIN1*************************** 3. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 381 EVENT_TYPE: QUERY  SERVER_ID: 1END_LOG_POS: 449       INFO: BEGIN*************************** 4. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 449 EVENT_TYPE: QUERY  SERVER_ID: 1END_LOG_POS: 552       INFO: USE `TEST`; INSERT INTO T1(C1, C2) VALUES (A, B)*************************** 5. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 552 EVENT_TYPE: XID  SERVER_ID: 1END_LOG_POS: 579       INFO: COMMIT * XID=132 **************************** 6. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 579 EVENT_TYPE: QUERY  SERVER_ID: 1END_LOG_POS: 647       INFO: BEGIN*************************** 7. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 647 EVENT_TYPE: QUERY  SERVER_ID: 1END_LOG_POS: 762       INFO: USE `TEST`; UPDATE T1 SET C1=A, C2=B WHERE C1=A AND C2=B*************************** 8. ROW ***************************   LOG_NAME: MYSQL-BIN.000001        POS: 762 EVENT_TYPE: QUERY  SERVER_ID: 1END_LOG_POS: 831       INFO: COMMIT8 ROWS IN SET (0.00 SEC)CONCLUSION: ROW 7 OF THE BINLOG EVENTS SHOW THAT THE UPDATE WAS LOGGED.SUGGESTED FIX:THIS IS INCONSISTENT AS NO STATEMENT CHANGES ROWS BUT ONE IS LOGGED AND THE OTHER ONE ISNT. I THINK EITHER BOTH ARE LOGGED OR NON ARE.BINARY LOGGING BOTH ENTRIES IS PROBABLY SAFER TO COVER EDGE USER CASES AND HACKS LIKE THIS:MYSQL> UPDATE TBL SET COL = 1 WHERE @@SERVER_ID = 2; ","SUMMARY":"BUGU00A0#59338  INCONSISTENCY IN BINLOG FOR STATEMENTS THAT DONT CHANGE ANY ROWS STATEMENT SBR ","CLASS":1}
