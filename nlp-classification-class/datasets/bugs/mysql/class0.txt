{"ID_DEFECT":"34300","DESCRIPTION":"     [4 FEB 2008 23:24]   OMER BARNIR          DESCRIPTION:A TABLE INCLUDING VARIOUS DATA TYPES, INCLUDING TINY TEXT AND TINY BLOBS.THE TABLE IS EXPORTED AND IMPORTED THIS RESULTS IN THE TINY BLOB FIELDS BEING CORRUPLED. IF AT THIS POINT THE TABLE IS ALTERED (AND A COLUMN IS ADDED TO IT), THE TINY TEXT FIELD GETS CORRUPTED AS WELL.IN BOTH CASES THE CORRUPTION RESULTS IN THE FIEELDS BEING FILLED WITH HEX(0)THE BUG IS NOT OBSERVED (FOR THE CASE OF THE TINY TEXT IF THE TABLE IS NOT EXPORTEDIMPORTED.THE BUG IS NOT OBSERVED IF THE FIELDS IN THE ROW HAVE SMALL VALUES (I.E. SHORT STRINGS IN ALL TEXTBLOB FIELDS THE BUG IS NOT OBSERVED IN 5.0HOW TO REPEAT:1) DOWNLOAD THE ATTACHED TAR.GZ FILE AND EXTRACT IT IN THE MYSQL-TEST-DIRECTORY2) LOAD THE DATA, RUN:   PERL .MYSQL-TEST-RUN.PL --DO-TEST=TEST043) EXPORT THE DATA:   A. RESTART THE SERVER:      PERL .MYSQL-TEST-RUN.PL --START-DIRTY --MYSQLD=--MAX-ALLOWED-PACKET=256M   B. DUMP THE DATABASE:      ..BINMYSQLDUMP --PORT=9306 --PROTOCOL=TCP --USER=ROOT --ADD-DROP-TABLE                       --FLUSH-PRIVILEGES --FORCE --ALL-DATABASES                        --DEFAULT-CHARACTER-SET=LATIN1                         --MAX_ALLOWED_PACKET=256M > .ALLDB.DUMP4) RESTART WITH A FRESH DATABASE:   PERL .MYSQL-TEST-RUN.PL --START-AND-EXIT --MYSQLD=--MAX-ALLOWED-PACKET=256M5) IMPORT THE DATA:    ..BINMYSQL --PORT=9306 --PROTOCOL=TCP --USER=ROOT                 --MAX_ALLOWED_PACKET=256M < .ALLDB.DUMP6) LOGIN WITH THE CLIENT:   ..BINMYSQL --PORT=9306 --PROTOCOL=TCP --USER=ROOT 7) RUN THE FOLLOWING SQL:   - USE TYPESDB;   - SELECT F1, F2, LEFT(F4,10), RIGHT(F4,10), HEX(LEFT(F4,10)),      HEX(RIGHT(F4,10)), LEFT(F5,10), RIGHT(F5,10), HEX(LEFT(F5,10)),      HEX(RIGHT(F5,10)), LEFT(F8,10), RIGHT(F8,10), HEX(LEFT(F8,10)),      HEX(RIGHT(F8,10)), LEFT(F9,10), RIGHT(F9,10), HEX(LEFT(F9,10)),      HEX(RIGHT(F9,10)) FROM T1*************************** 1. ROW ***************************               F1: A               F2: B      LEFT(F4,10): CABABABABA     RIGHT(F4,10): ABABABWXYZ HEX(LEFT(F4,10)): 63616261626162616261HEX(RIGHT(F4,10)): 6162616261627778797A      LEFT(F5,10): WE THE PEO     RIGHT(F5,10): HIRD MYSQL HEX(LEFT(F5,10)): 5765207468652050656FHEX(RIGHT(F5,10)): 68697264204D7953514C      LEFT(F8,10):                      <-- SHOULD BE CABABABABA     RIGHT(F8,10):                      <-- SHOULD BE ABABABWXYZ HEX(LEFT(F8,10)): 00000000000000000000 <-- SHOULD BE 63616261626162616261HEX(RIGHT(F8,10)): 00000000000000000000 <-- SHOULD BE 6162616261627778797A      LEFT(F9,10): WE THE PEO     RIGHT(F9,10): HIRD MYSQL HEX(LEFT(F9,10)): 5765207468652050656FHEX(RIGHT(F9,10)): 68697264204D7953514C1 ROW IN SET (0.00 SEC)  - RUN: ALTER TABLE T1 ADD COLUMN (F59 VARCHAR(10));  - RUN: SELECT F1, F2, LEFT(F4,10), RIGHT(F4,10), HEX(LEFT(F4,10)),      HEX(RIGHT(F4,10)), LEFT(F5,10), RIGHT(F5,10), HEX(LEFT(F5,10)),      HEX(RIGHT(F5,10)), LEFT(F8,10), RIGHT(F8,10), HEX(LEFT(F8,10)),      HEX(RIGHT(F8,10)), LEFT(F9,10), RIGHT(F9,10), HEX(LEFT(F9,10)),      HEX(RIGHT(F9,10)) FROM T1*************************** 1. ROW ***************************               F1: A               F2: B      LEFT(F4,10):                      <-- SHOULD BE CABABABABA     RIGHT(F4,10):                      <-- SHOULD BE ABABABWXYZ HEX(LEFT(F4,10)): 00000000000000000000 <-- SHOULD BE 63616261626162616261HEX(RIGHT(F4,10)): 00000000000000000000 <-- SHOULD BE 6162616261627778797A      LEFT(F5,10): WE THE PEO     RIGHT(F5,10): HIRD MYSQL HEX(LEFT(F5,10)): 5765207468652050656FHEX(RIGHT(F5,10)): 68697264204D7953514C      LEFT(F8,10):                      <-- SHOULD BE CABABABABA     RIGHT(F8,10):                      <-- SHOULD BE ABABABWXYZ HEX(LEFT(F8,10)): 00000000000000000000 <-- SHOULD BE 63616261626162616261HEX(RIGHT(F8,10)): 00000000000000000000 <-- SHOULD BE 6162616261627778797A      LEFT(F9,10): WE THE PEO     RIGHT(F9,10): HIRD MYSQL HEX(LEFT(F9,10)): 5765207468652050656FHEX(RIGHT(F9,10)): 68697264204D7953514C1 ROW IN SET (0.00 SEC)NOTE F4 IS TINYTEXT AND F8 IS TINYBLOB   SUGGESTED FIX:NO CORRUPTION SHOULD HAPPEN ","SUMMARY":"BUGU00A0#34300  TINYBLOB & TINYTEXT FIELDS CURRUPTED AFTER EXPORTIMPORT AND ALTER IN 5.1 ","CLASS":0}
{"ID_DEFECT":"34335","DESCRIPTION":"     [5 FEB 2008 23:27]   PETER GULUTZAN          DESCRIPTION:I CREATE AN INNODB TABLE WITH TWO COLUMNS.ONE COLUMN IS BIGINT AND AUTO_INCREMENT.I INSERT, AUTO_INCREMENT COLUMN = 9223372036854775807.I INSERT, AUTO_INCREMENT COLUMN IS NULL.CRASH.IT REMINDS ME OF BUG#31860, BUT THE TEST CASE FORBUG#31860 WORKS FINE NOW.HOW TO REPEAT:MYSQL> CREATE TABLE TH (S1 BIGINT PRIMARY KEY AUTO_INCREMENT, S2 VARCHAR(10)) ENGINE=INNODB;QUERY OK, 0 ROWS AFFECTED (0.02 SEC)MYSQL> INSERT INTO TH VALUES (9223372036854775807, NULL);QUERY OK, 1 ROW AFFECTED (0.01 SEC)MYSQL> INSERT INTO TH (S2) VALUES (E);ERROR 2013 (HY000): LOST CONNECTION TO MYSQL SERVER DURING QUERY ","SUMMARY":"BUGU00A0#34335  INNODB: CRASH WITH AUTO_INCREMENT BIGINT ","CLASS":0}
{"ID_DEFECT":"35077","DESCRIPTION":"     [5 MAR 2008 12:13]   PHILIP STOEV          DESCRIPTION:INNODB DEADLOCKS ON CONCURRENT DDL STATEMENTS. CPU USAGE REMAINS AT 100% (ONE CORE OUT OF TWO OCCUPIED).HOW TO REPEAT:SIMPLER TESTCASE WILL FOLLOW SHORTLY. ","SUMMARY":"BUGU00A0#35077  VERY SLOW DROP TABLE (ALTER TABLE, OPTIMIZE TABLE) ON COMPRESSED TABLES ","CLASS":0}
{"ID_DEFECT":"36793","DESCRIPTION":"     [19 MAY 2008 7:44]   ALEXEY BOTCHKOV          DESCRIPTION:THE RPL_INNODB_BUG28430 FAILS ON SOLARIS AS THE REPLICATED INNODB TABLEGETS WEIRD AUTO_INCREMENT COUNTER.-) ENGINE=INNODB AUTO_INCREMENT=1001+) ENGINE=INNODB AUTO_INCREMENT=256001HOW TO REPEAT:REMOVE THE RPL_INNODB_BUG28430 FROM THE DISABLE.DEF AND .MYSQL-TEST-RUN ITSUGGESTED FIX:NO IDEA YET. ","SUMMARY":"BUGU00A0#36793  RPL_INNODB_BUG28430 FAILS ON SOLARIS ","CLASS":0}
{"ID_DEFECT":"37788","DESCRIPTION":"     [1 JUL 2008 22:28]   JUSTIN TOLMER          DESCRIPTION:WHEN USING THE INNODB PLUGIN AND DOING AN ALTER TABLE TO COMPRESS A TABLE, AUTO_INCREMENT SOMETIMES CHANGES TO AN INCORRECT VALUE.HOW TO REPEAT:EDIT MY.CNF TO INCLUDE:INNODB_FILE_PER_TABLEINNODB_FILE_FORMAT=BARRACUDARUN:DROP TABLE IF EXISTS TEST.T1;CREATE TABLE TEST.T1 (MYID INT NOT NULL AUTO_INCREMENT, MYNAME VARCHAR(128) NOT NULL DEFAULT , PRIMARY KEY (MYID)) ENGINE=INNODB;INSERT INTO TEST.T1 VALUES (-1, TEST), (1, TEST), (2, TEST);SHOW CREATE TABLE TEST.T1;NOTE THAT AUTO_INCREMENT=3 IS DISPLAYED. RUN:DROP TABLE IF EXISTS TEST.T1;CREATE TABLE TEST.T1 (MYID INT NOT NULL AUTO_INCREMENT, MYNAME VARCHAR(128) NOT NULL DEFAULT , PRIMARY KEY (MYID)) ENGINE=INNODB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;INSERT INTO TEST.T1 VALUES (-1, TEST), (1, TEST), (2, TEST);SHOW CREATE TABLE TEST.T1;AUTO_INCREMENT=3 AGAIN. RUN:DROP TABLE IF EXISTS TEST.T1;CREATE TABLE TEST.T1 (MYID INT NOT NULL AUTO_INCREMENT, MYNAME VARCHAR(128) NOT NULL DEFAULT , PRIMARY KEY (MYID)) ENGINE=INNODB;INSERT INTO TEST.T1 VALUES (-1, TEST), (1, TEST), (2, TEST);SHOW CREATE TABLE TEST.T1;STILL =3. FINALLY:ALTER TABLE TEST.T1 ENGINE=INNODB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;SHOW CREATE TABLE TEST.T1;RESULT: AUTO_INCREMENT=18446744073709551615, WHICH ISNT CORRECT. ","SUMMARY":"BUGU00A0#37788  INNODB PLUGIN: AUTO_INCREMENT WRONG FOR COMPRESSED TABLES ","CLASS":0}
{"ID_DEFECT":"38185","DESCRIPTION":"     [16 JUL 2008 22:03]   NEEL NADGIR          DESCRIPTION:HA_INNOBASE::INFO CAN HOLD LOCKS EVEN WHEN CALLED WITH HA_STATUS_NO_LOCKCAUSING SCALING ISSUES ON MULTI-CORE SYSTEMS.FROM THE SOURCE, THE COMMENT FOR HA_STATUS_NO_LOCK SAYS*  ASSUMING THE TABLE KEEPS SHARED ACTUAL COPY OF THE INFO AND  LOCAL, POSSIBLY OUTDATED COPY, THE FOLLOWING FLAG MEANS THAT  IT SHOULD NOT TRY TO GET THE ACTUAL DATA (LOCKING THE SHARED STRUCTURE)  SLIGHTLY OUTDATED VERSION WILL SUFFICE*#DEFINE HA_STATUS_NO_LOCK        2HOWEVER, THE FIX FOR BUG#32440 CAUSES HA_INNOBASE::INFO TO HOLD A LOCK EVEN WHEN IT CALLED WITH HA_STATUS_NO_LOCKTHE FUNCTION THAT HOLDS THE LOCK IS FSP_GET_AVAILABLE_SPACE_IN_FREE_EXTENTS()MAKE_JOIN_STATISTICS() CALLS STORAGE_ENGINE->INFO() WITH HA_STATUS_NO_LOCK. ::INFO() CALLS FSP_GET_AVAILABLE_SPACE_IN_FREE_EXTENTS()WHICH LOCKS A LATCH. THIS LOCK CAN GET HOT WHEN MULTIPLE THREADS ARE EXECUTING QUERIES ON MULTI-CORE MACHINES.HOW TO REPEAT:A SIMPLE WAY TO TRIGGER THE CONTENTION IS TO USE SYSBENCH SYSBENCH  --MAX-REQUESTS=0 --TEST=OLTP --OLTP-TABLE-SIZE=10000000 --OLTP-DIST-TYPE=SPECIAL --OLTP-READ-ONLY=ON --OLTP-POINT-SELECTS=10 --OLTP-SIMPLE-RANGES=0 --OLTP-SUM-RANGES=0 --OLTP-ORDER-RANGES=0 --OLTP-DISTINCT-RANGES=0 --NUM-THREADS=64 --MAX-TIME=30 RUN ","SUMMARY":"BUGU00A0#38185  HA_INNOBASE::INFO CAN HOLD LOCKS EVEN WHEN CALLED WITH HA_STATUS_NO_LOCK ","CLASS":0}
{"ID_DEFECT":"38741","DESCRIPTION":"     [12 AUG 2008 8:35]   ALEXANDER NOZDRIN          DESCRIPTION:MAIN.INNODB_MYSQL SPORADICALLY CRASHES ON DEBX86-B IN EMBEDDED MODEWITH THE FOLLOWING SYMPTOMS (IN SERVER LOG):---------------------------------------------------------------------WARNING:  ATTEMPTING BACKTRACE...    COUNT: 1    FILES:    MASTER.ERR    TESTS:    MAIN.INNODB_MYSQLWARNING:  MYSQLTEST_EMBEDDED: SQL_PARSE.CC:5529: VOID MYSQL_RESET_THD_FOR_NEXT_COMMAND(THD*): ASSERTION `!THD->SPCONT FAILED.    COUNT: 1    FILES:    MASTER.ERR    TESTS:    MAIN.INNODB_MYSQL---------------------------------------------------------------------THE CAUSE OF THIS BUG MIGHT BE SIMILAR TO THE ONE OF BUG#37795.HOW TO REPEAT:HTTPS:INTRANET.MYSQL.COMSECUREPUSHBUILDXREF.PL?STARTDATE=&ENDDATE=&DIR=&PLAT=DEBX86-B... ","SUMMARY":"BUGU00A0#38741  MAIN.INNODB_MYSQL CRASHES RANDOMLY (2) ","CLASS":0}
{"ID_DEFECT":"39320","DESCRIPTION":"     [8 SEP 2008 15:53]   SHANE BESTER          DESCRIPTION:INNODB ASSERTION WITH INNODB_LOCKS_UNSAFE_FOR_BINLOG=1 AND SOME SEQUENCE OF INSERT AFTER TRIGGER, WITH STORED ROUTINE, STORED FUNCTIONS, AND VIES. REMOVINGINNODB_LOCKS_UNSAFE_FOR_BINLOG FIXED THE PROBLEM.080829 15:06:43 - MYSQLD GOT SIGNAL 6 ;080829 15:06:43  INNODB: ASSERTION FAILURE IN THREAD 1161070912 IN FILE BTRBTR0PCUR.C LINE 217INNODB: WE INTENTIONALLY GENERATE A MEMORY TRAP.INNODB: SUBMIT A DETAILED BUG REPORT TO HTTP:BUGS.MYSQL.COM.INNODB: IF YOU GET REPEATED ASSERTION FAILURES OR CRASHES, EVENINNODB: IMMEDIATELY AFTER THE MYSQLD STARTUP, THERE MAY BEINNODB: CORRUPTION IN THE INNODB TABLESPACE. PLEASE REFER TOINNODB: HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENFORCING-RECOVERY.HTMLINNODB: ABOUT FORCING RECOVERY.MYSQLD(PRINT_STACKTRACE+0X24)[0X6CB7A4]MYSQLD(HANDLE_SEGFAULT+0X201)[0X5B44C1]LIBPTHREAD.SO.0[0X3D8D80DE80]LIBC.SO.6(GSIGNAL+0X35)[0X3D8C830155]LIBC.SO.6(ABORT+0X110)[0X3D8C831BF0]MYSQLD(BTR_PCUR_RESTORE_POSITION+0X3C9)MYSQLD(ROW_UNLOCK_FOR_MYSQL+0X1EA)MYSQLD[0X612B4C]MYSQLD(SUB_SELECTMYSQLD[0X612B0C]MYSQLD(SUB_SELECTMYSQLD[0X612781]MYSQLD(JOIN::EXEC()MYSQLD(MYSQL_SELECTMYSQLD(HANDLE_SELECTMYSQLD(MYSQL_EXECUTE_COMMANDMYSQLD(SP_INSTR_STMT::EXEC_COREMYSQLD(SP_LEX_KEEPER::RESET_LEX_AND_EXEC_COREMYSQLD(SP_INSTR_STMT::EXECUTEMYSQLD(SP_HEAD::EXECUTE(THD*)+0X363)MYSQLD(SP_HEAD::EXECUTE_PROCEDUREMYSQLD(MYSQL_EXECUTE_COMMANDMYSQLD(SP_INSTR_STMT::EXEC_COREMYSQLD(SP_LEX_KEEPER::RESET_LEX_AND_EXEC_COREMYSQLD(SP_INSTR_STMT::EXECUTEMYSQLD(SP_HEAD::EXECUTEMYSQLD(SP_HEAD::EXECUTE_PROCEDUREMYSQLD(MYSQL_EXECUTE_COMMANDMYSQLD(SP_INSTR_STMT::EXEC_COREMYSQLD(SP_LEX_KEEPER::RESET_LEX_AND_EXEC_COREMYSQLD(SP_INSTR_STMT::EXECUTEMYSQLD(SP_HEAD::EXECUTEMYSQLD(SP_HEAD::EXECUTE_TRIGGERMYSQLD(TABLE_TRIGGERS_LIST::PROCESS_TRIGGERSMYSQLD(WRITE_RECORDMYSQLD(MYSQL_INSERTMYSQLD(MYSQL_EXECUTE_COMMANDMYSQLD(MYSQL_PARSEMYSQLD(DISPATCH_COMMANDMYSQLD(DO_COMMANDMYSQLD(HANDLE_ONE_CONNECTION+0X11D)HOW TO REPEAT:RUN MYSQLD WITH --INNODB_LOCKS_UNSAFE_FOR_BINLOG=1NO KNOWN TESTCASE.GENERIC FLOW OF THE CRASHING CODE WAS THIS: (SEE PRIVATE NOTE FOR ACTUAL NAMES)1) SOMEBODY INSERT A RECORD INTO `T1` TABLE2) AFTER INSERT TRIGGER (`T1_AFTER_INSERT_TRIGGER`) IS INVOKED3) TRIGGER CALLS SP `SP1`4) THAT SP CALLS ANOTHER SP `SP2`5) THIS SP DOES REPLACE INTO .. SELECT .. FROM <BIG VIEW>:6) THIS VIEW IS A JOIN OF 6 TABLES INCLUDING A STORED FUNCTION CALL IN ONE JOIN CONDITION ","SUMMARY":"BUGU00A0#39320  ASSERT BTRBTR0PCUR.C LINE 217 -INNODB_LOCKS_UNSAFE_FOR_BINLOG OR READ COMMITTED ","CLASS":0}
{"ID_DEFECT":"39438","DESCRIPTION":"     [14 SEP 2008 10:33]   SHANE BESTER          DESCRIPTION:WHEN RUNNING THE TESTCASE FOR BUG #39436 AGAINST 5.1.X THE CRASH HAPPENS IN THE SELECT WITH FOLLOWING CALL STACK:MYSQLD.EXE!FIL_SPACE_GET_LATCH  LINE 341MYSQLD.EXE!FSP_GET_AVAILABLE_SPACE_IN_FREE_EXTENTSMYSQLD.EXE!HA_INNOBASE::INFOMYSQLD.EXE!MAKE_JOIN_STATISTICSMYSQLD.EXE!JOIN::OPTIMIZEMYSQLD.EXE!MYSQL_SELECTMYSQLD.EXE!HANDLE_SELECTMYSQLD.EXE!EXECUTE_SQLCOM_SELECTMYSQLD.EXE!MYSQL_EXECUTE_COMMANDMYSQLD.EXE!MYSQL_PARSEMYSQLD.EXE!DISPATCH_COMMANDMYSQLD.EXE!DO_COMMANDMYSQLD.EXE!HANDLE_ONE_CONNECTIONMYSQLD.EXE!PTHREAD_STARTMYSQLD.EXE!_CALLTHREADSTARTMYSQLD.EXE!_THREADSTARTKERNEL32.DLL!BASETHREADSTARTHOW TO REPEAT:SEE ATTACHED .C FILE ","SUMMARY":"BUGU00A0#39438  TESTCASE FOR BUG#39436 CRASHES ON 5.1 IN FIL_SPACE_GET_LATCH ","CLASS":0}
{"ID_DEFECT":"40386","DESCRIPTION":"     [29 OCT 2008 9:24]   ARTUR BANUL          DESCRIPTION:WHILE TRUNCATING TABLE QUERY CACHE IS NOT FLUSHED.HOW TO REPEAT:MYSQL> SHOW GLOBAL VARIABLES LIKE QUERY_CACHE_TYPE;+------------------+-------+| VARIABLE_NAME    | VALUE |+------------------+-------+| QUERY_CACHE_TYPE | OFF   |+------------------+-------+1 ROW IN SET (0.00 SEC)MYSQL> CREATE TABLE TEST(ID INTEGER NOT NULL) ENGINE INNODB;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)MYSQL> INSERT INTO TEST VALUES(123456);QUERY OK, 1 ROW AFFECTED (0.00 SEC)MYSQL> SELECT * FROM TEST;+--------+| ID     |+--------+| 123456 |+--------+1 ROW IN SET (0.00 SEC)MYSQL> TRUNCATE TABLE TEST;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)MYSQL> SELECT * FROM TEST;+--------+| ID     |+--------+| 123456 |+--------+1 ROW IN SET (0.00 SEC)MYSQL> SELECT SQL_NO_CACHE * FROM TEST;EMPTY SET (0.00 SEC)#--------------------------------------------------#WITH NEW SETTINGS#--------------------------------------------------MYSQL> SET GLOBAL QUERY_CACHE_TYPE = 1;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> SHOW GLOBAL VARIABLES LIKE QUERY_CACHE_TYPE;+------------------+-------+| VARIABLE_NAME    | VALUE |+------------------+-------+| QUERY_CACHE_TYPE | ON    |+------------------+-------+1 ROW IN SET (0.01 SEC)MYSQL> DROP TABLE TEST;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)MYSQL> CREATE TABLE TEST(ID INTEGER NOT NULL) ENGINE INNODB;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)MYSQL> INSERT INTO TEST VALUES(123456);QUERY OK, 1 ROW AFFECTED (0.01 SEC)MYSQL> SELECT * FROM TEST;+--------+| ID     |+--------+| 123456 |+--------+1 ROW IN SET (0.00 SEC)MYSQL> TRUNCATE TABLE TEST;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> SELECT * FROM TEST;+--------+| ID     |+--------+| 123456 |+--------+1 ROW IN SET (0.00 SEC)MYSQL> SELECT SQL_NO_CACHE * FROM TEST;EMPTY SET (0.00 SEC)#--------------------------------------------------#WITH NEW SETTINGS#--------------------------------------------------MYSQL> SET GLOBAL QUERY_CACHE_TYPE = 2;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> SHOW GLOBAL VARIABLES LIKE QUERY_CACHE_TYPE;+------------------+--------+| VARIABLE_NAME    | VALUE  |+------------------+--------+| QUERY_CACHE_TYPE | DEMAND |+------------------+--------+1 ROW IN SET (0.00 SEC)MYSQL> DROP TABLE TEST;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> CREATE TABLE TEST(ID INTEGER NOT NULL) ENGINE INNODB;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> INSERT INTO TEST VALUES(123456);QUERY OK, 1 ROW AFFECTED (0.00 SEC)MYSQL> SELECT * FROM TEST;+--------+| ID     |+--------+| 123456 |+--------+1 ROW IN SET (0.00 SEC)MYSQL> TRUNCATE TABLE TEST;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> SELECT * FROM TEST;+--------+| ID     |+--------+| 123456 |+--------+1 ROW IN SET (0.00 SEC)MYSQL> SELECT SQL_NO_CACHE * FROM TEST;EMPTY SET (0.00 SEC) ","SUMMARY":"BUGU00A0#40386  NOT FLUSHING QUERY CACHE AFTER TRUNCATE ","CLASS":0}
{"ID_DEFECT":"42075","DESCRIPTION":"     [13 JAN 2009 10:16]   MARKO MU00E4KELU00E4          DESCRIPTION:THE FUNCTION DICT_LOAD_TABLE() WILL INVOKE DICT_MEM_TABLE_FREE() IF DICT_LOAD_INDEXES() FAILS. THIS IS WRONG, BECAUSE THE DATA DICTIONARY CACHE WOULD STILL BE POINTING TO THE FREED TABLE.HOW TO REPEAT:CREATE MANY TEMPORARY TABLES, KILL MYSQLD, AND LET IT RECOVER. SOONER OR LATER, A TABLE LOOKUP WILL RESULT IN A BOGUS POINTER LOOKUP, WHICH WILL HOPEFULLY CRASH THE SERVER INSTEAD OF CORRUPTING MEMORY FURTHER.SUGGESTED FIX:CALL DICT_TABLE_REMOVE_FROM_CACHE() INSTEAD OF DICT_MEM_TABLE_FREE(). ","SUMMARY":"BUGU00A0#42075  DICT_LOAD_INDEXES FAILURE IN DICT_LOAD_TABLE WILL CORRUPT THE DICTIONARY CACHE ","CLASS":0}
{"ID_DEFECT":"42101","DESCRIPTION":"     [14 JAN 2009 9:27]   MARKO MU00E4KELU00E4          DESCRIPTION:IF THE GLOBAL VARIABLE INNODB_COMMIT_CONCURRENCY IS SET TO 0 WHILE INNOBASE_COMMIT() IS BEING EXECUTED, SOME THREADS MAY REMAIN STUCK IN PTHREAD_COND_WAIT(&COMMIT_COND, &COMMIT_COND_M).FURTHERMORE, THE SYMBOL SRV_COMMIT_CONCURRENCY COULD BE DECLARED STATIC IN HA_INNODB.CC, AS IT IS NOT REFERENCED ANYWHERE ELSE. AND THE DOCUMENTATION OF THE VARIABLE INNODB_COMMIT_CONCURRENCY IS LACKING. IT SHOULD SAY SOMETHING LIKE THE MAXIMUM NUMBER OF CONCURRENT COMMITS INSIDE INNODB (0 MEANS UNLIMITED) IN ADDITION TO THE CURRENT COMMENT HELPS IN PERFORMANCE TUNING IN HEAVILY CONCURRENT ENVIRONMENTS.HOW TO REPEAT:SET INNODB_COMMIT_CONCURRENCY=1, START A COMMIT-INTENSIVE WORKLOAD WITH MANY THREADS, AND SET INNODB_COMMIT_CONCURRENCY=0.SUGGESTED FIX:ASSIGN THE RESULT TO A LOCAL VARIABLE IN INNOBASE_COMMIT() OR WRITE AN UPDATE CALLBACK FOR INNODB_COMMIT_CONCURRENCY THAT WILL PTHREAD_SIGNAL(&COMMIT_COND), OR DO BOTH. ","SUMMARY":"BUGU00A0#42101  RACE CONDITION IN INNODB_COMMIT_CONCURRENCY ","CLASS":0}
{"ID_DEFECT":"44030","DESCRIPTION":"     [2 APR 2009 5:39]   DANIEL FISKE          DESCRIPTION:STARTED GETTING THE FOLLOWING CRASH REPORT IN ERROR LOGS090402  6:25:20  INNODB: ERROR: (1500) COULDNT READ THE MAX(XYZ) AUTOINC VALUE FROM THE INDEX (PRIMARY).090402  6:25:20  INNODB: ASSERTION FAILURE IN THREAD 2940 IN FILE .HANDLERHA_INNODB.CC LINE 2595INNODB: FAILING ASSERTION: ERROR == DB_SUCCESSINNODB: WE INTENTIONALLY GENERATE A MEMORY TRAP.INNODB: SUBMIT A DETAILED BUG REPORT TO HTTP:BUGS.MYSQL.COM.INNODB: IF YOU GET REPEATED ASSERTION FAILURES OR CRASHES, EVENINNODB: IMMEDIATELY AFTER THE MYSQLD STARTUP, THERE MAY BEINNODB: CORRUPTION IN THE INNODB TABLESPACE. PLEASE REFER TOINNODB: HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENFORCING-RECOVERY.HTMLINNODB: ABOUT FORCING RECOVERY.090402  6:25:20 - MYSQLD GOT EXCEPTION 0XC0000005 ;THIS COULD BE BECAUSE YOU HIT A BUG. IT IS ALSO POSSIBLE THAT THIS BINARYOR ONE OF THE LIBRARIES IT WAS LINKED AGAINST IS CORRUPT, IMPROPERLY BUILT,OR MISCONFIGURED. THIS ERROR CAN ALSO BE CAUSED BY MALFUNCTIONING HARDWARE.WE WILL TRY OUR BEST TO SCRAPE UP SOME INFO THAT WILL HOPEFULLY HELP DIAGNOSETHE PROBLEM, BUT SINCE WE HAVE ALREADY CRASHED, SOMETHING IS DEFINITELY WRONGAND THIS MAY FAIL.KEY_BUFFER_SIZE=89128960READ_BUFFER_SIZE=65536MAX_USED_CONNECTIONS=3MAX_THREADS=100THREADS_CONNECTED=3IT IS POSSIBLE THAT MYSQLD COULD USE UP TO KEY_BUFFER_SIZE + (READ_BUFFER_SIZE + SORT_BUFFER_SIZE)*MAX_THREADS = 119670 KBYTES OF MEMORYHOPE THATS OK; IF NOT, DECREASE SOME VARIABLES IN THE EQUATION.THD: 0X114CB600ATTEMPTING BACKTRACE. YOU CAN USE THE FOLLOWING INFORMATION TO FIND OUTWHERE MYSQLD DIED. IF YOU SEE NO MESSAGES AFTER THIS, SOMETHING WENTTERRIBLY WRONG...006AB35B    MYSQLD.EXE!HA_INNOBASE::OPEN()[HA_INNODB.CC:2595]00443D46    MYSQLD.EXE!HANDLER::HA_OPEN()[HANDLER.CC:2030]005BD64B    MYSQLD.EXE!OPEN_TABLE_FROM_SHARE()[TABLE.CC:1881]00524B47    MYSQLD.EXE!OPEN_UNIREG_ENTRY()[SQL_BASE.CC:3926]0052819D    MYSQLD.EXE!OPEN_TABLE()[SQL_BASE.CC:2933]00529122    MYSQLD.EXE!OPEN_TABLES()[SQL_BASE.CC:4585]0052976B    MYSQLD.EXE!OPEN_NORMAL_AND_DERIVED_TABLES()[SQL_BASE.CC:5038]0059DEEB    MYSQLD.EXE!MYSQLD_SHOW_CREATE()[SQL_SHOW.CC:591]005542D9    MYSQLD.EXE!MYSQL_EXECUTE_COMMAND()[SQL_PARSE.CC:2880]7C9105C8    NTDLL.DLL!RTLFREEHEAP()TRYING TO GET SOME VARIABLES.SOME POINTERS MAY BE INVALID AND CAUSE THE DUMP TO ABORT...THD->QUERY AT 114EA420=SHOW CREATE TABLE `XYZ`.`ABC`THD->THREAD_ID=3THD->KILLED=NOT_KILLEDTHE MANUAL PAGE AT HTTP:DEV.MYSQL.COMDOCMYSQLENCRASHING.HTML CONTAINSINFORMATION THAT SHOULD HELP YOU FIND OUT WHAT IS CAUSING THE CRASH.HOW TO REPEAT:UNFORTUNATELY CANT ACTIVELY REPRODUCE HOW IT GETS INTO THIS STATE. BEHAVIOUR REPEATS UNTIL TABLE IS DROPPED AND RECREATED.SUGGESTED FIX:UNKNOWN. ","SUMMARY":"BUGU00A0#44030  ERROR: (1500) COULDNT READ THE MAX(ID) AUTOINC VALUE FROM THE INDEX (PRIMARY) ","CLASS":0}
{"ID_DEFECT":"45749","DESCRIPTION":"     [25 JUN 2009 11:42]   MARKO MU00E4KELU00E4          DESCRIPTION:THERE IS A HOLE IN THE FIX OF BUG #42101: THE STATEMENTSET GLOBAL INNODB_COMMIT_CONCURRENCY=DEFAULT;WILL SET THE COMMIT CONCURRENCY TO 0 WHEN INNODB WAS STARTED WITH INNODB_COMMIT_CONCURRENCY>0.HOW TO REPEAT:MYSQLD --INNODB_COMMIT_CONCURRENCY=1SELECT @@INNODB_COMMIT_CONCURRENCY; -- SHOULD BE 1SET GLOBAL INNODB_COMMIT_CONCURRENCY=0; -- FAILSSET GLOBAL INNODB_COMMIT_CONCURRENCY=DEFAULT; -- SETS TO 0, BUG!SELECT @@INNODB_COMMIT_CONCURRENCY; -- SHOULD BE 1, BUT IS 0SUGGESTED FIX:ADD AN _UPDATE CALLBACK THAT WILL IGNORE THE REQUEST. OR HAVE MYSQL CALL THE _VALIDATE CALLBACK WHEN SETTING TO DEFAULT VALUE. ","SUMMARY":"BUGU00A0#45749  RACE CONDITION IN SET GLOBAL INNODB_COMMIT_CONCURRENCY=DEFAULT ","CLASS":0}
{"ID_DEFECT":"46656","DESCRIPTION":"     [11 AUG 2009 16:13]   GUILHEM BICHOT          DESCRIPTION:WE CAN SEE THIS KIND OF MEMORY LEAK REPORTS IN PUSHBUILD2 FOR 5.1-INNODB_PLUGIN:RPL.RPL_TRIGGER INNODB PLUGIN          W1 [ RETRY-FAIL ]  FOUND WARNINGSERRORS IN SERVER LOG FILE!        TEST ENDED AT 2009-08-04 12:25:42MYSQLTEST: LOGGING TO .MYSQLTEST: RESULTS SAVED IN .MYSQLTEST: CONNECTING TO SERVER LOCALHOST:13120 (SOCKET EXPORTHOMEPB2TESTSB_1-671695-1249375950.81TMP8PVXC7QABF1MYSQLD.1.SOCK) AS ROOT, CONNECTION DEFAULT, ATTEMPT 0 ...MYSQLTEST: ... CONNECTED.MYSQLTEST: START PROCESSING TEST COMMANDS FROM .INCLUDECHECK-WARNINGS.TEST ...FILE_NAMETLINEEXPORTHOMEPB2TESTSB_1-671695-1249375950.81MYSQL-5.1.37-LINUX-X86_64-TESTMYSQL-TESTVAR1LOGMYSQLD.1.ERRT==28039==    AT 0X4A04B32: CALLOC (VG_REPLACE_MALLOC.C:279)EXPORTHOMEPB2TESTSB_1-671695-1249375950.81MYSQL-5.1.37-LINUX-X86_64-TESTMYSQL-TESTVAR1LOGMYSQLD.1.ERRT==28039==    AT 0X4A05809: MALLOC (VG_REPLACE_MALLOC.C:149)EXPORTHOMEPB2TESTSB_1-671695-1249375950.81MYSQL-5.1.37-LINUX-X86_64-TESTMYSQL-TESTVAR1LOGMYSQLD.1.ERRT==28039==    AT 0X4A05809: MALLOC (VG_REPLACE_MALLOC.C:149)EXPORTHOMEPB2TESTSB_1-671695-1249375950.81MYSQL-5.1.37-LINUX-X86_64-TESTMYSQL-TESTVAR1LOGMYSQLD.1.ERRT==28039==    AT 0X4A05809: MALLOC (VG_REPLACE_MALLOC.C:149)EXPORTHOMEPB2TESTSB_1-671695-1249375950.81MYSQL-5.1.37-LINUX-X86_64-TESTMYSQL-TESTVAR1LOGMYSQLD.1.ERRT==28039==    AT 0X4A05809: MALLOC (VG_REPLACE_MALLOC.C:149)EXPORTHOMEPB2TESTSB_1-671695-1249375950.81MYSQL-5.1.37-LINUX-X86_64-TESTMYSQL-TESTVAR1LOGMYSQLD.1.ERRT==28039==    AT 0X4A05809: MALLOC (VG_REPLACE_MALLOC.C:149)EXPORTHOMEPB2TESTSB_1-671695-1249375950.81MYSQL-5.1.37-LINUX-X86_64-TESTMYSQL-TESTVAR1LOGMYSQLD.1.ERRT==28039==    AT 0X4A05809: MALLOC (VG_REPLACE_MALLOC.C:149)EXPORTHOMEPB2TESTSB_1-671695-1249375950.81MYSQL-5.1.37-LINUX-X86_64-TESTMYSQL-TESTVAR1LOGMYSQLD.1.ERRT==28039==    AT 0X4A05809: MALLOC (VG_REPLACE_MALLOC.C:149)^ FOUND WARNINGS!!SIMILAR ONES ARE ALSO SEEN IN MYSQL-TRUNK. MORE STACK TRACES IN HOW TO REPEAT.HOW TO REPEAT:ADD THIS LINE TO THE END OF MYSQL-TESTTINNODB-SEMI-CONSISTENT.TEST:--SOURCE INCLUDERESTART_MYSQLD.INCTHIS IS NEEDED BECAUSE LEAKS ARE REPORTED ONLY AT MYSQLD SHUTDOWN, AND MTR DOES NOT DO A PROPER SHUTDOWN WHEN IT ENDS A TEST (IT SEEMS TO KILL-9), SO TO GET A NON-ABRUPT SHUTDOWN, WE NEED TO PUT THE SHUTDOWN BEFORE THE TEST RETURNS CONTROL TO MTR (SEE BUG#43418).THEN RUN IT WITH:.MTR --VALGRIND --VALGRIND-OPTION=--SHOW-REACHABLE=YES --VALGRIND-OPTION=--ERROR-LIMIT=NO --MEM --FORCE --RETRY-FAILURE=0 INNODB-SEMI-CONSISTENTONLY WHEN THE TEST IS RUN IN INNODB PLUGIN MODE, VARLOG*ERR CONTAINS:1) A LEAK DUE TO DROP TABLE:==27005== 16 BYTES IN 1 BLOCKS ARE DEFINITELY LOST IN LOSS RECORD 1 OF 16==27005==    AT 0X4C266E1: REALLOC (VG_REPLACE_MALLOC.C:429)==27005==    BY 0X6D9DF61: ???==27005==    BY 0X6D523C1: ???==27005==    BY 0X6D527A3: ???==27005==    BY 0X6D543F0: ???==27005==    BY 0X6D5A21C: ???==27005==    BY 0X6D5D047: ???==27005==    BY 0X6D6F5FA: ???==27005==    BY 0X6D1EDE7: ???==27005==    BY 0X7FEC22: HANDLER::HA_DELETE_TABLE(CHAR CONST*) (HANDLER.CC:3315)==27005==    BY 0X804977: HA_DELETE_TABLE(THD*, HANDLERTON*, CHAR CONST*, CHAR CONST*, CHAR CONST*, BOOL) (HANDLER.CC:1958)==27005==    BY 0X8285C5: MYSQL_RM_TABLE_PART2(THD*, TABLE_LIST*, BOOL, BOOL, BOOL, BOOL) (SQL_TABLE.CC:1956)==27005==    BY 0X828B2D: MYSQL_RM_TABLE(THD*, TABLE_LIST*, CHAR, CHAR) (SQL_TABLE.CC:1749)==27005==    BY 0X6CD887: MYSQL_EXECUTE_COMMAND(THD*) (SQL_PARSE.CC:3353)==27005==    BY 0X6D2F47: MYSQL_PARSE(THD*, CHAR CONST*, UNSIGNED, CHAR CONST**) (SQL_PARSE.CC:5932)==27005==    BY 0X6D3CFE: DISPATCH_COMMAND(ENUM_SERVER_COMMAND, THD*, CHAR*, UNSIGNED) (SQL_PARSE.CC:1213)2) SEVERAL LEAKS OF MEMORY INITIALIZED BY INNODB WHEN IT STARTS, LIKE (BUT NOT ONLY):==27005== 201,675 (1,992 DIRECT, 199,683 INDIRECT) BYTES IN 8 BLOCKS ARE DEFINITELY LOST IN LOSS RECORD 10 OF 16==27005==    AT 0X4C265AE: MALLOC (VG_REPLACE_MALLOC.C:207)==27005==    BY 0X6D9DA5F: ???==27005==    BY 0X6D9DD1E: ???==27005==    BY 0X6D3B1EB: ???==27005==    BY 0X6D3A477: ???==27005==    BY 0X6D813DE: ???==27005==    BY 0X6D81B4A: ???==27005==    BY 0X6D863D9: ???==27005==    BY 0X6D1A802: ???==27005==    BY 0X8029EE: HA_INITIALIZE_HANDLERTON(ST_PLUGIN_INT*) (HANDLER.CC:432)==27005==    BY 0X8BD86F: _ZL17PLUGIN_INITIALIZEP13ST_PLUGIN_INT (SQL_PLUGIN.CC:1014)==27005==    BY 0X8C14C6: PLUGIN_INIT(INT*, CHAR**, INT) (SQL_PLUGIN.CC:1238)==27005==    BY 0X6BB6B0: _ZL22INIT_SERVER_COMPONENTSV (MYSQLD.CC:3883)==27005==    BY 0X6BC14F: MAIN (MYSQLD.CC:4355)DONT BE AFRAID OF THE ??? IN STACK TRACES, THIS IS LIKELY DUE TO USING A .SO FILE.THE STACK TRACES IN (2) DONT MENTION INNODB, BUT AS THIS IS HAPPENING ONLY IN INNODB PLUGIN MODE, IT CAN ONLY BE THE INNODB PLUGINS FAULT. ","SUMMARY":"BUGU00A0#46656  INNODB PLUGIN: MEMORY LEAKS (VALGRIND) ","CLASS":0}
{"ID_DEFECT":"46676","DESCRIPTION":"     [12 AUG 2009 13:45]   DOUGLAS WRIGHT          DESCRIPTION:090812 14:31:00 - MYSQLD GOT EXCEPTION 0XC0000005 ;THIS COULD BE BECAUSE YOU HIT A BUG. IT IS ALSO POSSIBLE THAT THIS BINARYOR ONE OF THE LIBRARIES IT WAS LINKED AGAINST IS CORRUPT, IMPROPERLY BUILT,OR MISCONFIGURED. THIS ERROR CAN ALSO BE CAUSED BY MALFUNCTIONING HARDWARE.WE WILL TRY OUR BEST TO SCRAPE UP SOME INFO THAT WILL HOPEFULLY HELP DIAGNOSETHE PROBLEM, BUT SINCE WE HAVE ALREADY CRASHED, SOMETHING IS DEFINITELY WRONGAND THIS MAY FAIL.KEY_BUFFER_SIZE=50331648READ_BUFFER_SIZE=65536MAX_USED_CONNECTIONS=29MAX_THREADS=500THREADS_CONNECTED=19IT IS POSSIBLE THAT MYSQLD COULD USE UP TO KEY_BUFFER_SIZE + (READ_BUFFER_SIZE + SORT_BUFFER_SIZE)*MAX_THREADS = 1365620 KBYTES OF MEMORYHOPE THATS OK; IF NOT, DECREASE SOME VARIABLES IN THE EQUATION.THD: 0X1D6964B0ATTEMPTING BACKTRACE. YOU CAN USE THE FOLLOWING INFORMATION TO FIND OUTWHERE MYSQLD DIED. IF YOU SEE NO MESSAGES AFTER THIS, SOMETHING WENTTERRIBLY WRONG...00000001401FBF29    MYSQLD.EXE!GET_SCHEMA_KEY_COLUMN_USAGE_RECORD()[SQL_SHOW.CC:4739]00000001401FAEAF    MYSQLD.EXE!GET_ALL_TABLES()[SQL_SHOW.CC:3396]00000001401FDDBC    MYSQLD.EXE!GET_SCHEMA_TABLES_RESULT()[SQL_SHOW.CC:6053]00000001401E8E04    MYSQLD.EXE!JOIN::EXEC()[SQL_SELECT.CC:1730]00000001401EA50A    MYSQLD.EXE!MYSQL_SELECT()[SQL_SELECT.CC:2390]00000001401EAA56    MYSQLD.EXE!HANDLE_SELECT()[SQL_SELECT.CC:268]00000001401A29A8    MYSQLD.EXE!EXECUTE_SQLCOM_SELECT()[SQL_PARSE.CC:5013]00000001401A4197    MYSQLD.EXE!MYSQL_EXECUTE_COMMAND()[SQL_PARSE.CC:2207]00000001401A99E6    MYSQLD.EXE!MYSQL_PARSE()[SQL_PARSE.CC:5936]00000001401AA71A    MYSQLD.EXE!DISPATCH_COMMAND()[SQL_PARSE.CC:1215]00000001401AB7E7    MYSQLD.EXE!DO_COMMAND()[SQL_PARSE.CC:854]000000014024E677    MYSQLD.EXE!HANDLE_ONE_CONNECTION()[SQL_CONNECT.CC:1127]00000001402C0235    MYSQLD.EXE!PTHREAD_START()[MY_WINTHREAD.C:85]00000001403D4057    MYSQLD.EXE!_CALLTHREADSTART()[THREAD.C:295]00000001403D4125    MYSQLD.EXE!_THREADSTART()[THREAD.C:275]0000000077D6B71A    KERNEL32.DLL!BASETHREADSTART()TRYING TO GET SOME VARIABLES.SOME POINTERS MAY BE INVALID AND CAUSE THE DUMP TO ABORT...THD->QUERY AT 000000001D701700=SELECT COUNT(*) FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE`THD->THREAD_ID=2517THD->KILLED=NOT_KILLEDTHE MANUAL PAGE AT HTTP:DEV.MYSQL.COMDOCMYSQLENCRASHING.HTML CONTAINSINFORMATION THAT SHOULD HELP YOU FIND OUT WHAT IS CAUSING THE CRASH.HOW TO REPEAT:1) INSTALL MYSQL 5.1.372) LOAD UP PHPMYADMIN, AND TRY TO VIEW THE INFORMATION_SCHEMA TABLE.3) CRASH ","SUMMARY":"BUGU00A0#46676  MYSQLD GOT EXCEPTION 0XC0000005 ","CLASS":0}
{"ID_DEFECT":"46718","DESCRIPTION":"     [14 AUG 2009 11:15]   JOERG BRUEHE          DESCRIPTION:THIS PROBLEM OCCURS ON DEBIAN LENNY RUNNING ON A PPC CPU (PEGASOS BOX) WHEN I USE GCC 4.1 AS COMPILER,IT WORKS WHEN I SWITCH THE COMPILER TO GCC 4.3 (SAME BOX, NO OTHER CHANGE).IT IS REPRODUCIBLE ACROSS COMPILER SWITCHES:SUCCESS WITH GCC 4.3, FAILURE WITH GCC 4.1, SUCCESS WITH 4.3, FAILURE WITH 4.1EXACT COMPILER VERSIONS (MOST CURRENT UPGRADES FOR DEBIAN LENNY):GCC (GCC) 4.1.3 20080704 (PRERELEASE) (DEBIAN 4.1.2-25)GCC (DEBIAN 4.3.2-1.1) 4.3.2IN THE TEST OUTPUT FOR THE FAILURE, I SEE THIS:090814  1:42:58 [ERROR] CANT OPEN SHARED LIBRARY MYSQLREPOV51WORK-5.1        STORAGEINNODB_PLUGIN.LIBSHA_INNODB_PLUGIN.SO        (ERRNO: 22 UNDEFINED SYMBOL: __SYNC_LOCK_TEST_AND_SET_1)090814  1:42:58 [ERROR] COULDNT LOAD PLUGIN NAMED INNODB WITH SONAME        HA_INNODB_PLUGIN.SO.090814  1:42:59 [NOTE] STARTING MYSQL CLUSTER BINLOG THREAD090814  1:42:59 [WARNING] MYSQLREPOV51WORK-5.1SQLMYSQLD: UNKNOWN VARIABLE        LOOSE-INNODB_DATA_FILE_PATH=IBDATA1:10M:AUTOEXTEND090814  1:42:59 [ERROR] MYSQLREPOV51WORK-5.1SQLMYSQLD: UNKNOWN OPTION        --INNODB090814  1:42:59 [ERROR] ABORTINGCHECKING THE .O FILES, I SEE THAT PLENTY REFERENCE THAT SYMBOL, BUT NONE DEFINES IT.HOW TO REPEAT:BUILD 5.1.38 (WITH THE INNODB PLUGIN) USING GCC 4.1, AT LEAST ON POWERPC.SUGGESTED FIX:NOT SURE, IT MAY DEPEND ON HOW WIDESPREAD THIS IS AND WHICH PLATFORMS USE WHICH COMPILER VERSION.IF GCC 4.3 IS SUFFICIENTLY WIDESPREAD AVAILABLE, THERE MAY BE NO NEED TO USE 4.1.OTOH, WE HAD SOME FALCON CODE WHICH WORKED WITH GCC 4.1 BUT FAILED WITH 4.3 (BUG#40065), SO WE MIGHT BE FORCED TO CHOOSE BETWEEN TWO EVILS IF THESE PROBLEMS PERSIST.SPECIFIC FOR THIS GCC 4.1 PROBLEM:I SEE THAT USING THIS SYMBOL DEPENDS ON HAVE_GCC_ATOMIC_BUILTINS WHICH IS CHECKED DURING CONFIGURE, AND THIS CHECK SUCCEEDS IN MY LOG:CONFIGURE:29346: CHECKING WHETHER THE COMPILER PROVIDES ATOMIC BUILTINSCONFIGURE:29382: GCC -O CONFTEST  -WIMPLICIT -WRETURN-TYPE -WSWITCH -WTRIGRAPHS -WCOMMENT -W -WCHAR-SUBSCRIPTS -WFORMAT -WPARENTHESES -WSIGN-COMPARE -WWRITE-STRINGS -WUNUSED-FUNCTION -WUNUSED-LABEL -WUNUSED-VALUE -WUNUSED-VARIABLE -WUNUSED-PARAMETER  -O3 -FNO-OMIT-FRAME-POINTER -G     CONFTEST.C -LPTHREAD -LCRYPT -LNSL -LM  -LPTHREAD >&5CONFIGURE:29385: $? = 0CONFIGURE:29391: .CONFTESTCONFIGURE:29394: $? = 0CONFIGURE:29410: RESULT: YESSO I CANT SAY WHY THIS SUCCEEDS DURING CONFIGURE BUT LATER FAILS. ","SUMMARY":"BUGU00A0#46718  INNODB PLUGIN INCOMPATIBLE WITH GCC 4.1 (AT LEAST: ON PPC): UNDEFINED SYMBOL ","CLASS":0}
{"ID_DEFECT":"47808","DESCRIPTION":"     [4 OCT 2009 10:04]   GEORGI KODINOV          DESCRIPTION:INNODB_INFORMATION_SCHEMA.TEST FAILS FOR INNODB PLUGIN WHEN RUN UNDER VALGRIND AS FOLLOWS :INNODB.INNODB_INFORMATION_SCHEMA INNODB PLUGIN W8 [ FAIL ]        TEST ENDED AT 2009-10-02 23:50:30CURRENT_TEST: INNODB.INNODB_INFORMATION_SCHEMA==30753== MEMCHECK, A MEMORY ERROR DETECTOR.==30753== COPYRIGHT (C) 2002-2006, AND GNU GPLD, BY JULIAN SEWARD ET AL.==30753== USING LIBVEX REV 1658, A LIBRARY FOR DYNAMIC BINARY TRANSLATION.==30753== COPYRIGHT (C) 2004-2006, AND GNU GPLD, BY OPENWORKS LLP.==30753== USING VALGRIND-3.2.1, A DYNAMIC BINARY INSTRUMENTATION FRAMEWORK.==30753== COPYRIGHT (C) 2000-2006, AND GNU GPLD, BY JULIAN SEWARD ET AL.==30753== FOR MORE DETAILS, RERUN WITH: -V==30753== --- EXPORTHOMEPB2TESTSB_1-787728-1254519012.52MYSQL-5.1.40-LINUX-X86_64-TESTMYSQL-TESTSUITEINNODBRINNODB_INFORMATION_SCHEMA.RESULTT2009-10-02 16:42:34.000000000 +0300+++ EXPORTHOMEPB2TESTSB_1-787728-1254519012.52MYSQL-5.1.40-LINUX-X86_64-TESTMYSQL-TESTSUITEINNODBRINNODB_INFORMATION_SCHEMA.REJECTT2009-10-03 00:50:29.000000000 +0300@@ -1,18 +1,8 @@ LOCK_MODETLOCK_TYPETLOCK_TABLETLOCK_INDEXTLOCK_RECTLOCK_DATA-XTRECORDT`TEST`.```T_STR`T`PRIMARY`T2T1, ABC, ABC, ABC, ABC, ABC, ABC-XTRECORDT`TEST`.```T_STR`T`PRIMARY`T2T1, ABC, ABC, ABC, ABC, ABC, ABC-XTRECORDT`TEST`.```T_STR`T`PRIMARY`T3T2, ABC, ABC, ABC, ABC, ABC, ABC-XTRECORDT`TEST`.```T_STR`T`PRIMARY`T3T2, ABC, ABC, ABC, ABC, ABC, ABC-XTRECORDT`TEST`.```T_STR`T`PRIMARY`T4T3, ABC, ABC, ABC, ABC, ABC, ABC-XTRECORDT`TEST`.```T_STR`T`PRIMARY`T4T3, ABC, ABC, ABC, ABC, ABC, ABC XTRECORDT`TEST`.```T_STR`T`PRIMARY`T5T4, ABC, 0ABC, ABC0, A0BC, A0BC0, A0BC00 XTRECORDT`TEST`.```T_STR`T`PRIMARY`T5T4, ABC, 0ABC, ABC0, A0BC, A0BC0, A0BC00 XTRECORDT`TEST`.`T_MIN`T`PRIMARY`T2T-128, 0, -32768, 0, -8388608, 0, -2147483648, 0, -9223372036854775808, 0 XTRECORDT`TEST`.`T_MIN`T`PRIMARY`T2T-128, 0, -32768, 0, -8388608, 0, -2147483648, 0, -9223372036854775808, 0-XTRECORDT`TEST`.`T_MAX`T`PRIMARY`T2T127, 255, 32767, 65535, 8388607, 16777215, 2147483647, 4294967295, 9223372036854775807, 18446744073709551615-XTRECORDT`TEST`.`T_MAX`T`PRIMARY`T2T127, 255, 32767, 65535, 8388607, 16777215, 2147483647, 4294967295, 9223372036854775807, 18446744073709551615-XTRECORDT`TEST`.```T_STR`T`PRIMARY`T1TSUPREMUM PSEUDO-RECORD-XTRECORDT`TEST`.```T_STR`T`PRIMARY`T1TSUPREMUM PSEUDO-RECORD LOCK_TABLETCOUNT(*) `TEST`.`T_MAX`T2 `TEST`.`T_MIN`T2MYSQLTEST: RESULT CONTENT MISMATCH==30753== ==30753== ERROR SUMMARY: 0 ERRORS FROM 0 CONTEXTS (SUPPRESSED: 4 FROM 1)==30753== MALLOCFREE: IN USE AT EXIT: 344 BYTES IN 10 BLOCKS.==30753== MALLOCFREE: 1,055 ALLOCS, 1,045 FREES, 518,825 BYTES ALLOCATED.==30753== FOR COUNTS OF DETECTED ERRORS, RERUN WITH: -V==30753== SEARCHING FOR POINTERS TO 10 NOT-FREED BLOCKS.==30753== CHECKED 2,294,848 BYTES.==30753== ==30753== 32 BYTES IN 1 BLOCKS ARE STILL REACHABLE IN LOSS RECORD 1 OF 3==30753==    AT 0X4A0590B: REALLOC (VG_REPLACE_MALLOC.C:306)==30753==    BY 0X4661B4: MY_REALLOC (MY_REALLOC.C:62)==30753==    BY 0X46D0B5: DYNSTR_APPEND_MEM (STRING.C:106)==30753==    BY 0X452F58: DO_EVAL(ST_DYNAMIC_STRING*, CHAR CONST*, CHAR CONST*, CHAR) (MYSQLTEST.CC:798)==30753==    BY 0X453851: CHECK_COMMAND_ARGS(ST_COMMAND*, CHAR CONST*, COMMAND_ARG CONST*, INT, CHAR) (MYSQLTEST.CC:996)==30753==    BY 0X45659C: DO_CLOSE_CONNECTION(ST_COMMAND*) (MYSQLTEST.CC:4645)==30753==    BY 0X458B2F: MAIN (MYSQLTEST.CC:7740)   <INSERT A SUPPRESSION NAME HERE>   MEMCHECK:LEAK   FUN:_VGRZU_LIBCZDSOZA_REALLOC   FUN:MY_REALLOC   FUN:DYNSTR_APPEND_MEM   FUN:_Z7DO_EVALP17ST_DYNAMIC_STRINGPKCS2_C   FUN:_Z18CHECK_COMMAND_ARGSP10ST_COMMANDPKCPK11COMMAND_ARGIC   FUN:_Z19DO_CLOSE_CONNECTIONP10ST_COMMAND   FUN:MAIN==30753== ==30753== ==30753== 256 BYTES IN 8 BLOCKS ARE DEFINITELY LOST IN LOSS RECORD 3 OF 3==30753==    AT 0X4A0590B: REALLOC (VG_REPLACE_MALLOC.C:306)==30753==    BY 0X4661B4: MY_REALLOC (MY_REALLOC.C:62)==30753==    BY 0X46D0B5: DYNSTR_APPEND_MEM (STRING.C:106)==30753==    BY 0X452F58: DO_EVAL(ST_DYNAMIC_STRING*, CHAR CONST*, CHAR CONST*, CHAR) (MYSQLTEST.CC:798)==30753==    BY 0X453851: CHECK_COMMAND_ARGS(ST_COMMAND*, CHAR CONST*, COMMAND_ARG CONST*, INT, CHAR) (MYSQLTEST.CC:996)==30753==    BY 0X45659C: DO_CLOSE_CONNECTION(ST_COMMAND*) (MYSQLTEST.CC:4645)==30753==    BY 0X458B2F: MAIN (MYSQLTEST.CC:7740)   <INSERT A SUPPRESSION NAME HERE>   MEMCHECK:LEAK   FUN:_VGRZU_LIBCZDSOZA_REALLOC   FUN:MY_REALLOC   FUN:DYNSTR_APPEND_MEM   FUN:_Z7DO_EVALP17ST_DYNAMIC_STRINGPKCS2_C   FUN:_Z18CHECK_COMMAND_ARGSP10ST_COMMANDPKCPK11COMMAND_ARGIC   FUN:_Z19DO_CLOSE_CONNECTIONP10ST_COMMAND   FUN:MAIN==30753== ==30753== LEAK SUMMARY:==30753==    DEFINITELY LOST: 256 BYTES IN 8 BLOCKS.==30753==      POSSIBLY LOST: 0 BYTES IN 0 BLOCKS.==30753==    STILL REACHABLE: 32 BYTES IN 1 BLOCKS.==30753==         SUPPRESSED: 56 BYTES IN 1 BLOCKS.HOW TO REPEAT:COMPILE WITH VALGRIND AND RUN.MYSQL-TEST-RUN --VALGRIND INNODB_INFORMATION_SCHEMA.TESTSUGGESTED FIX:CURE THE VALGRIND WARNINGS ","SUMMARY":"BUGU00A0#47808  INNODB_INFORMATION_SCHEMA.TEST FAILS WHEN RUN UNDER VALGRIND  ","CLASS":0}
{"ID_DEFECT":"49535","DESCRIPTION":"     [8 DEC 2009 15:29]   DOMAS MITUZAS          DESCRIPTION:FOR MORE DISCUSSION SEE:HTTP:MITUZAS.LT20091208CRASH-RECOVERY-AGAINBUT IN SHORT, THERES VERY EXPENSIVE CALL FOR MEM_HEAP_GET_SIZE FROM RECV_SCAN_LOG_RECS, THAT WILL USE >90% OF CPU IN CRASH-RECOVERY LOG READING PROCESS.HOW TO REPEAT:CRASH BUSY SERVER WITH LARGE TRANSACTION LOGSUGGESTED FIX:REMOVING THE MEMORY OVERFLOW CHECK:HTTP:P.DEFAU.LT?XHI2A_WC1PWYYVNNX_SBWAALLOWED THE STAGE TO COMPLETE IN FEW MINUTES, INSTEAD OF NOT BEING ABLE TO COMPLETE IN HALF AN HOUR. ","SUMMARY":"BUGU00A0#49535  AVAILABLE MEMORY CHECK SLOWS DOWN CRASH RECOVERY TENS OF TIMES ","CLASS":0}
{"ID_DEFECT":"52360","DESCRIPTION":"     [25 MAR 2010 12:38]   VICTOR KIRKEBO          DESCRIPTION:WHEN RUNNING A CONCURRENT UPDATE WORKLOAD ON AN INNODB TABLE AGAINST 5.1.45 OR EARLIER, INNODB ASSERTS. I HAVE ONLY SEEN THIS ON SOLARIS X86 - E.G. WITH SERVER MYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64. IT ALSO SEEMS NECESSARY TO SET THE PARAMETER INNODB-THREAD-CONCURRENCY TO SOMETHING DIFFERENT THAN THE DEFAULT VALUE IN ORDER FOR THIS TO HAPPEN.100325 15:25:28 INNODB: ASSERTION FAILURE IN THREAD 33 IN FILE LOCKLOCK0LOCK.C LINE 3342INNODB: FAILING ASSERTION: WAIT_LOCKINNODB: WE INTENTIONALLY GENERATE A MEMORY TRAP.EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:MY_PRINT_STACKTRACE+0X20EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:HANDLE_SEGFAULT+0X1DCLIBAMD64LIBC.SO.1:0XD5386LIBAMD64LIBC.SO.1:0XC9C82EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64LIBPLUGINHA_INNODB_PLUGIN.SO.0.0.0:0X3F08CD [ SIGNAL 11 (SEGV)]EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64LIBPLUGINHA_INNODB_PLUGIN.SO.0.0.0:0X3F0A50EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64LIBPLUGINHA_INNODB_PLUGIN.SO.0.0.0:0X3F078EEXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64LIBPLUGINHA_INNODB_PLUGIN.SO.0.0.0:0X3E9770EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64LIBPLUGINHA_INNODB_PLUGIN.SO.0.0.0:0X3EA601EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64LIBPLUGINHA_INNODB_PLUGIN.SO.0.0.0:0X3EA877EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64LIBPLUGINHA_INNODB_PLUGIN.SO.0.0.0:0X3F5569EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64LIBPLUGINHA_INNODB_PLUGIN.SO.0.0.0:0X5E4843EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64LIBPLUGINHA_INNODB_PLUGIN.SO.0.0.0:__1CJHA_INNODBKINDEX_READ6MPCPKCINQHA_RKEY_FUNCTION__I_+0X1E7EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64LIBPLUGINHA_INNODB_PLUGIN.SO.0.0.0:__1CJHA_INNODBLINDEX_FIRST6MPC_I_+0X38EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:__1CHHANDLERQREAD_RANGE_FIRST6MPKNMST_KEY_RANGE_3BB_I_+0XEDEXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:__1CHHANDLERWREAD_MULTI_RANGE_FIRST6MPPNSST_KEY_MULTI_RANGE_2IBPNRST_HANDLER_BUFFER__I_+0XE3EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:__1CSQDDUICK_RANGE_SELECTIGET_NEXT6M_I_+0X3E6EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:0X414D5EEXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:__1CMMYSQL_UPDATE6FPNDTHD_PNKTABLE_LIST_RNELIST4NEITEM___5PN0C_IPNIST_ORDER_XNPENUM_DUPLICATES_B_I_+0X1451EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:__1CVMYSQL_EXECUTE_COMMAND6FPNDTHD__I_+0X50EFEXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:__1CLMYSQL_PARSE6FPNDTHD_PKCIP3_V_+0X130EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:__1CQDISPATCH_COMMAND6FNTENUM_SERVER_COMMAND_PNDTHD_PCI_B_+0X998EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:__1CKDO_COMMAND6FPNDTHD__B_+0XE2EXPORTHOMETMPMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64BINMYSQLD:HANDLE_ONE_CONNECTION+0XE1LIBAMD64LIBC.SO.1:0XD504BLIBAMD64LIBC.SO.1:0XD5280HOW TO REPEAT:ZZ FILE:$TABLES =         PARTITIONS => [ UNDEF ];$FIELDS =         TYPES => [ INT],        INDEXES => [UNDEF],;$DATA =         NUMBERS => [ DIGIT, NULL, UNDEF ],YY FILE:QUERY:        UPDATE _TABLE SET _FIELD_NO_PK = _DIGIT WHERE _FIELD_KEY < _DIGIT LIMIT 3 ;RQG COMMAND LINE:$ PERL RUNALL.PL   --ENGINE=INNODB   --REPORTERS=ERRORLOG,BACKTRACE   --ROWS=10   --QUERIES=100000000   --DURATION=600   --BASEDIR=PATHTOMYSQL-ADVANCED-5.1.45-SOLARIS10-X86_64   --VARDIR=PATHTOVARDIR   --GENDATA=PATHTOFILE.ZZ   --GRAMMAR=PATHTOFILE.YY   --MYSQLD=--IGNORE-BUILTIN-INNODB   --MYSQLD=--PLUGIN-LOAD=INNODB=HA_INNODB_PLUGIN.SO   --MYSQLD=--INNODB-THREAD-CONCURRENCY=20   --THREADS=20   --MYSQLD=--INNODB_LOCK_WAIT_TIMEOUT=40THE RANDOM QUERY GENERATOR CAN BE OBTAINED FROMHTTP:LAUNCHPAD.NETRANDGEN2.02.1.4+DOWNLOADRANDGEN-2.1.4.TGZ ","SUMMARY":"BUGU00A0#52360  INNODB ASSERTION WAIT_LOCK IN LOCKLOCK0LOCK.C ON UPDATE ","CLASS":0}
{"ID_DEFECT":"52814","DESCRIPTION":"     [14 APR 2010 10:06]   SERGEY VOJTOVICH          DESCRIPTION:THIS IS A FOLLOW-UP TO BUG#39053 - UNISTALL PLUGIN DOES NOT ALLOW THE STORAGE ENGINE TO CLEANUP OPEN CONNECTIONS.FIX FOR BUG#39053 CONTAINS SERVER SIDE FRAMEWORK FIX, BUT THERE IS STILL SOME WORK TO DO ON STORAGE ENGINE SIDE. IF STORAGE ENGINE REQUIRES SERVER TO CLOSE ALL CONNECTIONS BEFORE SHUTTING DOWN AN ENGINE, AN ENGINE MUST SWITCH TO NEW HA_DATA INTERFACE. THAT IS USE THD_SET|GET_HA_DATA() INSTEAD OF THD_HA_DATA().FOR DETAILS SEE  HTTP:LISTS.MYSQL.COMCOMMITS105618HOW TO REPEAT:BY CODE ANALYSIS FOR HA_INNODB.CC. INNODB USES THD_HA_DATA(), INSTEAD OF THD_SET|GET_HA_DATA().SUGGESTED FIX:SWITCH FROM THD_HA_DATA() TO THD_SET|GET_HA_DATA(). ","SUMMARY":"BUGU00A0#52814  INNODB: SWITCH TO NEW HA_DATA INTERFACE ","CLASS":0}
{"ID_DEFECT":"52964","DESCRIPTION":"     [20 APR 2010 5:58]   MARKO MU00E4KELU00E4          DESCRIPTION:WHEN USING COMPRESSED TABLES IN THE INNODB PLUGIN, IT IS POSSIBLE THAT ONLY ONE RECORD FITS IN A LEAF PAGE OF AN INDEX B-TREE. TRADITIONALLY, INNODB B-TREE PAGES ALWAYS HAVE SPACE FOR AT LEAST TWO RECORDS.THE FUNCTION BTR_PAGE_GET_SURE_SPLIT_REC() MAY RETURN NULL WHEN THE PAGE ONLY HAS SPACE FOR THE RECORD TO BE INSERTED, THAT IS, THE RECORD SHOULD BE INSERTED IN THE LEFT HALF OF THE SPLIT B-TREE PAGE. ALAS, BTR_PAGE_SPLIT_AND_INSERT() WOULD ATTEMPT TO INSERT TO THE RIGHT HALF, WHICH IS ALREADY FULL. THEN IT WOULD KEEP SPLITTING THE PAGE FURTHER, CREATING NUMEROUS EMPTY B-TREE PAGES UNTIL FILLING UP THE BUFFER POOL OR THE AVAILABLE DISK SPACE.HOW TO REPEAT:CREATE AND POPULATE A COMPRESSED TABLE CONTAINING MOSTLY UNCOMPRESSIBLE DATA, WITH A VARYING RECORD LENGTH. WITH SOME LUCK, YOU CAN TRIGGER THIS CONDITION. I WAS NOT ABLE TO REPEAT THIS MYSELF.SUGGESTED FIX:WHEN BTR_PAGE_GET_SURE_SPLIT_REC() RETURNS NULL, MAKE SURE THAT THE TUPLE WILL BE INSERTED INTO THE EMPTY PAGE HALF. THAT IS, IF THE TUPLE TO BE INSERTED IS SMALLER THAN THE SMALLEST USER RECORD ON THE PAGE BEFORE SPLIT. INSERT IT INTO THE LEFT HALF. ","SUMMARY":"BUGU00A0#52964  INFINITE LOOP IN BTR_PAGE_SPLIT_AND_INSERT IN ROW_FORMAT=COMPRESSED ","CLASS":0}
{"ID_DEFECT":"54311","DESCRIPTION":"     [7 JUN 2010 21:27]   ELENA STEPANOVA          DESCRIPTION:#3  0X000000000080FF8B IN BTR_SEARCH_VALIDATE ()    AT STORAGEINNOBASEINCLUDEDICT0DICT.IC:239#4  0X00000000007BFD03 IN ROW_CHECK_TABLE_FOR_MYSQL (PREBUILT=0X14917F0)    AT STORAGEINNOBASEROWROW0MYSQL.C:4170#5  0X00000000007AD19F IN HA_INNOBASE::CHECK (THIS=0X1485C40, THD=<VALUE OPTIMIZED OUT>, CHECK_OPT=<VALUE OPTIMIZED OUT>)    AT STORAGEINNOBASEHANDLERHA_INNODB.CC:7371#6  0X000000000068B9FA IN HANDLER::HA_CHECK (THIS=0X1485C40, THD=0X14D4230, CHECK_OPT=0X14D6778)    AT SQLHANDLER.CC:3122#7  0X0000000000680B30 IN HANDLE_OPT_PART (THD=0X0, CHECK_OPT=0X2AAAAE6BFA00, FILE=0X15, FLAG=0)    AT SQLHA_PARTITION.CC:1012#8  0X0000000000680F33 IN HA_PARTITION::HANDLE_OPT_PARTITIONS (THIS=0X14913A0, THD=0X14D4230, CHECK_OPT=0X14D6778, FLAG=3)    AT SQLHA_PARTITION.CC:1169#9  0X000000000068B9FA IN HANDLER::HA_CHECK (THIS=0X14913A0, THD=0X14D4230, CHECK_OPT=0X14D6778)    AT SQLHANDLER.CC:3122#10 0X00000000005DEB1E IN MYSQL_ADMIN_TABLE (THD=0X14D4230, TABLES=0X14D1D00, CHECK_OPT=0X14D6778, OPERATOR_NAME=0XA1EFB1 CHECK,    LOCK_TYPE=TL_READ_NO_INSERT, OPEN_FOR_MODIFY=FALSE, NO_WARNINGS_FOR_ERROR=FALSE, EXTRA_OPEN_OPTIONS=32, PREPARE_FUNC=0, OPERATOR_FUNC=    (INT ( CLASS HANDLER::*)(CLASS THD *,HA_CHECK_OPT *,)) 857908, VIEW_OPERATOR_FUNC=0X5F16C0 <VIEW_CHECKSUM(THD*, TABLE_LIST*)>)    AT SQLSQL_TABLE.CC:4921#11 0X00000000005DFBC9 IN MYSQL_CHECK_TABLE (THD=0XFC, TABLES=0X0, CHECK_OPT=0X2AAAAE6BFA00)    AT SQLSQL_TABLE.CC:5457#12 0X000000000057E490 IN MYSQL_EXECUTE_COMMAND (THD=0X14D4230)    AT SQLSQL_PARSE.CC:3015#13 0X0000000000580FED IN MYSQL_PARSE (THD=0X14D4230, INBUF=0X14D1BB0 ALTER TABLE T_CELOSIA_DDL_PARTITIONS CHECK PARTITION P0,    LENGTH=<VALUE OPTIMIZED OUT>, PARSER_STATE=0X4490B7E0) AT SQLSQL_PARSE.CC:5816#14 0X0000000000581CFA IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0X14D4230, PACKET=<VALUE OPTIMIZED OUT>, PACKET_LENGTH=55)    AT SQLSQL_PARSE.CC:1134#15 0X000000000058257D IN DO_COMMAND (THD=0X14D4230) AT SQLSQL_PARSE.CC:771#16 0X00000000006196CB IN DO_HANDLE_ONE_CONNECTION (THD_ARG=0X14D4230)    AT SQLSQL_CONNECT.CC:1195#17 0X000000000061A1B4 IN HANDLE_ONE_CONNECTION (ARG=<VALUE OPTIMIZED OUT>)    AT SQLSQL_CONNECT.CC:1134#18 0X00000000008E4DFB IN PFS_SPAWN_THREAD (ARG=<VALUE OPTIMIZED OUT>)    AT STORAGEPERFSCHEMAPFS.CC:1011#19 0X00002B2BC60E3143 IN START_THREAD () FROM LIB64LIBPTHREAD.SO.0#20 0X00002B2BC67528CD IN CLONE () FROM LIB64LIBC.SO.6#21 0X0000000000000000 IN ?? ()VERSION: 5.5.5-M3-LOGMYSQLD GOT SIGNAL 11 ;THD->QUERY AT 0X14D1BB0 = ALTER TABLE T_CELOSIA_DDL_PARTITIONS CHECK PARTITION P0THD->THREAD_ID=7THD->KILLED=NOT_KILLEDTHE COREDUMP IS FOR INNODB PLUGIN 1.0.6, BUT WITH 1.1 THE CRASH ALSO HAPPENS.HOW TO REPEAT:# THE TEST CASE BELOW IS NOT COMPLETELY DETERMINISTIC, # BUT IM GETTING RELIABLE NUMBER OF FAILURES, WITH IT,# ABOUT 90% ON RECENT BUILDS # (91 FAILURES IN A 100-ATTEMPT RUN, USUALLY 910 IN 10-ATTEMPT RUNS).# PLEASE RUN SEVERAL TIMES IF YOU DONT GET A CRASH AT ONCE.# PLEASE NOTE THAT THE TEST REQUIRES A LOAD FILE, IT IS ATTACHED.#--- TEST CASE ------SOURCE INCLUDEHAVE_INNODB.INC# INITSET GLOBAL EVENT_SCHEDULER = OFF;LET $ADAPTIVE_HASH_INDEX = `SELECT @@INNODB_ADAPTIVE_HASH_INDEX`;DROP DATABASE IF EXISTS CELOSIA_FEATURES;CREATE DATABASE CELOSIA_FEATURES;USE CELOSIA_FEATURES;DROP TABLE IF EXISTS CELOSIA_FEATURES.T_CELOSIA_DDL_PARTITIONS;CREATE TABLE CELOSIA_FEATURES.T_CELOSIA_DDL_PARTITIONS T(ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,TUSER_NUM CHAR(10),TNAME VARCHAR(255) NOT NULL,TINDEX NAMES (NAME(255))) TENGINE = INNODB PARTITION BY HASH(ID) PARTITIONS 4;LOAD DATA LOCAL INFILE TEST.LOAD TINTO TABLE CELOSIA_FEATURES.T_CELOSIA_DDL_PARTITIONS (USER_NUM, NAME);# END OF INIT--CONNECT (CON88,LOCALHOST,ROOT,,CELOSIA_FEATURES)TSET AUTOCOMMIT = 0;TLOAD DATA LOCAL INFILE TEST.LOAD TTINTO TABLE T_CELOSIA_DDL_PARTITIONS (USER_NUM, NAME);--DISCONNECT CON88--CONNECT (CON89,LOCALHOST,ROOT,,CELOSIA_FEATURES)TSELECT COUNT(*) INTO @TABLE_COUNT FROM T_CELOSIA_DDL_PARTITIONS;--SENDTLOAD DATA LOCAL INFILE TEST.LOAD TTINTO TABLE T_CELOSIA_DDL_PARTITIONS (USER_NUM, NAME);--CONNECT (CON90,LOCALHOST,ROOT,,TEST)--SENDTSET GLOBAL INNODB_ADAPTIVE_HASH_INDEX = OFF;--CONNECTION CON89--REAP--DISCONNECT CON89--CONNECTION CON90--REAP--DISCONNECT CON90--CONNECT (CON91,LOCALHOST,ROOT,,CELOSIA_FEATURES)TLOAD DATA LOCAL INFILE TEST.LOAD TTINTO TABLE T_CELOSIA_DDL_PARTITIONS (USER_NUM, NAME);--DISCONNECT CON91--CONNECT (CON92,LOCALHOST,ROOT,,CELOSIA_FEATURES)TALTER TABLE T_CELOSIA_DDL_PARTITIONS CHECK PARTITION P0;# CLEANUP, JUST IN CASE WE GET HERE--CONNECTION DEFAULTDROP DATABASE CELOSIA_FEATURES;EVAL SET GLOBAL INNODB_ADAPTIVE_HASH_INDEX = $ADAPTIVE_HASH_INDEX;--EXIT#--- END OF TEST CASE  ---- ","SUMMARY":"BUGU00A0#54311  CRASH ON CHECK PARTITION AFTER CONCURRENT LOAD DATA AND ADAPTIVE_HASH_INDEX=OFF ","CLASS":0}
{"ID_DEFECT":"54358","DESCRIPTION":"     [9 JUN 2010 7:57]   MARKO MU00E4KELU00E4          DESCRIPTION:WHEN AN EXTERNALLY STORED COLUMN IS BEING ACCESSED AT THE READ UNCOMMITTED ISOLATION LEVEL BETWEEN THE TIME THE BASE RECORD HAS BEEN INSERTED TO THE CLUSTERED INDEX B-TREE PAGE AND THE CALL TO BTR_STORE_BIG_REC_EXTERN_FIELDS(), THE READ UNCOMMITTED ACCESS WILL SEE A ZERO BLOB POINTER.THE ZERO BLOB POINTER WILL CAUSE AN ASSERTION FAILURE AT LEAST WHEN ACCESSING THE TABLE THROUGH A SECONDARY INDEX ON A PREFIX OF AN EXTERNALLY STORED COLUMN:INNODB: FAILING ASSERTION: MEMCMP(DATA, FIELD_REF_ZERO, BTR_EXTERN_FIELD_REF_SIZE) #5  0X0000003ACBC31D10 IN ABORT () FROM LIB64LIBC.SO.6 #6  0X00002AAAABBCD34F IN BTR_COPY_EXTERNALLY_STORED_FIELD_PREFIX (     BUF=0X4ADE8A50 KHD..., LEN=768,     ZIP_SIZE=2048, DATA=0X2AAAB7AA0A52 , LOCAL_LEN=0) AT BTRBTR0CUR.C:4739 #7  0X00002AAAABC7FD53 IN ROW_SEL_SEC_REC_IS_FOR_BLOB (MTYPE=5, PRTYPE=524540,     MBMINLEN=1, MBMAXLEN=1, CLUST_FIELD=0X2AAAB7AA0A52 , CLUST_LEN=20,     SEC_FIELD=0X2AAABB9F6669 KHD...,     SEC_LEN=255, ZIP_SIZE=2048) AT ROWROW0SEL.C:109 #8  0X00002AAAABC80134 IN ROW_SEL_SEC_REC_IS_FOR_CLUST_REC (     SEC_REC=0X2AAABB9F6669 KHD...,     SEC_INDEX=0X2AAB441BF6A8, CLUST_REC=0X2AAAB7AA0A1F KJGCLGRTFU200,     CLUST_INDEX=0X2AAB440E70E8) AT ROWROW0SEL.C:210 #9  0X00002AAAABC851A5 IN ROW_SEL_GET_CLUST_REC_FOR_MYSQL (     PREBUILT=0X2AAB4C10B248, SEC_INDEX=0X2AAB441BF6A8,     REC=0X2AAABB9F6669 KHD...,     THR=0X2AAB4C0E8A38, OUT_REC=0X4ADE9AE8, OFFSETS=0X4ADE9308,     OFFSET_HEAP=0X4ADE9638, MTR=0X4ADE9640) AT ROWROW0SEL.C:2971 #10 0X00002AAAABC86F09 IN ROW_SEARCH_FOR_MYSQL (     BUF=0X2AAB4C29A390 376244003, MODE=2, PREBUILT=0X2AAB4C10B248,     MATCH_MODE=0, DIRECTION=1) AT ROWROW0SEL.C:4263 #11 0X00002AAAABC1B04B IN HA_INNODB::GENERAL_FETCH (THIS=0X2AAB4C29A1A0,     BUF=0X2AAB4C29A390 376244003, DIRECTION=1, MATCH_MODE=0)     AT HANDLERHA_INNODB.CC:5643 #12 0X00002AAAABC1B25F IN HA_INNODB::INDEX_NEXT (THIS=0X2AAB4C29A1A0,     BUF=0X2AAB4C29A390 376244003) AT HANDLERHA_INNODB.CC:5683HOW TO REPEAT:CREATE A DYNAMIC OR COMPRESSED TABLE WITH A SECONDARY INDEX ON A COLUMN PREFIX, AND TRY TO ACCESS THE RECORDS AT READ UNCOMMITTED ISOLATION LEVEL WHILE RECORDS WITH OFF-PAGE COLUMNS ARE BEING INSERTED. (NOTE THAT UPDATES MAP TO DELETE+INSERT WHEN THE PRIMARY KEY OR OFF-PAGE COLUMNS ARE UPDATED.)SUGGESTED FIX:WHEN A ZERO BLOB POINTER IS ENCOUNTERED IN READ UNCOMMITTED, PRETEND THAT THE RECORD DOES NOT EXIST, BECAUSE IT HAS NOT BEEN FULLY WRITTEN YET. ","SUMMARY":"BUGU00A0#54358  READ UNCOMMITTED ACCESS FAILURE OF OFF-PAGE DYNAMIC OR COMPRESSED COLUMNS ","CLASS":0}
{"ID_DEFECT":"54453","DESCRIPTION":"     [12 JUN 2010 6:04]   SHANE BESTER          DESCRIPTION:COULD BE RELATED TO BUG #53798IF YOU ALTER TABLE .. RENAME TO .. ON A TABLE THAT HAS AN ACTIVE TRANSACTION OPEN AND UNIV_DEBUG IS DEFINED, MYSQLD CRASHES:100604 10:35:46  INNODB: ASSERTION FAILURE IN THREAD 1191770432 IN FILE HANDLERHA_INNODB.CC LINE 9665INNODB: FAILING ASSERTION: TRX->ACTIVE_TRANSHOW TO REPEAT:EDIT .STORAGEINNOBASEINCLUDEUNIV.I AND CHANGE#IF 0 TO #IF 1TO ENABLE EXTRA DEBUGGING DEFINES.  COMPILE DEBUG SERVER, AND START WITH --LOG-BINCONNECTION1:-------------CREATE TABLE T1(A INT)ENGINE=INNODB;START TRANSACTION;INSERT INTO T1 VALUES (1);CONNECTION2:-------------ALTER TABLE T1 RENAME TO T2; #CRASHESSUGGESTED FIX:5.5 FIXES THIS ALREADY.  HERES WHAT HAPPENS IN 5.5.4:+------+-------------------+-----------------------------+|    0 | NULL              | SHOW PROCESSLIST            ||    8 | WAITING FOR TABLE | ALTER TABLE T1 RENAME TO T2 |+------+-------------------+-----------------------------+ ","SUMMARY":"BUGU00A0#54453  FAILING ASSERTION: TRX->ACTIVE_TRANS WHEN RENAMING A TABLE WITH ACTIVE TRX ","CLASS":0}
{"ID_DEFECT":"55039","DESCRIPTION":"     [6 JUL 2010 23:01]   ELENA STEPANOVA          DESCRIPTION:ON CONCURRENT DDL, E.G. CREATE TEMPORARY TABLE, AND CHANGING INNODB_FILE_FORMATINNODB_FILE_PER_TABLE:THREAD 1 (PROCESS 17971):#0  0X00002ADC653F5EA3 IN PTHREAD_KILL () FROM LIB64LIBPTHREAD.SO.0#1  0X000000000050C1DC IN HANDLE_SEGFAULT (SIG=6) AT MYSQL-5.5.6-M3SQLMYSQLD.CC:2791#2  <SIGNAL HANDLER CALLED>#3  0X00002ADC659CFBB5 IN RAISE () FROM LIB64LIBC.SO.6#4  0X00002ADC659D0FB0 IN ABORT () FROM LIB64LIBC.SO.6#5  0X0000000000855D20 IN FIL_CREATE_NEW_SINGLE_TABLE_TABLESPACE (SPACE_ID=0, TABLENAME=0X14A83C0 TMPB6MYC9QDTRMYSQLD.1#SQL461A_3_6, IS_TEMP=1, FLAGS=0, SIZE=4)    AT MYSQL-5.5.6-M3STORAGEINNOBASEFILFIL0FIL.C:2628#6  0X000000000083A8F4 IN DICT_CREATE_TABLE_STEP (THR=0X14CBD50)    AT MYSQL-5.5.6-M3STORAGEINNOBASEDICTDICT0CREA.C:282#7  0X00000000008A92AD IN QUE_RUN_THREADS (THR=0X14CBD50) AT MYSQL-5.5.6-M3STORAGEINNOBASEQUEQUE0QUE.C:1255#8  0X00000000007C8A54 IN ROW_CREATE_TABLE_FOR_MYSQL (TABLE=0X14DC388, TRX=0X14DA988)    AT MYSQL-5.5.6-M3STORAGEINNOBASEROWROW0MYSQL.C:1847#9  0X00000000007AF47C IN HA_INNOBASE::CREATE (THIS=<VALUE OPTIMIZED OUT>, NAME=<VALUE OPTIMIZED OUT>, FORM=0X450C8320, CREATE_INFO=0X450CA230)    AT MYSQL-5.5.6-M3STORAGEINNOBASEHANDLERHA_INNODB.CC:6266#10 0X00000000006930C9 IN HA_CREATE_TABLE (THD=<VALUE OPTIMIZED OUT>, PATH=<VALUE OPTIMIZED OUT>, DB=0X14BD440 TEST, TABLE_NAME=0X14BCEF0 OPERATIONS,    CREATE_INFO=0X450CA230, UPDATE_CREATE_INFO=FALSE) AT MYSQL-5.5.6-M3SQLHANDLER.CC:3609#11 0X000000000060733B IN REA_CREATE_TABLE (THD=0X14B2160, PATH=0X450C9250 TMPB6MYC9QDTRMYSQLD.1#SQL461A_3_6, DB=0X14BD440 TEST,    TABLE_NAME=0X14BCEF0 OPERATIONS, CREATE_INFO=0X450CA230, CREATE_FIELDS=@0X450CA1D8, KEYS=0, KEY_INFO=0X14BD7D8, FILE=0X14BD5D8)    AT MYSQL-5.5.6-M3SQLUNIREG.CC:463#12 0X00000000005DE7A3 IN MYSQL_CREATE_TABLE_NO_LOCK (THD=0X14B2160, DB=0X14BD440 TEST, TABLE_NAME=0X14BCEF0 OPERATIONS, CREATE_INFO=0X450CA230,    ALTER_INFO=0X450CA190, INTERNAL_TMP_TABLE=FALSE, SELECT_FIELD_COUNT=0) AT MYSQL-5.5.6-M3SQLSQL_TABLE.CC:4179#13 0X00000000005E4534 IN MYSQL_CREATE_TABLE (THD=0X14B2160, CREATE_TABLE=0X14BCF38, CREATE_INFO=0X450CA230, ALTER_INFO=0X450CA190)    AT MYSQL-5.5.6-M3SQLSQL_TABLE.CC:4255#14 0X00000000005839D9 IN MYSQL_EXECUTE_COMMAND (THD=0X14B2160) AT MYSQL-5.5.6-M3SQLSQL_PARSE.CC:2769#15 0X0000000000583F7D IN MYSQL_PARSE (THD=0X14B2160, INBUF=0X14BCDF0 CREATE TEMPORARY TABLE OPERATIONS ( OP VARCHAR(16) ) ENGINE = INNODB,    LENGTH=<VALUE OPTIMIZED OUT>, PARSER_STATE=0X450CB7E0) AT MYSQL-5.5.6-M3SQLSQL_PARSE.CC:5911#16 0X0000000000584CE7 IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0X14B2160, PACKET=<VALUE OPTIMIZED OUT>, PACKET_LENGTH=68)    AT MYSQL-5.5.6-M3SQLSQL_CLASS.H:724#17 0X00000000005855AD IN DO_COMMAND (THD=0X14B2160) AT MYSQL-5.5.6-M3SQLSQL_PARSE.CC:807#18 0X000000000061DA49 IN DO_HANDLE_ONE_CONNECTION (THD_ARG=0X14B2160) AT MYSQL-5.5.6-M3SQLSQL_CONNECT.CC:1196#19 0X000000000061E534 IN HANDLE_ONE_CONNECTION (ARG=<VALUE OPTIMIZED OUT>) AT MYSQL-5.5.6-M3SQLSQL_CONNECT.CC:1135#20 0X000000000090B4AB IN PFS_SPAWN_THREAD (ARG=<VALUE OPTIMIZED OUT>) AT MYSQL-5.5.6-M3STORAGEPERFSCHEMAPFS.CC:1015#21 0X00002ADC653F1143 IN START_THREAD () FROM LIB64LIBPTHREAD.SO.0#22 0X00002ADC65A608CD IN CLONE () FROM LIB64LIBC.SO.6INNODB 1.1.1 VERSION: 5.5.6-M3-LOGINNODB: ASSERTION FAILURE IN THREAD 1158465856 IN FILE MYSQL-5.5.6-M3STORAGEINNOBASEFILFIL0FIL.C LINE 2618THD->QUERY AT 0X14BCDF0 = CREATE TEMPORARY TABLE OPERATIONS ( OP VARCHAR(16) ) ENGINE = INNODBTHD->THREAD_ID=3THD->KILLED=NOT_KILLEDIM GETTING THE CRASH ON 5.5.5-M3 WHICH IS BEING RELEASED AND ON THE CURRENT TRUNK (BOTH RELEASE AND DEBUG), BUT CANNOT REPRODUCE IT ON 5.5.4-M3 AND EARLIER, SO IM TAGGING IT AS A REGRESSION.HOW TO REPEAT:# MTR TEST CASE. IT FAILED FOR ME 18 TIMES OF 20 I TRIED# INCREASING NUMBER OF TRIES OR RUNNING THE TEST CASE VIA --REPEAT# DOES NOT SEEM TO HELP, TRY JUST TO RESTART IT IF IT DID NOT WORK.--SOURCE INCLUDEHAVE_INNODB.INC--CONNECT(CON1,LOCALHOST,ROOT,,)--CONNECT(CON2,LOCALHOST,ROOT,,)--LET $TRY=100WHILE($TRY)        --DEC $TRY        --CONNECTION CON1        --SEND CREATE TEMPORARY TABLE OPERATIONS (OP VARCHAR(16)) ENGINE=INNODB        --CONNECTION CON2        --SEND SET GLOBAL INNODB_FILE_FORMAT=ANTELOPE, INNODB_FILE_PER_TABLE=ON        --CONNECTION CON1        --REAP        DROP TABLE OPERATIONS;        --CONNECTION CON2        --REAP        SET GLOBAL INNODB_FILE_FORMAT = BARRACUDA, INNODB_FILE_PER_TABLE = OFF;--EXIT ","SUMMARY":"BUGU00A0#55039  FAILING ASSERTION: SPACE_ID > 0 IN FIL0FIL.C LINE 2618  ","CLASS":0}
{"ID_DEFECT":"55543","DESCRIPTION":"     [26 JUL 2010 2:58]   ROEL VAN DE PAAR          DESCRIPTION:THIS CRASH WAS PRODUCED INSIDE A VM (UBUNTU 9.04, 32BIT, VBOX 3.2.6)==============INNODB: ERROR: TRYING TO ACCESS PAGE NUMBER 805829503 IN SPACE 0,INNODB: SPACE NAME .IBDATA1,INNODB: WHICH IS OUTSIDE THE TABLESPACE BOUNDS.INNODB: BYTE OFFSET 0, LEN 16384, IO TYPE 10.INNODB: IF YOU GET THIS ERROR AT MYSQLD STARTUP, PLEASE CHECK THATINNODB: YOUR MY.CNF MATCHES THE IBDATA FILES THAT YOU HAVE IN THEINNODB: MYSQL SERVER.100726  5:49:31  INNODB: ASSERTION FAILURE IN THREAD 2814622608 IN FILE FILFIL0FIL.C LINE 4306INNODB: WE INTENTIONALLY GENERATE A MEMORY TRAP.INNODB: SUBMIT A DETAILED BUG REPORT TO HTTP:BUGS.MYSQL.COM.INNODB: IF YOU GET REPEATED ASSERTION FAILURES OR CRASHES, EVENINNODB: IMMEDIATELY AFTER THE MYSQLD STARTUP, THERE MAY BEINNODB: CORRUPTION IN THE INNODB TABLESPACE. PLEASE REFER TOINNODB: HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENFORCING-RECOVERY.HTMLINNODB: ABOUT FORCING RECOVERY.100726  5:49:31 - MYSQLD GOT SIGNAL 6 ;==============HOW TO REPEAT:==============ROEL@ROEL-UBUNTU-VM:RANDGENNEW_TESTING5$ CAT 5CD RANDGENRANDGENRM -R TMP51RM -R TMP52RM .51.LOGRM .52.LOGPERL .RUNALL.PL   --BASEDIR=MYSQLMYSQL-5.1.49-LINUX-I686-GLIBC23   --VARDIR1=TMP51   --VARDIR2=TMP52   --MYSQLD1=--LOG-OUTPUT=NONE   --MYSQLD1=--LOG_ERROR=RANDGENNEW_TESTING551.LOG   --MYSQLD2=--LOG-OUTPUT=NONE   --MYSQLD2=--LOG_ERROR=RANDGENNEW_TESTING552.LOG   --MYSQLD2=--IGNORE-BUILTIN-INNODB   --MYSQLD2=--PLUGIN-LOAD=INNODB=HA_INNODB_PLUGIN.SO:INNODB_TRX=HA_INNODB_PLUGIN.SO:INNODB_LOCKS=HA_INNODB_PLUGIN.SO:INNODB_CMP=HA_INNODB_PLUGIN.SO:INNODB_CMP_RESET=HA_INNODB_PLUGIN.SO:INNODB_CMPMEM=HA_INNODB_PLUGIN.SO:INNODB_CMPMEM_RESET=HA_INNODB_PLUGIN.SO   --MYSQLD2=--PLUGIN-DIR=MYSQLMYSQL-5.1.49-LINUX-I686-GLIBC23LIBPLUGIN   --GENDATA=RANDGENNEW_TESTING55.ZZ   --GRAMMAR=RANDGENNEW_TESTING55.YY   --QUERIES=100000   --THREADS=10   --VALIDATORS=RESULTSETCOMPARATOR,MARKERRORLOG,ABORTONSYNTAXERROR CD RANDGENNEW_TESTING5ROEL@ROEL-UBUNTU-VM:RANDGENNEW_TESTING5$ CAT 5.ZZ$TABLES =         ROWS => [100],        ENGINES => [INNODB],        PK => [INT AUTO_INCREMENT];$FIELDS =         TYPES => [SET,BLOB];$DATA =         BLOBS => [ENGLISH,DATA];ROEL@ROEL-UBUNTU-VM:RANDGENNEW_TESTING5$ CAT 5.YYQUERY: TUPDATE | INSERT | DELETE ;UPDATE: TUPDATE _TABLE SET _FIELD = DIGIT WHERE CONDITION ;DELETE:TDELETE FROM _TABLE WHERE CONDITION ;INSERT:TINSERT INTO _TABLE ( _FIELD ) VALUES ( _DIGIT ) ;CONDITION:T_FIELD > VALUE AND _FIELD < VALUE ;VALUE:T_DIGIT | _CHAR(255) | _ENGLISH | _DATETIME | NULL ;==============RUN THE ABOVE FOR SOME TIME. IF YOU DONT GET A CRASH IN THE FIRST 5-10 MINUTES, STOP IT (CTRL-C), AND RE-START. IT CRASHED FOR ME 3 TIMES OUT OF ABOUT 6-10 TRIES. ","SUMMARY":"BUGU00A0#55543  INNODB PLUGIN: SIGNAL 6: ASSERTION FAILURE IN FILE FILFIL0FIL.C LINE 4306 ","CLASS":0}
{"ID_DEFECT":"56340","DESCRIPTION":"     [28 AUG 2010 0:16]   MARK CALLAGHAN          DESCRIPTION:INNODB INCREMENTS STAT_MODIFIED_COUNTER AFTER ROW UPDATES THAT DONT CHANGE INDEXED COLUMNS. I DONT THINK THAT NEEDS TO BE DONE AND THE CURRENT BEHAVIOR FORCES INDEX STATS TO BE RECOLLECTED TOO SOON FOR WORKLOADS THAT DO MANY UPDATES TO NON-INDEXED COLUMNS.INDEX STATS COLLECTION ISNT FREE. IT IS ALSO AN OCCASIONAL BOTTLENECK FOR US ON FREQUENTLY UPDATES TABLES THAT MAINTAIN COUNTS.HOW TO REPEAT:READ ROW_UPDATE_STATISTICS_IF_NEEDEDSUGGESTED FIX:DONT UPDATE STAT_MODIFIED_COUNTER FOR UPDATES THAT DONT MODIFY INDEXED COLUMNS. THIS CODE ADDED TO ROW_UPDATE_FOR_MYSQL MIGHT FIX IT: IF (NODE->IS_DELETE || !(NODE->CMPL_INFO & UPD_NODE_NO_ORD_CHANGE))     * INCREMENT ROW CHANGE COUNTER AND POSSIBLY UPDATE STATISTICS WHEN   THIS IS A DELETE OR AN INDEXED COLUMN HAS CHANGED. *T    ROW_UPDATE_STATISTICS_IF_NEEDED(PREBUILT->TABLE, TRX);   ","SUMMARY":"BUGU00A0#56340  INNODB UPDATES INDEX STATS TOO FREQUENTLY AFTER NON-INDEX UPDATES ","CLASS":0}
{"ID_DEFECT":"57345","DESCRIPTION":"     [8 OCT 2010 20:42]   VICTOR KIRKEBO          DESCRIPTION:THIS MIGHT BE A DUPLICATE OF BUG#57248. IM DOING RELEASE TESTING OF 5.1.52 AND I HAVE ONLY TESTED FOR THIS VERSION SO FAR.BASIC STEPS:-----------START DATABASE AND DO THIS:CREATE DATABASE TEST;USE TST:CREATE TABLE T1(F1 VARCHAR(255));THEN RUN A STRESS TEST WITH TWO TREADS:CLIENT1:USE TST;ALTER TABLE T1 MODIFY F1 CHAR(255) CHARACTER SET LATIN1;ALTER TABLE T1 MODIFY F1 CHAR(255) CHARACTER SET LATIN2;CLIENT2:USE TST;SET AUTOCOMMIT=0;LOCK TABLE T1 WRITE;UNLOCK TABLES;TRACE:EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(MY_PRINT_STACKTRACE+0X2E)[0X8B420E]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(HANDLE_SEGFAULT+0X322)[0X5E37C2]LIB64LIBPTHREAD.SO.0[0X33A8C0DE70]LIB64LIBC.SO.6(GSIGNAL+0X35)[0X33A8030155]LIB64LIBC.SO.6(ABORT+0X110)[0X33A8031BF0]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(BTR_PCUR_STORE_POSITION+0X397)[0X8458B7]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(ROW_SEARCH_FOR_MYSQL+0X71C)[0X810A3C]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(_ZN11HA_INNOBASE10INDEX_READEPHPKHJ16HA_RKEY_FUNCTION+0X192)[0X781C82]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(_ZN11HA_INNOBASE11INDEX_FIRSTEPH+0X37)[0X780847]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(_ZN11HA_INNOBASE8RND_NEXTEPH+0X37)[0X7816A7]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(_Z13RR_SEQUENTIALP11READ_RECORD+0X1A)[0X6CFFCA]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(_Z17MYSQL_ALTER_TABLEP3THDPCS1_P24ST_HA_CREATE_INFORMATIONP10TABLE_LISTP10ALTER_INFOJP8ST_ORDERB+0X2E45)[0X6F1525]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(_Z21MYSQL_EXECUTE_COMMANDP3THD+0X9DC)[0X5F47BC]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(_Z11MYSQL_PARSEP3THDPCJPPKC+0X3D8)[0X5F9968]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(_Z16DISPATCH_COMMAND19ENUM_SERVER_COMMANDP3THDPCJ+0X542)[0X5F9EB2]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(_Z10DO_COMMANDP3THD+0XE6)[0X5FB1B6]EXPORTHOMETMPVK136562BUGMYSQL-ADVANCED-5.1.52-LINUX-X86_64-GLIBC23BINMYSQLD(HANDLE_ONE_CONNECTION+0X246)[0X5ED816]LIB64LIBPTHREAD.SO.0[0X33A8C062F7]LIB64LIBC.SO.6(CLONE+0X6D)[0X33A80D1B6D]HOW TO REPEAT:1) DOWNLOAD THE ATTACHED BUG_TEST.TAR.GZ FILE AND UNTAR IT IN THE MYSQL-TESTDIRECTORY2) IF RUNNING IN A SOURCE TREE, EDIT THE RUN_BUG_TEST SCRIPT AND CHANGE THE VALUE   OF CLIENT_PATH=$CUR_PATHBIN TO CLIENT_PATH=$CUR_PATHCLIENT3) RUN THE .RUN_BUG_TEST SCRIPT ","SUMMARY":"BUGU00A0#57345  BTR_PCUR_STORE_POSITION ABORT FOR LOAD WITH CONCURRENT LOCKUNLOCK TABLES ","CLASS":0}
{"ID_DEFECT":"57600","DESCRIPTION":"     [20 OCT 2010 12:04]   SHANE BESTER          DESCRIPTION:GOT THIS IN INNODB STATUS OUTPUT:PAGES READ AHEAD 0.00S, EVICTED WITHOUT ACCESS 0.00SLRU LEN: 2187061, UNZIP_LRU LEN: 0IO SUM[18446744073709551603]:CUR[0], UNZIP SUM[0]:CUR[0]FPRINTF(FILE,TTLRU LEN: %LU, UNZIP_LRU LEN: %LUTTIO SUM[%LU]:CUR[%LU], UNZIP SUM[%LU]:CUR[%LU],TTUT_LIST_GET_LEN(BUF_POOL->LRU),TTUT_LIST_GET_LEN(BUF_POOL->UNZIP_LRU),TTBUF_LRU_STAT_SUM.IO, BUF_LRU_STAT_CUR.IO,TTBUF_LRU_STAT_SUM.UNZIP, BUF_LRU_STAT_CUR.UNZIP);SO SOMEWHERE BUF_LRU_STAT_SUM.IO GOT A WRONG VALUE.ONLY PLACE THAT UPDATES THIS VALUE IS THE FUNCTION:BUF_LRU_STAT_UPDATE(VOID)* ADD THE CURRENT VALUE AND SUBTRACT THE OBSOLETE ENTRY. *TBUF_LRU_STAT_SUM.IO += BUF_LRU_STAT_CUR.IO - ITEM->IO;TBUF_LRU_STAT_SUM.UNZIP += BUF_LRU_STAT_CUR.UNZIP - ITEM->UNZIP;HOW TO REPEAT:NO IDEA YET. ","SUMMARY":"BUGU00A0#57600  OUTPUT OF IO SUM[%LU] CAN GO NEGATIVE ","CLASS":0}
{"ID_DEFECT":"57799","DESCRIPTION":"     [28 OCT 2010 10:36]   MARKO MU00E4KELU00E4          DESCRIPTION:THIS IS FOLLOW-UP TO BUG #54358. NOT ALL OCCURRENCES OF THE BUG WERE FIXED.INNODB: FAILING ASSERTION: MEMCMP(DATA, FIELD_REF_ZERO, BTR_EXTERN_FIELD_REF_SIZE) #5  0X0000003ACBC31D10 IN ABORT () FROM LIB64LIBC.SO.6 #6  0X00000000008B8E6C IN BTR_COPY_EXTERNALLY_STORED_FIELD_PREFIX () #7  0X0000000000874965 IN ROW_SEL_SEC_REC_IS_FOR_BLOB ()HOW TO REPEAT:RUN A STRESS TEST THAT INVOLVES FREQUENTLY KILLING AND RESTARTING THE SERVER WHILE IT IS UNDER LOAD. THIS BUG HAS A LOW REPRODUCIBILITY.SUGGESTED FIX:CHECK ALL CALLS TO BTR_COPY_EXTERNALLY_STORED_FIELD_PREFIX_LOW() AND DO THE RIGHT THING WHEN THE BLOB POINTER IS NULL (FULL OF ZERO BYTES) ","SUMMARY":"BUGU00A0#57799  READ UNCOMMITTED ACCESS FAILURE OF OFF-PAGE DYNAMIC OR COMPRESSED COLUMNS AGAIN ","CLASS":0}
{"ID_DEFECT":"59230","DESCRIPTION":"     [30 DEC 2010 13:31]   MIKHAIL IZIOUMTCHENKO          DESCRIPTION:STRESSRECOVERY TESTING, AN ASSERT LIKE THIS HAPPENS:ROW0UPD.C LINE 1264INNODB: FAILING ASSERTION: 0IN ROW_UPD_CHANGES_ORD_FIELD_BINARYROW_UNDO_MOD_UPD_EXIST_SEC...TRX_ROLLBACK_OR_CLEAN_ALL_RECOVEREDMAY BE RELATED TO THE FIX TO BUG#55284 GIVEN THE FIRSTMYSQL-5.5-INNODB REVISION I SAW IT IS R3264.HOW TO REPEAT:INTERNAL STRESSRECOVERY TESTING.REPRODUCIBILITY IS FAIR WITH 5.5, SEEN ONCE WITH 5.1 PLUGIN,I DOUBT IT HAPPENS IN TRUNK. ","SUMMARY":"BUGU00A0#59230  ASSERT 0 ROW_UPD_CHANGES_ORD_FIELD_BINARY() IN POST-CRASH TRX ROLLBACK OR PURGE ","CLASS":0}
{"ID_DEFECT":"59464","DESCRIPTION":"     [13 JAN 2011 9:12]   MARKO MU00E4KELU00E4          DESCRIPTION:THIS CAME UP WHILE WORKING ON A FEATURE.THE FUNCTION ROW_VERS_BUILD_FOR_SEMI_CONSISTENT_READ(), INTRODUCED IN THE FIX OF BUG #3300, IS CHECKING VERSION_TRX->CONC_STATE WHILE NOT HOLDING KERNEL_MUTEX:TTMUTEX_ENTER(&KERNEL_MUTEX);TTVERSION_TRX = TRX_GET_ON_ID(VERSION_TRX_ID);TTMUTEX_EXIT(&KERNEL_MUTEX);TTIF (!VERSION_TRXTT    || VERSION_TRX->CONC_STATE == TRX_NOT_STARTEDTT    || VERSION_TRX->CONC_STATE == TRX_COMMITTED_IN_MEMORY) THE VERSION_TRX CAN BE COMMITTED, AND IT COULD BE FREED BEFORE THE TESTS ARE EXECUTED. BECAUSE TRANSACTION OBJECTS ARE TYPICALLY NOT FREED IMMEDIATELY AFTER COMMIT, IT IS UNCLEAR IF THIS CAN HAVE CAUSED ANY REAL ISSUES. ON A BUSY SYSTEM WHERE THE THREAD HAS BEEN SUSPENDED FOR A LONGISH TIME BETWEEN THE MUTEX_EXIT AND THE DEREFERENCING OF VERSION_TRX, IT COULD.HOW TO REPEAT:READ THE CODE.SUGGESTED FIX:TTMUTEX_ENTER(&KERNEL_MUTEX);TTVERSION_TRX = TRX_GET_ON_ID(VERSION_TRX_ID);TTIF (VERSION_TRXTT    && (VERSION_TRX->CONC_STATE == TRX_NOT_STARTEDTTT|| VERSION_TRX->CONC_STATE == TRX_COMMITTED_IN_MEMORY)) TTTVERSION_TRX = NULL;TTTTMUTEX_EXIT(&KERNEL_MUTEX);TTIF (VERSION_TRX != NULL)  ","SUMMARY":"BUGU00A0#59464  RACE CONDITION IN ROW_VERS_BUILD_FOR_SEMI_CONSISTENT_READ ","CLASS":0}
{"ID_DEFECT":"30396","DESCRIPTION":"     [13 AUG 2007 22:56]   SHANE BESTER          DESCRIPTION:I GOT A CRASH TODAY:070813 21:30:35  INNODB: STARTED; LOG SEQUENCE NUMBER 0 1444508499070813 21:30:35 [NOTE] HOMESBESTERSERVER5.1MYSQL-5.1.22-BETA-LINUX-I686BINMYSQLD: READY FOR CONNECTIONS.VERSION: 5.1.22-BETA-DEBUG  SOCKET: TMPMYSQL.SOCK  PORT: 3306  YESERROR: MEMORY ALLOCATED AT MY_ALLOC.C:201 WAS OVERRUN, DISCOVERED AT MY_ALLOC.C:201ERROR: MEMORY ALLOCATED AT U00A8U00A4:150483528 WAS UNDERRUN, DISCOVERED AT MY_ALLOC.C:201ERROR: MEMORY ALLOCATED AT U00A8U00A4:150483528 WAS OVERRUN, DISCOVERED AT MY_ALLOC.C:201ERROR: MEMORY ALLOCATED AT 070814  0:36:47 - MYSQLD GOT SIGNAL 11;THIS COULD BE BECAUSE YOU HIT A BUG. IT IS ALSO POSSIBLE THAT THIS BINARYOR ONE OF THE LIBRARIES IT WAS LINKED AGAINST IS CORRUPT, IMPROPERLY BUILT,OR MISCONFIGURED. THIS ERROR CAN ALSO BE CAUSED BY MALFUNCTIONING HARDWARE.WE WILL TRY OUR BEST TO SCRAPE UP SOME INFO THAT WILL HOPEFULLY HELP DIAGNOSETHE PROBLEM, BUT SINCE WE HAVE ALREADY CRASHED, SOMETHING IS DEFINITELY WRONGAND THIS MAY FAIL.KEY_BUFFER_SIZE=209715200READ_BUFFER_SIZE=131072MAX_USED_CONNECTIONS=8MAX_THREADS=151THREADS_CONNECTED=2IT IS POSSIBLE THAT MYSQLD COULD USE UP TO KEY_BUFFER_SIZE + (READ_BUFFER_SIZE + SORT_BUFFER_SIZE)*MAX_THREADS = 534229 KBYTES OF MEMORYHOPE THATS OK; IF NOT, DECREASE SOME VARIABLES IN THE EQUATION.THD: 0X8FE71F8ATTEMPTING BACKTRACE. YOU CAN USE THE FOLLOWING INFORMATION TO FIND OUTWHERE MYSQLD DIED. IF YOU SEE NO MESSAGES AFTER THIS, SOMETHING WENTTERRIBLY WRONG...CANNOT DETERMINE THREAD, FP=0X4EA2C2A4, BACKTRACE MAY NOT BE CORRECT.STACK RANGE SANITY CHECK OK, BACKTRACE FOLLOWS:0X81FF55B HANDLE_SEGFAULT + 5410X4012C903 _END + 9328376830X40106D6F _END + 9326831670X84CEECC _CHECKCHUNK + 790X84CF05E _SANITY + 1190X84CE3A2 _MYMALLOC + 1460X84CDE57 ALLOC_ROOT + 3140X82D25E1 _ZN10SQL_SELECT17TEST_QUICK_SELECTEP3THD6BITMAPILJ64EEYYB + 11750X825FC1E _Z22GET_QUICK_RECORD_COUNTP3THDP10SQL_SELECTP8ST_TABLEPK6BITMAPILJ64EEY + 1580X82610E6 _Z20MAKE_JOIN_STATISTICSP4JOINP10TABLE_LISTP4ITEMP16ST_DYNAMIC_ARRAY + 51260X825BC6F _ZN4JOIN8OPTIMIZEEV + 18890X825FA49 _Z12MYSQL_SELECTP3THDPPP4ITEMP10TABLE_LISTJR4LISTIS1_ES2_JP8ST_ORDERSB_S2_SB_YP13SELECT_RESULTP18ST_SELECT_LEX_UNITP13ST_SELECT + 5530X827BEC7 _Z19MYSQL_EXPLAIN_UNIONP3THDP18ST_SELECT_LEX_UNITP13SELECT_RESULT + 5930X8213D2E _Z21EXECUTE_SQLCOM_SELECTP3THDP10TABLE_LIST + 3120X820CC18 _Z21MYSQL_EXECUTE_COMMANDP3THD + 16480X8215928 _Z11MYSQL_PARSEP3THDPKCJPS2_ + 3720X820B06D _Z16DISPATCH_COMMAND19ENUM_SERVER_COMMANDP3THDPCJ + 2369STACK TRACE SEEMS SUCCESSFUL - BOTTOM REACHEDPLEASE READ HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENRESOLVE-STACK-DUMP.HTMLAND FOLLOW INSTRUCTIONS ON HOW TO RESOLVE THE STACK TRACE.RESOLVED STACK TRACE IS MUCH MORE HELPFUL IN DIAGNOSING THEPROBLEM, SO PLEASE DO RESOLVE ITTRYING TO GET SOME VARIABLES.SOME POINTERS MAY BE INVALID AND CAUSE THE DUMP TO ABORT...HOW TO REPEAT:WILL SIMPLIFY TESTCASE LATER.SUGGESTED FIX:. ","SUMMARY":"BUGU00A0#30396  MEMORY OVERRUN DURING EXPLAIN EXTENDED ","CLASS":0}
{"ID_DEFECT":"34928","DESCRIPTION":"     [28 FEB 2008 14:18]   LARS JOHANSSON          DESCRIPTION:HI,I GOT A PROBLEM WHICH I FIND HARD TO PINPOINT. I THINK IT IS THE COMBINATION OF DISTINCT AND ORDER BY AND VS 5.1.23.IF MY TABLE DB3_BOM_PROD IS CREATED IN 5.1.22 VERSION OR THE SELECT IS RUN IN 5.1.22 THE SELECT IS OK. BUT USING VS 5.1.23 THE SELECT PRODUCES GARBAGE RANDOMLY. IF I RUN A REPAIR ON THE TABLE THE SELECT SEEMS TO WORK.THIS TIME IT LOOKS LIKE GARBAGE IS PRODUCED ONLY IF LIMIT IS SET TO >24, BUT I DO NOT THINK THAT IS ALWAYS THE CASE. A CAREFUL LOOK AT THE SCRIPT MAY TELL WHATS GOING ON. (THIS TIME IT LOOKS LIKE BLANKS IS PRODUCED, BUT I THINK IT CAN BE ANY HEX-CHAR)SERVER VERSION: 5.1.23-RC-LOG MYSQL COMMUNITY SERVER (GPL)USE ACTADW;MYSQL> SELECT DISTINCT P_PLANT, P_MATNR,ALT_BOM,BOM_USE FROM DB3_BOM_PROD  ORDER BY  P_PLANT, P_MATNR,ALT_BOM,BOM_USE LIMIT 3;+---------+------------+---------+---------+| P_PLANT | P_MATNR    | ALT_BOM | BOM_USE |+---------+------------+---------+---------+| 0101    | 0102024200 | 01      | 1       || 0101    | 0102095135 | 01      | 1       || 0101    | 0102095142 | 01      | 1       |+---------+------------+---------+---------+3 ROWS IN SET (0.00 SEC)SELECT DISTINCT P_PLANT, P_MATNR,ALT_BOM,BOM_USE FROM DB3_BOM_PROD  ORDER BY  P_PLANT, P_MATNR,ALT_BOM,BOM_USE LIMIT 25;+---------+--------------------+---------+---------+| P_PLANT | P_MATNR            | ALT_BOM | BOM_USE |+---------+--------------------+---------+---------+|         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         ||         |                    |         |         |+---------+--------------------+---------+---------+25 ROWS IN SET (0.00 SEC)MYSQL> CHECK TABLE   DB3_BOM_PROD EXTENDED;+---------------------+-------+----------+----------+| TABLE               | OP    | MSG_TYPE | MSG_TEXT |+---------------------+-------+----------+----------+| ACTADW.DB3_BOM_PROD | CHECK | STATUS   | OK       |+---------------------+-------+----------+----------+1 ROW IN SET (52.84 SEC) REPAIR TABLE DB3_BOM_PROD;+---------------------+--------+----------+----------+| TABLE               | OP     | MSG_TYPE | MSG_TEXT |+---------------------+--------+----------+----------+| ACTADW.DB3_BOM_PROD | REPAIR | STATUS   | OK       |+---------------------+--------+----------+----------+1 ROW IN SET (4.73 SEC)MYSQL> SELECT DISTINCT P_PLANT, P_MATNR,ALT_BOM,BOM_USE FROM DB3_BOM_PROD  ORDER BY  P_PLANT, P_MATNR,ALT_BOM,BOM_USE LIMIT 25;+---------+------------+---------+---------+| P_PLANT | P_MATNR    | ALT_BOM | BOM_USE |+---------+------------+---------+---------+| 0101    | 0102024200 | 01      | 1       || 0101    | 0102095135 | 01      | 1       || 0101    | 0102095142 | 01      | 1       || 0101    | 0108120100 | 01      | 1       || 0101    | 0108169039 | 01      | 1       || 0101    | 0108169044 | 01      | 1       || 0101    | 0108169089 | 01      | 1       || 0101    | 0160099647 | 01      | 1       || 0101    | 0261110400 | 01      | 1       || 0101    | 0333221200 | 01      | 1       || 0101    | 0333321400 | 01      | 1       || 0101    | 0333411400 | 01      | 1       || 0101    | 0335122000 | 01      | 1       || 0101    | 0335123600 | 01      | 1       || 0101    | 0335213300 | 01      | 1       || 0101    | 0335350022 | 01      | 1       || 0101    | 0502109059 | 01      | 1       || 0101    | 0502315400 | 01      | 1       || 0101    | 0502742308 | 01      | 1       || 0101    | 0517010022 | 01      | 1       || 0101    | 0517010023 | 01      | 1       || 0101    | 0517010024 | 01      | 1       || 0101    | 0517011700 | 01      | 1       || 0101    | 0518140008 | 01      | 1       || 0101    | 0623250500 | 01      | 1       |+---------+------------+---------+---------+25 ROWS IN SET (0.00 SEC)25 ROWS IN SET (0.00 SEC)HOW TO REPEAT:I DO NOT KNOW HOW TO REPLICATE THIS ONE, BUT I FIND I SERIOUS ENOUGH TO BE WORTH LOOKING AT. ","SUMMARY":"BUGU00A0#34928  CONFUSION BY HAVING PRIMARY KEY AND INDEX ","CLASS":0}
{"ID_DEFECT":"37348","DESCRIPTION":"     [11 JUN 2008 15:30]   PHILIP STOEV          DESCRIPTION:WHEN EXECUTING A DML WORKLOAD, MYSQLD CRASHED AS FOLLOWS:#0  0X00110416 IN __KERNEL_VSYSCALL ()#1  0X00581C78 IN PTHREAD_KILL () FROM LIBLIBPTHREAD.SO.0#2  0X0843EDA3 IN WRITE_CORE (SIG=11) AT STACKTRACE.C:302#3  0X0829B228 IN HANDLE_SEGFAULT (SIG=11) AT MYSQLD.CC:2626#4  <SIGNAL HANDLER CALLED>#5  0X00000000 IN ?? ()#6  0X0830BDEE IN JOIN::MAKE_SUM_FUNC_LIST (THIS=0XA11CC30, FIELD_LIST=@0XA11DF68, SEND_FIELDS=@0XA11DF8C, BEFORE_GROUP_BY=TRUE, RECOMPUTE=TRUE)    AT SQL_SELECT.CC:17730#7  0X08334DF5 IN JOIN::EXEC (THIS=0XA11CC30) AT SQL_SELECT.CC:2589#8  0X0824F73B IN SUBSELECT_SINGLE_SELECT_ENGINE::EXEC (THIS=0XA1186B0) AT ITEM_SUBSELECT.CC:2277#9  0X0824C10E IN ITEM_SUBSELECT::EXEC (THIS=0XA118610) AT ITEM_SUBSELECT.CC:280#10 0X0824CF8B IN ITEM_SINGLEROW_SUBSELECT::VAL_INT (THIS=0XA118610) AT ITEM_SUBSELECT.CC:629#11 0X081E71AC IN ITEM::VAL_INT_RESULT (THIS=0XA118610) AT ..ITEM.H:738#12 0X081D5ACE IN ITEM_CACHE_INT::STORE (THIS=0XA119E40, ITEM=0XA118610) AT ITEM.CC:6647#13 0X0824C2B1 IN ITEM_SINGLEROW_SUBSELECT::STORE (THIS=0XA118D48, I=0, ITEM=0XA118610) AT ITEM_SUBSELECT.CC:541#14 0X082825D2 IN SELECT_SINGLEROW_SUBSELECT::SEND_DATA (THIS=0XA118DD8, ITEMS=@0XA11BF8C) AT SQL_CLASS.CC:2123#15 0X08309A48 IN END_SEND (JOIN=0XA11AC48, JOIN_TAB=0XA11C1EC, END_OF_RECORDS=FALSE) AT SQL_SELECT.CC:14406#16 0X08315B79 IN EVALUATE_JOIN_RECORD (JOIN=0XA11AC48, JOIN_TAB=0XA11C038, ERROR=0) AT SQL_SELECT.CC:13568#17 0X08315DA5 IN SUB_SELECT (JOIN=0XA11AC48, JOIN_TAB=0XA11C038, END_OF_RECORDS=FALSE) AT SQL_SELECT.CC:13342#18 0X08322D70 IN DO_SELECT (JOIN=0XA11AC48, FIELDS=0XA11BF8C, TABLE=0X0, PROCEDURE=0X0) AT SQL_SELECT.CC:13092#19 0X08335655 IN JOIN::EXEC (THIS=0XA11AC48) AT SQL_SELECT.CC:2740#20 0X0824F73B IN SUBSELECT_SINGLE_SELECT_ENGINE::EXEC (THIS=0XA118DE8) AT ITEM_SUBSELECT.CC:2277#21 0X0824C10E IN ITEM_SUBSELECT::EXEC (THIS=0XA118D48) AT ITEM_SUBSELECT.CC:280#22 0X0824CF8B IN ITEM_SINGLEROW_SUBSELECT::VAL_INT (THIS=0XA118D48) AT ITEM_SUBSELECT.CC:629#23 0X081DDB06 IN ITEM::SAVE_IN_FIELD (THIS=0XA118D48, FIELD=0XA114388, NO_CONVERSIONS=FALSE) AT ITEM.CC:4886#24 0X082EA7C9 IN FILL_RECORD (THD=0XA0AA1A0, FIELDS=@0XA0AB810, VALUES=@0XA0FA628, IGNORE_ERRORS=FALSE) AT SQL_BASE.CC:7964#25 0X082EA8D1 IN FILL_RECORD_N_INVOKE_BEFORE_TRIGGERS (THD=0XA0AA1A0, FIELDS=@0XA0AB810, VALUES=@0XA0FA628, IGNORE_ERRORS=FALSE, TRIGGERS=0X0,    EVENT=TRG_EVENT_INSERT) AT SQL_BASE.CC:8009#26 0X0833FEC9 IN MYSQL_INSERT (THD=0XA0AA1A0, TABLE_LIST=0XA0FA2D0, FIELDS=@0XA0AB810, VALUES_LIST=@0XA0AB834, UPDATE_FIELDS=@0XA0AB828,    UPDATE_VALUES=@0XA0AB81C, DUPLIC=DUP_ERROR, IGNORE=FALSE) AT SQL_INSERT.CC:754#27 0X082AE991 IN MYSQL_EXECUTE_COMMAND (THD=0XA0AA1A0) AT SQL_PARSE.CC:2951#28 0X082B4EC6 IN MYSQL_PARSE (THD=0XA0AA1A0,    INBUF=0XA0FA020 INSERT INTO B ( INT_KEY , INT_NOKEY ) VALUES ( ( SELECT ( SELECT COUNT( INT_NOKEY ) FROM ( SELECT COUNT( INT_NOKEY ) FROM A AS X WHERE X . PK < 20   LIMIT 20 ) AS X WHERE X . INT_NOKEY < 61  GROUP BY ..., LENGTH=284, FOUND_SEMICOLON=0XA9E29260) AT SQL_PARSE.CC:5782#29 0X082B590F IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0XA0AA1A0,    PACKET=0XA1052F9 INSERT INTO B ( INT_KEY , INT_NOKEY ) VALUES ( ( SELECT ( SELECT COUNT( INT_NOKEY ) FROM ( SELECT COUNT( INT_NOKEY ) FROM A AS X WHERE X . PK < 20   LIMIT 20 ) AS X WHERE X . INT_NOKEY < 61  GROUP BY ..., PACKET_LENGTH=284) AT SQL_PARSE.CC:1059#30 0X082B6B75 IN DO_COMMAND (THD=0XA0AA1A0) AT SQL_PARSE.CC:732#31 0X082A4385 IN HANDLE_ONE_CONNECTION (ARG=0XA0AA1A0) AT SQL_CONNECT.CC:1134#32 0X0057D32F IN START_THREAD () FROM LIBLIBPTHREAD.SO.0#33 0X0049A27E IN CLONE () FROM LIBLIBC.SO.6THE LAST STACK FRAME MAY BE CORRUPTED, SO HERE IS THE PREVIOUS ONE:(GDB) FRAME 6#6  0X0830BDEE IN JOIN::MAKE_SUM_FUNC_LIST (THIS=0XA11CC30, FIELD_LIST=@0XA11DF68, SEND_FIELDS=@0XA11DF8C, BEFORE_GROUP_BY=TRUE, RECOMPUTE=TRUE)    AT SQL_SELECT.CC:1773017730       IF (ITEM->TYPE() == ITEM::SUM_FUNC_ITEM && !ITEM->CONST_ITEM() &&(GDB) LIST17725       DBUG_RETURN(FALSE); * WE HAVE ALREADY INITIALIZED SUM_FUNCS. *1772617727     FUNC= SUM_FUNCS;17728     WHILE ((ITEM=IT++))17729     17730       IF (ITEM->TYPE() == ITEM::SUM_FUNC_ITEM && !ITEM->CONST_ITEM() &&17731           (!((ITEM_SUM*) ITEM)->DEPENDED_FROM() ||17732            ((ITEM_SUM *)ITEM)->DEPENDED_FROM() == SELECT_LEX))17733         *FUNC++= (ITEM_SUM*) ITEM;17734     HOW TO REPEAT:A SIMPLIFED TEST CASE WILL HOPEFULLY FOLLOW SHORTLY. ","SUMMARY":"BUGU00A0#37348  CRASH IN OR IMMEDIATELY AFTER JOIN::MAKE_SUM_FUNC_LIST ","CLASS":0}
{"ID_DEFECT":"38191","DESCRIPTION":"     [17 JUL 2008 8:13]   PHILIP STOEV          DESCRIPTION:WHEN EXECUTING A SELECTSELECT EXPLAIN WORKLOAD CONTAINING SUBQUERIES, MYSQLD CRASHED AS FOLLOWS:#0  0X00110416 IN __KERNEL_VSYSCALL ()#1  0X00581C78 IN PTHREAD_KILL () FROM LIBLIBPTHREAD.SO.0#2  0X085786BB IN MY_WRITE_CORE (SIG=11) AT STACKTRACE.C:310#3  0X08245C05 IN HANDLE_SEGFAULT (SIG=11) AT MYSQLD.CC:2507#4  <SIGNAL HANDLER CALLED>#5  0X081A8A9F IN LIST<CACHED_ITEM>::DELETE_ELEMENTS (THIS=0XA17679C) AT SQL_LIST.H:400#6  0X082C8C6C IN JOIN::CLEANUP (THIS=0XA175790, FULL=TRUE) AT SQL_SELECT.CC:6756#7  0X082D02B0 IN JOIN::DESTROY (THIS=0XA175790) AT SQL_SELECT.CC:2232#8  0X082D0288 IN JOIN::DESTROY (THIS=0XA0D45F0) AT SQL_SELECT.CC:2228#9  0X083D6F9F IN ST_SELECT_LEX::CLEANUP (THIS=0XA092690) AT SQL_UNION.CC:768#10 0X083D6E0B IN ST_SELECT_LEX_UNIT::CLEANUP (THIS=0XA092818) AT SQL_UNION.CC:646#11 0X083D7003 IN ST_SELECT_LEX::CLEANUP (THIS=0XA084450) AT SQL_UNION.CC:775#12 0X082D4927 IN MYSQL_SELECT (THD=0XA0830E8, RREF_POINTER_ARRAY=0XA084548, TABLES=0XA0924A0, WILD_NUM=0, FIELDS=@0XA0844E4, CONDS=0XA093A08, OG_NUM=3,    ORDER=0XA093C78, GROUP=0XA093B78, HAVING=0X0, PROC_PARAM=0X0, SELECT_OPTIONS=2147764737, RESULT=0XA093DE8, UNIT=0XA0841D8, SELECT_LEX=0XA084450)    AT SQL_SELECT.CC:2382#13 0X082D953C IN HANDLE_SELECT (THD=0XA0830E8, LEX=0XA08417C, RESULT=0XA093DE8, SETUP_TABLES_DONE_OPTION=0) AT SQL_SELECT.CC:269#14 0X08254F7A IN EXECUTE_SQLCOM_SELECT (THD=0XA0830E8, ALL_TABLES=0XA0924A0) AT SQL_PARSE.CC:4765#15 0X08256C40 IN MYSQL_EXECUTE_COMMAND (THD=0XA0830E8) AT SQL_PARSE.CC:2073#16 0X0825F8C2 IN MYSQL_PARSE (THD=0XA0830E8,    INBUF=0XA091EC0 SELECT DISTINCT AVG(DISTINCT OUTR . `DATETIME_KEY` ) AS X FROM C AS OUTR WHERE EXISTS ( SELECT DISTINCT INNR . `DATETIME_KEY` AS Y FROM BB AS INNR WHERE OUTR . `DATETIME_KEY` <= 2005-1-26 ORDER BY I..., LENGTH=390, FOUND_SEMICOLON=0XB2BFD25C) AT SQL_PARSE.CC:5645#17 0X08260499 IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0XA0830E8, PACKET=0XA085369 , PACKET_LENGTH=390) AT SQL_PARSE.CC:1137#18 0X082615F8 IN DO_COMMAND (THD=0XA0830E8) AT SQL_PARSE.CC:794#19 0X0824ED76 IN HANDLE_ONE_CONNECTION (ARG=0XA0830E8) AT SQL_CONNECT.CC:1115#20 0X0057D32F IN START_THREAD () FROM LIBLIBPTHREAD.SO.0#21 0X0049A27E IN CLONE () FROM LIBLIBC.SO.6THE CRASH IS HERE:(GDB) LIST395       396         LIST_NODE *ELEMENT,*NEXT;397         FOR (ELEMENT=FIRST; ELEMENT != &END_OF_LIST; ELEMENT=NEXT)398         399           NEXT=ELEMENT->NEXT;400           DELETE (T*) ELEMENT->INFO; <<<<<<<<<<< HERE401         402         EMPTY();403       404     ;(GDB) PRINT ELEMENT$4 = (LIST_NODE *) 0XA15E178(GDB) PRINT ELEMENT->INFO$5 = (VOID *) 0XA15E158HOW TO REPEAT:IF THIS IS REPEATABLE, A TEST CASE WILL BE UPLOADED. ","SUMMARY":"BUGU00A0#38191  CRASH IN LIST<CACHED_ITEM>::DELETE_ELEMENTS AT SQL_LIST.H:400 ","CLASS":0}
{"ID_DEFECT":"41543","DESCRIPTION":"     [17 DEC 2008 13:20]   PHILIP STOEV          DESCRIPTION:WHEN EXECUTING A CONCURRENT WORKLOAD INVOLVING ROLLBACKS ON TRANSACTION THAT CAUSE DEADLOCKS, MYSQLD ASSERTED AS FOLLOWS:MYSQLD: SQL_ERROR.H:74: UINT DIAGNOSTICS_AREA::SQL_ERRNO() CONST: ASSERTION `M_STATUS == DA_ERROR FAILED.#6  0X000000315A42BEC9 IN __ASSERT_FAIL () FROM LIB64LIBC.SO.6#7  0X00000000006AC048 IN DIAGNOSTICS_AREA::SQL_ERRNO (THIS=0X7FB9BCEE17D0) AT SQL_ERROR.H:74#8  0X000000000080FDC0 IN HA_ROLLBACK_TRANS (THD=0X7FB9BCEE00A8, ALL=TRUE) AT HANDLER.CC:1293#9  0X00000000008DC5A9 IN TRANS_ROLLBACK (THD=0X7FB9BCEE00A8) AT TRANSACTION.CC:206#10 0X00000000006D5DAA IN MYSQL_EXECUTE_COMMAND (THD=0X7FB9BCEE00A8) AT SQL_PARSE.CC:4040#11 0X00000000006D80C7 IN MYSQL_PARSE (THD=0X7FB9BCEE00A8, INBUF=0X2534800 ROLLBACK, LENGTH=8, FOUND_SEMICOLON=0X7FB9AFA2DF00) AT SQL_PARSE.CC:5735#12 0X00000000006D8CB2 IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0X7FB9BCEE00A8, PACKET=0X7FB9BCEEA979  ROLLBACK, PACKET_LENGTH=9) AT SQL_PARSE.CC:1007#13 0X00000000006DA1DB IN DO_COMMAND (THD=0X7FB9BCEE00A8) AT SQL_PARSE.CC:690#14 0X00000000006C82F1 IN HANDLE_ONE_CONNECTION (ARG=0X7FB9BCEE00A8) AT SQL_CONNECT.CC:1145#15 0X000000315B0073DA IN START_THREAD () FROM LIB64LIBPTHREAD.SO.0#16 0X000000315A4E627D IN CLONE () FROM LIB64LIBC.SO.6(GDB) PRINT M_STATUS$1 = DIAGNOSTICS_AREA::DA_EMPTYHOW TO REPEAT:A TEST CASE WILL BE UPLOADED SHORTLY. ","SUMMARY":"BUGU00A0#41543  ASSERTION `M_STATUS == DA_ERROR FAILED IN DIAGNOSTICS_AREA::SQL_ERRNO ","CLASS":0}
{"ID_DEFECT":"44886","DESCRIPTION":"     [14 MAY 2009 20:08]   GUILLAUME GIROUX          DESCRIPTION:CRASH WITH SIGSEGV IN SQL_SELECT.CC::TEST_IF_SKIP_SORT_ORDER() AT LINE 13129      REC_PER_KEY= KEYINFO->REC_PER_KEY[USED_KEY_PARTS-1];USED_KEY_PARTS CAN BE USED UNINITIALIZED, THUS CRASHING OR READING RANDOM MEMORY. USED_KEY_PARTS IS INITIALIZED BY TEST_IF_ORDER_BY_KEY(), BUT THIS ONE HAS MANY EXIT POINTS THAT WONT ASSIGN *USED_KEY_PARTS. THE TEST CASE DEMONSTRATES IT QUITE CLEARLY.HOW TO REPEAT:100% REPRODUCIBLE TEST CASE:DROP TABLE IF EXISTS FOO;CREATE TABLE `FOO` (  `FOO_ID` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,  `A` INT(20) DEFAULT NULL,  PRIMARY KEY (`FOO_ID`)) ENGINE=INNODB DEFAULT CHARSET=LATIN1;INSERT INTO FOO VALUES(NULL,1);INSERT INTO FOO VALUES(NULL,2);DROP TABLE IF EXISTS BAR;CREATE TABLE `BAR` (  `BAR_ID` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,  `FOO_ID` INT(10) UNSIGNED NOT NULL DEFAULT 0,  `TYPE` SMALLINT(5) UNSIGNED NOT NULL DEFAULT 1,  `STATUS` BIGINT(20) UNSIGNED DEFAULT 0,  PRIMARY KEY (`BAR_ID`),  KEY `IDX_FOO` (`FOO_ID`,`TYPE`)) ENGINE=INNODB DEFAULT CHARSET=LATIN1;INSERT INTO BAR VALUES(NULL,1,1,0);INSERT INTO BAR VALUES(NULL,2,1,0);DROP TABLE IF EXISTS BAZ;CREATE TABLE `BAZ` (  `BAZ_ID` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,  `FOO_ID` INT(10) UNSIGNED NOT NULL DEFAULT 0,  `BAR_ID` INT(10) UNSIGNED NOT NULL,  `BAZ_TAG` VARCHAR(100) DEFAULT NULL,  PRIMARY KEY (`BAZ_ID`),  UNIQUE KEY `UDX_FOO_BAR` (`FOO_ID`,`BAR_ID`),  KEY `IDX_BAZTAG` (`BAZ_TAG`)) ENGINE=INNODB CHARSET=LATIN1;INSERT INTO BAZ VALUES(NULL,1,1,FOO@BAR.COM);INSERT INTO BAZ VALUES(NULL,2,1,FOO@BAR.COM);DROP TABLE IF EXISTS FOO_BAR;CREATE TABLE `FOO_BAR` (  `FOO_ID` INT(10) UNSIGNED DEFAULT 0,   `BAR_ID` INT(10) UNSIGNED DEFAULT 0) ENGINE=MYISAM CHARSET=LATIN1; # DOES NOT CRASH WITH ENGINE=INNODBINSERT INTO FOO_BAR VALUES (1, 1);SELECT  FOO.FOO_IDFROM    FOO_BAR        INNER JOIN FOO ON (FOO.FOO_ID = FOO_BAR.FOO_ID)        INNER JOIN BAR ON (BAR.FOO_ID = FOO.FOO_ID AND (BAR.BAR_ID = FOO_BAR.BAR_ID OR BAR.STATUS & 1))        LEFT JOIN BAZ ON (BAZ.BAR_ID = BAR.BAR_ID  AND BAZ_TAG = FOO@BAR.COM)WHERE   BAZ_TAG = FOO@BAR.COMGROUP BY BAR.BAR_ID;SUGGESTED FIX:--- MYSQL-5.1.34SQLSQL_SELECT.CC.ORIT2009-05-14 09:23:16.000000000 -0400+++ MYSQL-5.1.34SQLSQL_SELECT.CCT2009-05-14 09:23:16.000000000 -0400@@ -12912,7 +12912,7 @@   INT REF_KEY;   UINT REF_KEY_PARTS;   INT ORDER_DIRECTION;-  UINT USED_KEY_PARTS;+  UINT USED_KEY_PARTS= 0;   TABLE *TABLE=TAB->TABLE;   SQL_SELECT *SELECT=TAB->SELECT;   KEY_MAP USABLE_KEYS;@@ -13124,7 +13124,7 @@           KEY *KEYINFO= TAB->TABLE->KEY_INFO+NR;           IF (SELECT_LIMIT == HA_POS_ERROR)             SELECT_LIMIT= TABLE_RECORDS;-          IF (GROUP)+          IF (GROUP && USED_KEY_PARTS)                        REC_PER_KEY= KEYINFO->REC_PER_KEY[USED_KEY_PARTS-1];             SET_IF_BIGGER(REC_PER_KEY, 1); ","SUMMARY":"BUGU00A0#44886  SIGSEGV IN TEST_IF_SKIP_SORT_ORDER() - UNINITIALIZED VARIABLE USED AS SUBSCRIPT  ","CLASS":0}
{"ID_DEFECT":"45195","DESCRIPTION":"     [29 MAY 2009 13:58]   SHANE BESTER          DESCRIPTION:VALGRIND OUTPUT FROM 5.1.36CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S)AT: STORE_RECORD_IN_CACHE(ST_JOIN_CACHE*) (SQL_SELECT.CC:14031)BY: SUB_SELECT_CACHE(JOIN*, ST_JOIN_TABLE*, BOOL) (SQL_SELECT.CC:10961)BY: EVALUATE_JOIN_RECORD(JOIN*, ST_JOIN_TABLE*, INT) (SQL_SELECT.CC:11246)BY: SUB_SELECT(JOIN*, ST_JOIN_TABLE*, BOOL) (SQL_SELECT.CC:11131)BY: DO_SELECT(JOIN*, LIST<ITEM>*, ST_TABLE*, PROCEDURE*) (SQL_SELECT.CC:10887)BY: JOIN::EXEC() (SQL_SELECT.CC:2199)BY: MYSQL_SELECT (SQL_SELECT.CC:2386)BY: HANDLE_SELECT (SQL_SELECT.CC:268)BY: EXECUTE_SQLCOM_SELECT(THD*, TABLE_LIST*) (SQL_PARSE.CC:5011)BY: MYSQL_EXECUTE_COMMAND(THD*) (SQL_PARSE.CC:2208)BY: MYSQL_PARSE(THD*, CHAR CONST*, UNSIGNED, CHAR CONST**) (SQL_PARSE.CC:5931)BY: DISPATCH_COMMAND (SQL_PARSE.CC:1213)SQL_SELECT:14031 IS THIS CODE LINE:FOR (STR=COPY->STR,END= STR+COPY->LENGTH;   END > STR && END[-1] ==   ;   END--) ;HOW TO REPEAT:FLUSH TABLES;DROP TABLE IF EXISTS `T1`,`T2`,`MM1`;CREATE TABLE `T1`(`A` CHAR(9),`B` INT,KEY(`B`),KEY(`A`))ENGINE=MYISAM;CREATE TABLE `T2`(`A` CHAR(9),`B` INT,KEY(`B`),KEY(`A`))ENGINE=MYISAM;INSERT INTO `T1` VALUES (1,NULL),(NULL,NULL);INSERT INTO `T2` VALUES (1,NULL),(NULL,NULL);CREATE TABLE `MM1`(`A` CHAR(9),`B` INT,KEY(`B`),KEY(`A`))ENGINE=MERGE  UNION=(`T1`,`T2`);SELECT `T1`.`A` FROM `MM1`,`T1`; ","SUMMARY":"BUGU00A0#45195  VALGRIND WARNINGS ABOUT UNINITIALIZED VALUES IN STORE_RECORD_IN_CACHE() ","CLASS":0}
{"ID_DEFECT":"45989","DESCRIPTION":"     [7 JUL 2009 7:10]   SHANE BESTER          DESCRIPTION:16 BYTES IN 1 BLOCKS ARE DEFINITELY LOST IN LOSS RECORD 1 OF 3AT: MALLOC (VG_REPLACE_MALLOC.C:149)BY: MY_MALLOC (MY_MALLOC.C:34)BY: STRING::REAL_ALLOC(UNSIGNED) (SQL_STRING.CC:51)BY: STRING::COPY(STRING CONST&) (SQL_STRING.H:202)BY: DO_SAVE_BLOB(COPY_FIELD*) (FIELD_CONV.CC:296)BY: DO_COPY_NULL(COPY_FIELD*) (FIELD_CONV.CC:207)BY: COPY_FIELDS(TMP_TABLE_PARAM*) (SQL_SELECT.CC:15059)BY: END_WRITE_GROUP(JOIN*, ST_JOIN_TABLE*, BOOL) (SQL_SELECT.CC:12409)BY: EVALUATE_JOIN_RECORD(JOIN*, ST_JOIN_TABLE*, INT) (SQL_SELECT.CC:11253)BY: SUB_SELECT(JOIN*, ST_JOIN_TABLE*, BOOL) (SQL_SELECT.CC:11138)BY: DO_SELECT(JOIN*, LIST<ITEM>*, ST_TABLE*, PROCEDURE*) (SQL_SELECT.CC:10894)BY: JOIN::EXEC() (SQL_SELECT.CC:1959)HOW TO REPEAT:... ","SUMMARY":"BUGU00A0#45989  MEMORY LEAK AFTER EXPLAIN ENCOUNTERS AN ERROR IN THE QUERY ","CLASS":0}
{"ID_DEFECT":"46159","DESCRIPTION":"     [14 JUL 2009 0:16]   RYAN HUDDLESTON          DESCRIPTION:A SIMPLE QUERY HANGS INDEFINITELY WHEN RUN ON THIS DATA SET. APPEARS TO BE AN OPTIMIZER ISSUES IS MY GUESS. SOMETHING TO DO WITH THE HAVING CLAUSE AND AND THE DISTINCT BOTH WORKING WITH NULL VALUES.WHEN RUNNING IT CHEWS 100% CPU UNTIL THE QUERY IS KILLED WHICH CAN BE A DOS ISSUE.HOW TO REPEAT:STEPS TO REPEAT:1) LOAD DUMP AT FTP:FTP.MYSQL.COMPUBMYSQLUPLOADMYSQL_BUG_090713.DUMP2.GZ2) SELECT DISTINCT DATA_ALT1 FROM DATA GROUP BY DATA HAVING COUNT(*) > 1;THE ABOVE DATA HAS 35,000 ROWS AND THE SQL WILL NEVER RETURN. DOESNT MATTER IF ITS INNODB OR MYISAM. SUGGESTED FIX:FIX CODE ","SUMMARY":"BUGU00A0#46159  SIMPLE QUERY THAT NEVER RETURNS ","CLASS":0}
{"ID_DEFECT":"46175","DESCRIPTION":"     [14 JUL 2009 15:33]   ADAM ERICKSON          DESCRIPTION:AFTER TESTING FOR OVER A MONTH WE DEPLOYED 5.1.35 AND GOT OUR FIRST CRASH. :)THIS MAY BE RELATED TO BUG #43503 BUT SINCE I DO NOT SEE A STACK TRACE IN THAT BUG IVE CREATED A NEW ONE.THE OFFENDING QUERY HAS BEEN TESTED AND DOES NOT CAUSE A CRASH ON ITS OWN.  THERE WAS A SIGNIFICANT SLOWDOWN JUST BEFORE THE CRASH.  QUERIES THAT RETURN IN < 1 SECOND TOOK UP TO 30.  EXAMPLE SLOW QUERY LOG HEADER:# TIME: 090714  5:58:20# USER@HOST: XXXX[XXXX] @ HOST.NAME.REMOVED [X.X.X.X]# QUERY_TIME: 27.175840  LOCK_TIME: 0.000133 ROWS_SENT: 7  ROWS_EXAMINED: 62BRIEF ERROR LOG IS BELOW.  FULL LOG IS ATTACHED WITH MY.CNF ALONG WITH SHOW GLOBAL STATUS SHORTLY BEFORE THE CRASH.INNODB: ERROR: MYSQL IS TRYING TO PERFORM A CONSISTENT READINNODB: BUT THE READ VIEW IS NOT ASSIGNED!TRANSACTION 0 132894301, ACTIVE 0 SEC, PROCESS NO 20815, OS THREAD ID 1180526912 STARTING INDEX READMYSQL TABLES IN USE 3, LOCKED 1MYSQL THREAD ID 9699, QUERY ID 7033508 HOST.NAME.REMOVED X.X.X.X DB_NAME SENDING DATA... PARTIAL QUERY REMOVED ...090714  5:59:19  INNODB: ASSERTION FAILURE IN THREAD 1180526912 IN FILE ROWROW0SEL.C LINE 3642......THD: 0X2AACE88808C0ATTEMPTING BACKTRACE. YOU CAN USE THE FOLLOWING INFORMATION TO FIND OUTWHERE MYSQLD DIED. IF YOU SEE NO MESSAGES AFTER THIS, SOMETHING WENTTERRIBLY WRONG...STACK_BOTTOM = 0X465D6108 THREAD_STACK 0X40000OPTMYSQLBINMYSQLD(MY_PRINT_STACKTRACE+0X20) [0XA05744]OPTMYSQLBINMYSQLD(HANDLE_SEGFAULT+0X368) [0X60074C]LIB64LIBPTHREAD.SO.0 [0X3AB900DE60]OPTMYSQLBINMYSQLD(ROW_SEARCH_FOR_MYSQL+0X2C5B) [0X91F53D]OPTMYSQLBINMYSQLD(HA_INNOBASE::INDEX_READ(UNSIGNED CHAR*, UNSIGNED CHAR CONST*, UNSIGNED INT, HA_RKEY_FUNCTION)+0X2BF) [0X8333C9]OPTMYSQLBINMYSQLD [0X748AA0]OPTMYSQLBINMYSQLD [0X690608]OPTMYSQLBINMYSQLD(SUB_SELECT(JOIN*, ST_JOIN_TABLE*, BOOL)+0XA1) [0X68DC9D]OPTMYSQLBINMYSQLD [0X68DF7F]OPTMYSQLBINMYSQLD(SUB_SELECT(JOIN*, ST_JOIN_TABLE*, BOOL)+0XC9) [0X68DCC5]OPTMYSQLBINMYSQLD [0X68D80F]OPTMYSQLBINMYSQLD(JOIN::EXEC()+0X1990) [0X6881E0]OPTMYSQLBINMYSQLD(MYSQL_SELECT(THD*, ITEM***, TABLE_LIST*, UNSIGNED INT, LIST<ITEM>&, ITEM*, UNSIGNED INT, ST_ORDER*, ST_ORDER*, ITEM*, ST_ORDER*, UNSIGNED LONG LONG, SELECT_RESULT*, ST_SELECT_LEX_UNIT*, ST_SELECT_LEX*)+0X18B) [0X66C827]OPTMYSQLBINMYSQLD(HANDLE_SELECT(THD*, ST_LEX*, SELECT_RESULT*, UNSIGNED LONG)+0X16C) [0X695220]OPTMYSQLBINMYSQLD [0X616AD8]OPTMYSQLBINMYSQLD(MYSQL_EXECUTE_COMMAND(THD*)+0X4B00) [0X610C30]OPTMYSQLBINMYSQLD(MYSQL_PARSE(THD*, CHAR CONST*, UNSIGNED INT, CHAR CONST**)+0X20A) [0X61706E]OPTMYSQLBINMYSQLD(DISPATCH_COMMAND(ENUM_SERVER_COMMAND, THD*, CHAR*, UNSIGNED INT)+0X133F) [0X60B5D9]OPTMYSQLBINMYSQLD(DO_COMMAND(THD*)+0X114) [0X60A296]OPTMYSQLBINMYSQLD(HANDLE_ONE_CONNECTION+0XD20) [0X60564C]LIB64LIBPTHREAD.SO.0 [0X3AB90062E7]LIB64LIBC.SO.6(CLONE+0X6D) [0X3AB88CE3BD]TRYING TO GET SOME VARIABLES.SOME POINTERS MAY BE INVALID AND CAUSE THE DUMP TO ABORT...THD->QUERY AT 0X2AACE873DF50 IS AN INVALID POINTERTHD->THREAD_ID=9699THD->KILLED=NOT_KILLEDTHE MANUAL PAGE AT HTTP:DEV.MYSQL.COMDOCMYSQLENCRASHING.HTML CONTAINSINFORMATION THAT SHOULD HELP YOU FIND OUT WHAT IS CAUSING THE CRASH.090714 05:59:20 MYSQLD_SAFE NUMBER OF PROCESSES RUNNING NOW: 0090714 05:59:20 MYSQLD_SAFE MYSQLD RESTARTEDHOW TO REPEAT:AS OF YET UNKNOWN.SUGGESTED FIX:NOT CRASH. ","SUMMARY":"BUGU00A0#46175  NULL READ_VIEW AND CONSISTENT READ ASSERTION ","CLASS":0}
{"ID_DEFECT":"46629","DESCRIPTION":"     [10 AUG 2009 13:21]   PHILIP STOEV          DESCRIPTION:WHEN CALLING A SP CONTAINING A SUBQUERY, 5.1 ASSERTED AS FOLLOWS:MYSQLD: ITEM_SUBSELECT.CC:813: VIRTUAL LONGLONG ITEM_IN_SUBSELECT::VAL_INT(): ASSERTION `0 FAILED.#6  0X000000315A42BEC9 IN __ASSERT_FAIL () FROM LIB64LIBC.SO.6#7  0X00000000005EE0D9 IN ITEM_IN_SUBSELECT::VAL_INT (THIS=0X1F250D8) AT ITEM_SUBSELECT.CC:813#8  0X0000000000594E0E IN EVAL_CONST_COND (COND=0X1F250D8) AT ITEM_FUNC.CC:63#9  0X00000000006CF4F7 IN REMOVE_EQ_CONDS (THD=0X1EAF718, COND=0X1F250D8, COND_VALUE=0X1F29F68) AT SQL_SELECT.CC:9124#10 0X00000000006D4883 IN OPTIMIZE_COND (JOIN=0X1F28990, CONDS=0X1F250D8, JOIN_LIST=0X1F423F0, COND_VALUE=0X1F29F68) AT SQL_SELECT.CC:8972#11 0X00000000006DDBC8 IN JOIN::OPTIMIZE (THIS=0X1F28990) AT SQL_SELECT.CC:830#12 0X00000000006E23D3 IN MYSQL_SELECT (THD=0X1EAF718, RREF_POINTER_ARRAY=0X1F42458, TABLES=0X1F42EB0, WILD_NUM=0, FIELDS=@0X1F42390, CONDS=0X1F250D8,    OG_NUM=0, ORDER=0X0, GROUP=0X0, HAVING=0X0, PROC_PARAM=0X0, SELECT_OPTIONS=2147765760, RESULT=0X1F28970, UNIT=0X1F41E60, SELECT_LEX=0X1F42288)    AT SQL_SELECT.CC:2384#13 0X00000000006E79C7 IN HANDLE_SELECT (THD=0X1EAF718, LEX=0X1F41DC0, RESULT=0X1F28970, SETUP_TABLES_DONE_OPTION=0) AT SQL_SELECT.CC:268#14 0X0000000000652657 IN EXECUTE_SQLCOM_SELECT (THD=0X1EAF718, ALL_TABLES=0X1F42EB0) AT SQL_PARSE.CC:5011#15 0X0000000000654528 IN MYSQL_EXECUTE_COMMAND (THD=0X1EAF718) AT SQL_PARSE.CC:2206#16 0X00000000008152DF IN SP_INSTR_STMT::EXEC_CORE (THIS=0X1F25230, THD=0X1EAF718, NEXTP=0X7FD11256D1C8) AT SP_HEAD.CC:2905#17 0X0000000000815517 IN SP_LEX_KEEPER::RESET_LEX_AND_EXEC_CORE (THIS=0X1F25270, THD=0X1EAF718, NEXTP=0X7FD11256D1C8, OPEN_TABLES=FALSE, INSTR=0X1F25230)    AT SP_HEAD.CC:2734#18 0X000000000081B6B7 IN SP_INSTR_STMT::EXECUTE (THIS=0X1F25230, THD=0X1EAF718, NEXTP=0X7FD11256D1C8) AT SP_HEAD.CC:2848#19 0X00000000008177EF IN SP_HEAD::EXECUTE (THIS=0X1F41608, THD=0X1EAF718) AT SP_HEAD.CC:1252#20 0X000000000081857E IN SP_HEAD::EXECUTE_PROCEDURE (THIS=0X1F41608, THD=0X1EAF718, ARGS=0X1EB1A88) AT SP_HEAD.CC:1982#21 0X000000000065B0A4 IN MYSQL_EXECUTE_COMMAND (THD=0X1EAF718) AT SQL_PARSE.CC:4352#22 0X000000000065D3EB IN MYSQL_PARSE (THD=0X1EAF718, INBUF=0X1F17698 CALL  P1_4_A, LENGTH=12, FOUND_SEMICOLON=0X7FD11256EED0) AT SQL_PARSE.CC:5931#23 0X000000000065E215 IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0X1EAF718, PACKET=0X1F03C59 CALL  P1_4_A, PACKET_LENGTH=12) AT SQL_PARSE.CC:1213#24 0X000000000065F5E4 IN DO_COMMAND (THD=0X1EAF718) AT SQL_PARSE.CC:854#25 0X000000000064BF15 IN HANDLE_ONE_CONNECTION (ARG=0X1EAF718) AT SQL_CONNECT.CC:1127#26 0X000000315B0073DA IN START_THREAD () FROM LIB64LIBPTHREAD.SO.0#27 0X000000315A4E627D IN CLONE () FROM LIB64LIBC.SO.6FOR SOME REASON, AZALEA IS NOT AFFECTED.HOW TO REPEAT:--DISABLE_ABORT_ON_ERRORDELIMITER |;CREATE PROCEDURE P1_4_A  () BEGIN SELECT  `INT_KEY` FROM  T1_PART_3_A  A WHERE A.`PK` IN ( SELECT `PK` FROM  T1_BASE_0_A  AS B ) ; END|DELIMITER ;|CREATE TABLE IF NOT EXISTS T1_PART_3_A  (`INT_KEY` INTEGER);CREATE TABLE IF NOT EXISTS T1_BASE_0_A  (`INT_KEY` INTEGER, `PK` INTEGER PRIMARY KEY);CALL  P1_4_A;CALL  P1_4_A; ","SUMMARY":"BUGU00A0#46629  ITEM_IN_SUBSELECT::VAL_INT(): ASSERTION `0 ON SUBQUERY INSIDE A SP  ","CLASS":0}
{"ID_DEFECT":"47150","DESCRIPTION":"     [5 SEP 2009 11:13]   PHILIP STOEV          DESCRIPTION:THE FOLLOWING SEQUENCE THAT CONTAINS VIEWS, TRIGGERS, MERGE TABLES AND MULTI-TABLE UPDATE CAUSES MYSQLD TO ASSERT AS FOLLOWS:MYSQLD: FIELD.CC:3682: VIRTUAL LONGLONG FIELD_LONG::VAL_INT(): ASSERTION `!TABLE || (!TABLE->READ_SET || BITMAP_IS_SET(TABLE->READ_SET, FIELD_INDEX)) FAILED.#6  0X000000315A42BEC9 IN __ASSERT_FAIL () FROM LIB64LIBC.SO.6#7  0X000000000060CBCC IN FIELD_LONG::VAL_INT (THIS=0X1D363B0) AT FIELD.CC:3682#8  0X000000000056B8DE IN ITEM_FIELD::VAL_INT (THIS=0X1D83A20) AT ITEM.CC:2029#9  0X00000000005AE320 IN ARG_COMPARATOR::COMPARE_INT_SIGNED (THIS=0X1D87540) AT ITEM_CMPFUNC.CC:1260#10 0X00000000005BE61A IN ARG_COMPARATOR::COMPARE (THIS=0X1D87540) AT ITEM_CMPFUNC.H:71#11 0X00000000005B2979 IN ITEM_FUNC_EQ::VAL_INT (THIS=0X1D87490) AT ITEM_CMPFUNC.CC:1645#12 0X00000000005BCF48 IN ITEM_EQUAL::ADD (THIS=0X1D866E8, C=0X1D83A20) AT ITEM_CMPFUNC.CC:5075#13 0X00000000005BCFCA IN ITEM_EQUAL::UPDATE_CONST (THIS=0X1D866E8) AT ITEM_CMPFUNC.CC:5212#14 0X00000000006D232A IN UPDATE_CONST_EQUAL_ITEMS (COND=0X1D866E8, TAB=0X1D86B38) AT SQL_SELECT.CC:8200#15 0X00000000006D228E IN UPDATE_CONST_EQUAL_ITEMS (COND=0X1D7FF08, TAB=0X1D86B38) AT SQL_SELECT.CC:8193#16 0X00000000006D27F6 IN JOIN_READ_CONST_TABLE (TAB=0X1D86B38, POS=0X1D80440) AT SQL_SELECT.CC:11541#17 0X00000000006DC148 IN MAKE_JOIN_STATISTICS (JOIN=0X1D80380, TABLES_ARG=0X1D81F40, CONDS=0X1D7FF08, KEYUSE_ARRAY=0X1D81940) AT SQL_SELECT.CC:2647#18 0X00000000006DE38A IN JOIN::OPTIMIZE (THIS=0X1D80380) AT SQL_SELECT.CC:954#19 0X00000000006E23D3 IN MYSQL_SELECT (THD=0X1CBDD88, RREF_POINTER_ARRAY=0X1D41EE8, TABLES=0X1D42840, WILD_NUM=0, FIELDS=@0X7F3304EB7760, CONDS=0X1D7FF08, OG_NUM=0, ORDER=0X0,    GROUP=0X0, HAVING=0X0, PROC_PARAM=0X0, SELECT_OPTIONS=1342177408, RESULT=0X1D802B8, UNIT=0X1D418F0, SELECT_LEX=0X1D41D18) AT SQL_SELECT.CC:2384#20 0X000000000070348F IN MYSQL_MULTI_UPDATE (THD=0X1CBDD88, TABLE_LIST=0X1D42840, FIELDS=0X1D41E20, VALUES=0X1D42200, CONDS=0X1D7FF08, OPTIONS=0, HANDLE_DUPLICATES=DUP_ERROR,    IGNORE=FALSE, UNIT=0X1D418F0, SELECT_LEX=0X1D41D18) AT SQL_UPDATE.CC:1228#21 0X0000000000656D9D IN MYSQL_EXECUTE_COMMAND (THD=0X1CBDD88) AT SQL_PARSE.CC:3090#22 0X00000000008152DF IN SP_INSTR_STMT::EXEC_CORE (THIS=0X1D724D8, THD=0X1CBDD88, NEXTP=0X7F3304EB8A88) AT SP_HEAD.CC:2905#23 0X0000000000815517 IN SP_LEX_KEEPER::RESET_LEX_AND_EXEC_CORE (THIS=0X1D72518, THD=0X1CBDD88, NEXTP=0X7F3304EB8A88, OPEN_TABLES=FALSE, INSTR=0X1D724D8) AT SP_HEAD.CC:2734#24 0X000000000081B6B7 IN SP_INSTR_STMT::EXECUTE (THIS=0X1D724D8, THD=0X1CBDD88, NEXTP=0X7F3304EB8A88) AT SP_HEAD.CC:2848#25 0X00000000008177EF IN SP_HEAD::EXECUTE (THIS=0X1D40FC8, THD=0X1CBDD88) AT SP_HEAD.CC:1252#26 0X0000000000818B19 IN SP_HEAD::EXECUTE_TRIGGER (THIS=0X1D40FC8, THD=0X1CBDD88, DB_NAME=0X1D462D8, TABLE_NAME=0X1D462E8, GRANT_INFO=0X1D48CF0) AT SP_HEAD.CC:1555#27 0X0000000000826C47 IN TABLE_TRIGGERS_LIST::PROCESS_TRIGGERS (THIS=0X1D48C18, THD=0X1CBDD88, EVENT=TRG_EVENT_INSERT, TIME_TYPE=TRG_ACTION_AFTER, OLD_ROW_IS_RECORD1=TRUE)    AT SQL_TRIGGER.CC:2013#28 0X00000000006EE8BB IN WRITE_RECORD (THD=0X1CBDD88, TABLE=0X1D457F8, INFO=0X1D75BE8) AT SQL_INSERT.CC:1595#29 0X00000000006EEBFE IN SELECT_INSERT::SEND_DATA (THIS=0X1D75BA8, VALUES=@0X1CBFD18) AT SQL_INSERT.CC:3144#30 0X00000000006BCB7B IN END_SEND (JOIN=0X1D77DF8, JOIN_TAB=0X1D77570, END_OF_RECORDS=FALSE) AT SQL_SELECT.CC:12012#31 0X00000000006C3AA9 IN EVALUATE_JOIN_RECORD (JOIN=0X1D77DF8, JOIN_TAB=0X1D77328, ERROR=0) AT SQL_SELECT.CC:11272#32 0X00000000006C3CF2 IN SUB_SELECT (JOIN=0X1D77DF8, JOIN_TAB=0X1D77328, END_OF_RECORDS=FALSE) AT SQL_SELECT.CC:11163#33 0X00000000006D5277 IN DO_SELECT (JOIN=0X1D77DF8, FIELDS=0X1CBFD18, TABLE=0X0, PROCEDURE=0X0) AT SQL_SELECT.CC:10913#34 0X00000000006E7687 IN JOIN::EXEC (THIS=0X1D77DF8) AT SQL_SELECT.CC:2209#35 0X00000000006E246F IN MYSQL_SELECT (THD=0X1CBDD88, RREF_POINTER_ARRAY=0X1CBFDE0, TABLES=0X1D26C28, WILD_NUM=0, FIELDS=@0X1CBFD18, CONDS=0X0, OG_NUM=0, ORDER=0X0, GROUP=0X0,    HAVING=0X0, PROC_PARAM=0X0, SELECT_OPTIONS=3492039168, RESULT=0X1D75BA8, UNIT=0X1CBF7E8, SELECT_LEX=0X1CBFC10) AT SQL_SELECT.CC:2398#36 0X00000000006E79C7 IN HANDLE_SELECT (THD=0X1CBDD88, LEX=0X1CBF748, RESULT=0X1D75BA8, SETUP_TABLES_DONE_OPTION=1073741824) AT SQL_SELECT.CC:268#37 0X00000000006572E7 IN MYSQL_EXECUTE_COMMAND (THD=0X1CBDD88) AT SQL_PARSE.CC:3193#38 0X000000000065D3EB IN MYSQL_PARSE (THD=0X1CBDD88,    INBUF=0X1D26078 REPLACE   TESTDB_A . T1_BASE_1_A  ( `INT`,`PK`,`INT_KEY` ) SELECT   `INT`,`PK`,`INT_KEY` FROM TESTDB_A . T1_PART_2_A  AS A, LENGTH=122,    FOUND_SEMICOLON=0X7F3304EBAED0) AT SQL_PARSE.CC:5931#39 0X000000000065E215 IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0X1CBDD88,    PACKET=0X1D11E39 REPLACE   TESTDB_A . T1_BASE_1_A  ( `INT`,`PK`,`INT_KEY` ) SELECT   `INT`,`PK`,`INT_KEY` FROM TESTDB_A . T1_PART_2_A  AS A  , PACKET_LENGTH=124)    AT SQL_PARSE.CC:1213#40 0X000000000065F5E4 IN DO_COMMAND (THD=0X1CBDD88) AT SQL_PARSE.CC:854#41 0X000000000064BF15 IN HANDLE_ONE_CONNECTION (ARG=0X1CBDD88) AT SQL_CONNECT.CC:1127#42 0X000000315B0073DA IN START_THREAD () FROM LIB64LIBPTHREAD.SO.0#43 0X000000315A4E627D IN CLONE () FROM LIB64LIBC.SO.6HOW TO REPEAT:THIS TEST CASE WAS AUTOMATICALLY CULLED FROM A 20K-LINE QUERY LOG, SO IT MAY STILL CONTAIN REDUNDANT ITEMS. HOWEVER, IT SEEMS THAT AT LEAST THE TRIGGER, THE MULTI-TABLE UPDATE INSIDE THE TRIGGER AND THE MERGE TABLE ARE ALL REQUIRED.CREATE TABLE `TABLE0_INT_AUTOINC` ( `INT` INT, PK INTEGER AUTO_INCREMENT, `INT_KEY` INT,        PRIMARY KEY (PK), KEY (`INT_KEY` ));CREATE TABLE `TABLE1_INT_AUTOINC` ( `INT` INT, PK INTEGER AUTO_INCREMENT, `INT_KEY` INT,        PRIMARY KEY (PK), KEY (`INT_KEY` ));INSERT IGNORE INTO TABLE1_INT_AUTOINC VALUES  (4, NULL, NULL);CREATE TABLE `TABLE10_INT_AUTOINC` ( `INT` INT, PK INTEGER AUTO_INCREMENT, `INT_KEY` INT,       PRIMARY KEY (PK), KEY (`INT_KEY` ));CREATE SCHEMA IF NOT EXISTS TESTDB_A DEFAULT CHARACTER SET  UTF8;CREATE TABLE IF NOT EXISTS TESTDB_A . T1_BASE_1_A  LIKE TEST . TABLE10_INT_AUTOINC;CREATE TABLE IF NOT EXISTS TESTDB_A . T1_PART_2_A  ENGINE = MYISAM PARTITION BY KEY (PK) PARTITIONS 2 AS SELECT   `INT`,`PK`,`INT_KEY` FROM TESTDB_A . T1_BASE_1_A   A WHERE `PK` BETWEEN 9 AND 0;CREATE TABLE IF NOT EXISTS TESTDB_A . T1_BASE_2_A LIKE TEST . TABLE1_INT_AUTOINC;CREATE  ALGORITHM = MERGE VIEW TESTDB_A . T1_VIEW_1_A  AS SELECT   `INT`,`PK`,`INT_KEY` FROM TESTDB_A . T1_BASE_2_A  AS A;CREATE TABLE IF NOT EXISTS TESTDB_A . T1_TEMP_2_A  LIKE TEST . TABLE0_INT_AUTOINC;CREATE OR REPLACE ALGORITHM = MERGE VIEW TESTDB_A . T1_VIEW_2_A  AS SELECT   `INT`,`PK`,`INT_KEY` FROM TESTDB_A . T1_TEMP_2_A  AS A WHERE `PK` BETWEEN 2 AND 9;INSERT INTO TESTDB_A . T1_BASE_1_A SELECT * FROM TEST . TABLE1_INT_AUTOINC;INSERT INTO TESTDB_A . T1_BASE_2_A SELECT * FROM TEST . TABLE1_INT_AUTOINC;CREATE TABLE IF NOT EXISTS TESTDB_A . T1_MERGE_1_A LIKE TEST . TABLE1_INT_AUTOINC;ALTER TABLE TESTDB_A . T1_MERGE_1_A ENGINE = MERGE UNION ( TESTDB_A . T1_BASE_1_A , TESTDB_A . T1_BASE_2_A );DELIMITER |;CREATE TRIGGER TESTDB_A . TR1_2_A  AFTER INSERT ON T1_BASE_1_A FOR EACH ROW BEGIN UPDATE   TESTDB_A . T1_VIEW_2_A  AS A NATURAL JOIN TESTDB_A . T1_VIEW_1_A  B SET A. `INT_KEY` = 9, B. `PK` = 1 ; END|DELIMITER ;|INSERT   TESTDB_A . T1_PART_2_A  ( `INT`,`PK`,`INT_KEY` ) SELECT   * FROM TESTDB_A . T1_MERGE_1_A  A;REPLACE   TESTDB_A . T1_BASE_1_A  ( `INT`,`PK`,`INT_KEY` ) SELECT   `INT`,`PK`,`INT_KEY` FROM TESTDB_A . T1_PART_2_A  AS A  ; ","SUMMARY":"BUGU00A0#47150  ASSERTION IN  FIELD_LONG::VAL_INT() ON MERGE + TRIGGER + MULTI-TABLE UPDATE ","CLASS":0}
{"ID_DEFECT":"47649","DESCRIPTION":"     [25 SEP 2009 13:25]   MATTHIAS LEICH          DESCRIPTION:MY SCRIPT:------------DISABLE_ABORT_ON_ERRORCREATE TABLE T1 ( F1 INTEGER, PRIMARY KEY (F1));CREATE TABLE T2 LIKE T1;CREATE TEMPORARY TABLE T3 LIKE T1;DELIMITER |;CREATE PROCEDURE P1 () BEGIN SELECT F1 FROM T3 AS A WHERE A.F1 IN ( SELECT F1 FROM T3 ) ; END|DELIMITER ;|CALL P1;CREATE VIEW T3 AS SELECT F1 FROM T2 A WHERE A.F1 IN ( SELECT F1 FROM T2 );DROP TABLE T3;CALL P1;DROP TABLE T3;CALL P1;RESULT ON MYSQL-6.0-CODEBASE-BUGFIXING 2009-09-24 08:11:33----------------------------------------------------------CREATE TABLE T1 ( F1 INTEGER, PRIMARY KEY (F1));CREATE TABLE T2 LIKE T1;CREATE TEMPORARY TABLE T3 LIKE T1;CREATE PROCEDURE P1 () BEGIN SELECT F1 FROM T3 AS A WHERE A.F1 IN ( SELECT F1 FROM T3 ) ; END|CALL P1;ERROR HY000: CANT REOPEN TABLE: ACREATE VIEW T3 AS SELECT F1 FROM T2 A WHERE A.F1 IN ( SELECT F1 FROM T2 );DROP TABLE T3;CALL P1;F1DROP TABLE T3;ERROR 42S02: UNKNOWN TABLE T3CALL P1;ERROR HY000: LOST CONNECTION TO MYSQL SERVER DURING QUERYTHREAD 1 (PROCESS 29168):#0  0X00007F993E735CE6 IN PTHREAD_KILL () FROM LIB64LIBPTHREAD.SO.0#1  0X0000000000B75224 IN MY_WRITE_CORE (SIG=11) AT STACKTRACE.C:309#2  0X00000000006F3E24 IN HANDLE_SEGFAULT (SIG=11) AT MYSQLD.CC:2755#3  <SIGNAL HANDLER CALLED>#4  0X0000000000617FE1 IN ITEM_CACHE::GET_CACHE (ITEM=0X162ED70) AT ITEM.CC:7171#5  0X000000000066647B IN ITEM_IN_OPTIMIZER::FIX_LEFT (THIS=0X181C850, THD=0X16170A8, REF=0X162EA40) AT ITEM_CMPFUNC.CC:1486#6  0X00000000006667D3 IN ITEM_IN_OPTIMIZER::FIX_FIELDS (THIS=0X181C850, THD=0X16170A8, REF=0X162EA40) AT ITEM_CMPFUNC.CC:1521#7  0X0000000000662F87 IN ITEM_COND::FIX_FIELDS (THIS=0X162E938, THD=0X16170A8, REF=0X180AC80) AT ITEM_CMPFUNC.CC:3980.....RESULT ON MYSQL-5.1-BUGTEAM 2009-09-16--------------------------------------CRASH ON THE LAST STATEMENT (CALL P1;)ERROR HY000: LOST CONNECTION TO MYSQL SERVER DURING QUERYTHREAD 1 (PROCESS 29303):#0  0X00007FF8B862ECE6 IN PTHREAD_KILL () FROM LIB64LIBPTHREAD.SO.0#1  0X0000000000B1A74B IN MY_WRITE_CORE (SIG=11) AT STACKTRACE.C:310#2  0X00000000006B97F4 IN HANDLE_SEGFAULT (SIG=11) AT MYSQLD.CC:2552#3  <SIGNAL HANDLER CALLED>#4  0X0000000000617407 IN ITEM_FUNC::FIX_FIELDS (THIS=0X12607E0, THD=0X11AC3B8, REF=0X122CF98) AT ITEM_FUNC.CC:171#5  0X000000000062C5BD IN ITEM_COND::FIX_FIELDS (THIS=0X122CE80, THD=0X11AC3B8, REF=0X125D910) AT ITEM_CMPFUNC.CC:3911#6  0X0000000000713404 IN SETUP_CONDS (THD=0X11AC3B8, TABLES=0X1225940, LEAVES=0X12302E8, CONDS=0X125D910) AT SQL_BASE.CC:7991#7  0X0000000000763212 IN SETUP_WITHOUT_GROUP (THD=0X11AC3B8, REF_POINTER_ARRAY=0X1232B58, TABLES=0X1225940, LEAVES=0X12302E8, FIELDS=@0X1213FC8, ALL_FIELDS=@0X125D828, CONDS=0X125D910, ORDER=0X0, GROUP=0X0, HIDDEN_GROUP_FIELDS=0X125D807)    AT SQL_SELECT.CC:412#8  0X000000000075A80F IN JOIN::PREPARE (THIS=0X125C248, RREF_POINTER_ARRAY=0X1214090, TABLES_INIT=0X1225940, WILD_NUM=0, CONDS_INIT=0X122CE80, OG_NUM=0, ORDER_INIT=0X0, GROUP_INIT=0X0, HAVING_INIT=0X0, PROC_PARAM_INIT=0X0,    SELECT_LEX_ARG=0X1213EC0, UNIT_ARG=0X12254D8) AT SQL_SELECT.CC:494#9  0X000000000066531B IN SUBSELECT_SINGLE_SELECT_ENGINE::PREPARE (THIS=0X1225D98) AT ITEM_SUBSELECT.CC:1758#10 0X000000000066A2D2 IN ITEM_SUBSELECT::FIX_FIELDS (THIS=0X1225C80, THD_PARAM=0X11AC3B8, REF=0X12605B8) AT ITEM_SUBSELECT.CC:158#11 0X000000000066A66F IN ITEM_IN_SUBSELECT::FIX_FIELDS (THIS=0X1225C80, THD_ARG=0X11AC3B8, REF=0X12605B8) AT ITEM_SUBSELECT.CC:1626#12 0X000000000062FE94 IN ITEM_IN_OPTIMIZER::FIX_FIELDS (THIS=0X1260530, THD=0X11AC3B8, REF=0X122D0A8) AT ITEM_CMPFUNC.CC:1526#13 0X000000000062C5BD IN ITEM_COND::FIX_FIELDS (THIS=0X122CFA0, THD=0X11AC3B8, REF=0X122E840) AT ITEM_CMPFUNC.CC:3911#14 0X0000000000713404 IN SETUP_CONDS (THD=0X11AC3B8, TABLES=0X1213A78, LEAVES=0X122EDE8, CONDS=0X122E840) AT SQL_BASE.CC:7991#15 0X0000000000763212 IN SETUP_WITHOUT_GROUP (THD=0X11AC3B8, REF_POINTER_ARRAY=0X12324D8, TABLES=0X1213A78, LEAVES=0X122EDE8, FIELDS=@0X1212FA8, ALL_FIELDS=@0X122E758, CONDS=0X122E840, ORDER=0X0, GROUP=0X0, HIDDEN_GROUP_FIELDS=0X122E737)    AT SQL_SELECT.CC:412#16 0X000000000075A80F IN JOIN::PREPARE (THIS=0X122D178, RREF_POINTER_ARRAY=0X1213070, TABLES_INIT=0X1213A78, WILD_NUM=0, CONDS_INIT=0X122CFA0, OG_NUM=0, ORDER_INIT=0X0, GROUP_INIT=0X0, HAVING_INIT=0X0, PROC_PARAM_INIT=0X0,    SELECT_LEX_ARG=0X1212EA0, UNIT_ARG=0X1212A78) AT SQL_SELECT.CC:494#17 0X000000000075B791 IN MYSQL_SELECT (THD=0X11AC3B8, RREF_POINTER_ARRAY=0X1213070, TABLES=0X1213A78, WILD_NUM=0, FIELDS=@0X1212FA8, CONDS=0X122CFA0, OG_NUM=0, ORDER=0X0, GROUP=0X0, HAVING=0X0, PROC_PARAM=0X0, SELECT_OPTIONS=2147765760,    RESULT=0X122D158, UNIT=0X1212A78, SELECT_LEX=0X1212EA0) AT SQL_SELECT.CC:2373#18 0X0000000000761091 IN HANDLE_SELECT (THD=0X11AC3B8, LEX=0X12129D8, RESULT=0X122D158, SETUP_TABLES_DONE_OPTION=0) AT SQL_SELECT.CC:268#19 0X00000000006C9AA6 IN EXECUTE_SQLCOM_SELECT (THD=0X11AC3B8, ALL_TABLES=0X1213A78) AT SQL_PARSE.CC:5022#20 0X00000000006CBB24 IN MYSQL_EXECUTE_COMMAND (THD=0X11AC3B8) AT SQL_PARSE.CC:2217#21 0X0000000000899D0F IN SP_INSTR_STMT::EXEC_CORE (THIS=0X1225DD8, THD=0X11AC3B8, NEXTP=0X416571C8) AT SP_HEAD.CC:2905#22 0X0000000000899F51 IN SP_LEX_KEEPER::RESET_LEX_AND_EXEC_CORE (THIS=0X1225E18, THD=0X11AC3B8, NEXTP=0X416571C8, OPEN_TABLES=FALSE, INSTR=0X1225DD8) AT SP_HEAD.CC:2734#23 0X00000000008A0555 IN SP_INSTR_STMT::EXECUTE (THIS=0X1225DD8, THD=0X11AC3B8, NEXTP=0X416571C8) AT SP_HEAD.CC:2848#24 0X000000000089C469 IN SP_HEAD::EXECUTE (THIS=0X1212298, THD=0X11AC3B8) AT SP_HEAD.CC:1252#25 0X000000000089D234 IN SP_HEAD::EXECUTE_PROCEDURE (THIS=0X1212298, THD=0X11AC3B8, ARGS=0X11AE728) AT SP_HEAD.CC:1982#26 0X00000000006D267C IN MYSQL_EXECUTE_COMMAND (THD=0X11AC3B8) AT SQL_PARSE.CC:4363#27 0X00000000006D47B1 IN MYSQL_PARSE (THD=0X11AC3B8, INBUF=0X1214338 CALL P1, LENGTH=7, FOUND_SEMICOLON=0X41658EF0) AT SQL_PARSE.CC:5942#28 0X00000000006D55FC IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0X11AC3B8, PACKET=0X12008F9 CALL P1, PACKET_LENGTH=7) AT SQL_PARSE.CC:1224#29 0X00000000006D69CD IN DO_COMMAND (THD=0X11AC3B8) AT SQL_PARSE.CC:865#30 0X00000000006C2E99 IN HANDLE_ONE_CONNECTION (ARG=0X11AC3B8) AT SQL_CONNECT.CC:1127#31 0X00007FF8B862A040 IN START_THREAD () FROM LIB64LIBPTHREAD.SO.0#32 0X00007FF8B78D808D IN CLONE () FROM LIB64LIBC.SO.6#33 0X0000000000000000 IN ?? ()MY ENVIRONMENT:------------------------------- MYSQL COMPILED FROM SOURCE  .BUILDCOMPILE-PENTIUM64-DEBUG-MAX- LINUX OPENSUSE 11.0 (64 BIT)- INTEL CORE2DUOHOW TO REPEAT:SEE ABOVE ","SUMMARY":"BUGU00A0#47649  CRASH DURING CALL PROCEDURE ","CLASS":0}
{"ID_DEFECT":"47904","DESCRIPTION":"     [7 OCT 2009 22:20]   DANIEL GRACE          DESCRIPTION:IN SOME SITUATIONS, A QUERY THAT QUERIES FROM A DERIVED TABLE (I.E. SELECT ... FROM (SELECT ...)) WILL PRODUCE INCORRECT RESULTS WHEN THE FOLLOWING CONDITIONS ARE PRESENT:- THE TABLE SUBQUERY CONTAINS A DERIVED QUERY ((SELECT ... ) AS COLUMN)- THE DERIVED QUERY CAN POTENTIALLY PRODUCE ZERO ROWS OR A SINGLE NULL (I.E. NO ROWS MATCHED, OR AN AGGREGATE FUNCTION SUCH AS SUM() RUNNING OVER ZERO ROWS))- THE TABLE SUBQUERY JOINS AT LEAST TWO TABLES.- THE JOIN CONDITION INVOLVES AN INDEX.IT IS WORTH NOTING THAT THE TABLE SUBQUERY, RAN BY ITSELF AS A STANDALONE SELECT... , WORKS FINE AND PRODUCES CORRECT DATA.  HOWEVER, CREATE TABLE ... SELECT... AND INSERT ... SELECT BOTH FAIL IN THE EXACT SAME MANNER AS SELECT * FROM (SELECT...)THIS PROBLEM IS NOT PRESENT IN THE LATEST COMMUNITY BUILD OF 5.0.X.HOW TO REPEAT:-- SET UP TEST TABLES.DROP TABLE IF EXISTS FOO;CREATE TABLE FOO (TFOO_ID INT UNSIGNED,TPRIMARY KEY(FOO_ID)) ENGINE=MYISAM;INSERT INTO FOO (FOO_ID) VALUES (1), (2), (3), (4), (5);DROP TABLE IF EXISTS FOO2;CREATE TABLE FOO2 SELECT * FROM FOO;TDROP TABLE IF EXISTS BAR;CREATE TABLE BAR (TBAR_ID INT UNSIGNED AUTO_INCREMENT,TFOO_ID INT UNSIGNED,TAMOUNT DECIMAL(16,2),TPRIMARY KEY(BAR_ID),TKEY(FOO_ID)) ENGINE=MYISAM;INSERT INTO BAR (FOO_ID, BAR_ID, AMOUNT) VALUES (1, 1, 100.00), (2, 2, 200.00), (4, 4, 400.00);-- THIS IS THE INNER QUERY RUNNING BY ITSELF.-- PRODUCES CORRECT RESULTS.SELECTTFOO.FOO_ID,TIFNULL((SELECT SUM(AMOUNT) FROM BAR WHERE BAR.FOO_ID=FOO.FOO_ID), 0) AS TOTAL_AMOUNTFROMTFOOTLEFT JOIN FOO2 ON FOO2.FOO_ID=FOO.FOO_IDGROUP BYTFOO.FOO_ID;-- SELECT * FROM (THE SAME INNER QUERY)-- PRODUCES CORRECT RESULTS.SELECT * FROM (SELECTTFOO.FOO_ID,TIFNULL((SELECT SUM(AMOUNT) FROM BAR WHERE BAR.FOO_ID=FOO.FOO_ID), 0) AS TOTAL_AMOUNTFROMTFOOTLEFT JOIN FOO2 ON FOO2.FOO_ID=FOO.FOO_IDGROUP BYTFOO.FOO_ID) AS T;-- NOW MAKE FOO2.FOO_ID PART OF A KEY.ALTER TABLE FOO2 ADD PRIMARY KEY(FOO_ID);-- SAME INNER QUERY BY ITSELF.-- STILL CORRECT RESULTS.SELECTTFOO.FOO_ID,TIFNULL((SELECT SUM(AMOUNT) FROM BAR WHERE BAR.FOO_ID=FOO.FOO_ID), 0) AS TOTAL_AMOUNTFROMTFOOTLEFT JOIN FOO2 ON FOO2.FOO_ID=FOO.FOO_IDGROUP BYTFOO.FOO_ID;-- SELECT * FROM (THE SAME INNER QUERY), NOW WITH INDEXES ON THE LEFT JOIN-- INCORRECT RESULTS - THE ROWS THAT WOULD BE 0.00 (BECAUSE THE INNER SUBSELECT RETURNS NULL) INSTEAD COPY THE COLUMN VALUE FROM THE PREVIOUS ROW.SELECT * FROM (SELECTTFOO.FOO_ID,TIFNULL((SELECT SUM(AMOUNT) FROM BAR WHERE BAR.FOO_ID=FOO.FOO_ID), 0) AS TOTAL_AMOUNTFROMTFOOTLEFT JOIN FOO2 ON FOO2.FOO_ID=FOO.FOO_IDGROUP BYTFOO.FOO_ID) AS T;-- AND IF YOU SORT THE OUTPUT?SELECT * FROM (SELECTTFOO.FOO_ID,TIFNULL((SELECT SUM(AMOUNT) FROM BAR WHERE BAR.FOO_ID=FOO.FOO_ID), 0) AS TOTAL_AMOUNTFROMTFOOTLEFT JOIN FOO2 ON FOO2.FOO_ID=FOO.FOO_IDGROUP BYTFOO.FOO_IDORDER BYTFOO.FOO_ID DESC) AS T;-- NO AGGREGATE FUNCTION CALL?SELECT * FROM (SELECTTFOO.FOO_ID,TIFNULL((SELECT AMOUNT FROM BAR WHERE BAR.FOO_ID=FOO.FOO_ID), 0) AS TOTAL_AMOUNTFROMTFOOTLEFT JOIN FOO2 ON FOO2.FOO_ID=FOO.FOO_IDGROUP BYTFOO.FOO_IDORDER BYTFOO.FOO_ID DESC) AS T;-- DIFFERENT TYPE OF JOIN?SELECT * FROM (SELECTTFOO.FOO_ID,TIFNULL((SELECT AMOUNT FROM BAR WHERE BAR.FOO_ID=FOO.FOO_ID), 0) AS TOTAL_AMOUNTFROMTFOOTINNER JOIN FOO2 ON FOO2.FOO_ID=FOO.FOO_IDGROUP BYTFOO.FOO_ID) AS T;-- WHAT ABOUT CREATING A TABLE FROM THE RESULTS?DROP TABLE IF EXISTS BAZ;CREATE TABLE BAZ SELECTTFOO.FOO_ID,TIFNULL((SELECT AMOUNT FROM BAR WHERE BAR.FOO_ID=FOO.FOO_ID), 0) AS TOTAL_AMOUNTFROMTFOOTINNER JOIN FOO2 ON FOO2.FOO_ID=FOO.FOO_IDGROUP BYTFOO.FOO_ID;SELECT * FROM BAZ;-- WHAT ABOUT INSERT ... SELECTTRUNCATE BAZ;INSERT INTO BAZ SELECTTFOO.FOO_ID,TIFNULL((SELECT AMOUNT FROM BAR WHERE BAR.FOO_ID=FOO.FOO_ID), 0) AS TOTAL_AMOUNTFROMTFOOTINNER JOIN FOO2 ON FOO2.FOO_ID=FOO.FOO_IDGROUP BYTFOO.FOO_ID;SELECT * FROM BAZ;-- CLEAN UP OUR TEST DATADROP TABLE FOO;DROP TABLE FOO2;DROP TABLE BAR;DROP TABLE BAZ; ","SUMMARY":"BUGU00A0#47904  INCORRECT RESULTS W TABLE SUBQUERY, DERIVED SQS, AND LEFT JOIN ON INDEX ","CLASS":0}
{"ID_DEFECT":"47963","DESCRIPTION":"     [9 OCT 2009 23:07]   TODD FARMER          DESCRIPTION:BEGINNING IN 5.1.39, QUERIES AGAINST INNODB TABLES WITH CERTAIN COMPOSITE KEYS CAN PRODUCE INCORRECT RESULTS:MYSQL> SELECT VERSION();+----------------------+| VERSION()            |+----------------------+| 5.1.39-COMMUNITY-LOG |+----------------------+1 ROW IN SET (0.00 SEC)MYSQL>MYSQL> DROP TABLE IF EXISTS NOT_FOUND;QUERY OK, 0 ROWS AFFECTED (0.00 SEC)MYSQL> CREATE TABLE `NOT_FOUND` (    ->   `COL1` VARCHAR(5) NOT NULL DEFAULT ,    ->   `COL2` VARCHAR(15) NOT NULL DEFAULT ,    ->   `COL3` DATETIME NOT NULL DEFAULT 0000-00-00 00:00:00,    ->   KEY `COL2` (`COL1`, `COL2`, `COL3`)    -> ) ENGINE=INNODB DEFAULT CHARSET=LATIN1;QUERY OK, 0 ROWS AFFECTED (0.01 SEC)MYSQL>MYSQL> INSERT INTO NOT_FOUND (COL1, COL2, COL3) VALUES    -> (TEST, TEST, 2009-10-09 00:00:00);QUERY OK, 1 ROW AFFECTED (0.00 SEC)MYSQL> -- NOT FOUND!MYSQL> SELECT * FROM NOT_FOUND    -> WHERE COL1 = TEST    -> AND COL3 >= 2009-10-09 00:00:00.0    -> AND COL3 <= 2009-10-09 00:00:00.0;EMPTY SET (0.00 SEC)MYSQL>MYSQL> -- EQUIVALENT LOGIC FINDS ROW:MYSQL> SELECT * FROM NOT_FOUND    -> WHERE COL1 = TEST    -> AND COL3 = 2009-10-09 00:00:00.0;+------+------+---------------------+| COL1 | COL2 | COL3                |+------+------+---------------------+| TEST | TEST | 2009-10-09 00:00:00 |+------+------+---------------------+1 ROW IN SET (0.00 SEC)MYSQL>MYSQL> -- DROPPING THE KEY FINDS ITMYSQL> ALTER TABLE NOT_FOUND DROP KEY `COL2`;QUERY OK, 1 ROW AFFECTED (0.02 SEC)RECORDS: 1  DUPLICATES: 0  WARNINGS: 0MYSQL> SELECT * FROM NOT_FOUND    -> WHERE COL1 = TEST    -> AND COL3 >= 2009-10-09 00:00:00.0    -> AND COL3 <= 2009-10-09 00:00:00.0;+------+------+---------------------+| COL1 | COL2 | COL3                |+------+------+---------------------+| TEST | TEST | 2009-10-09 00:00:00 |+------+------+---------------------+1 ROW IN SET (0.00 SEC)MYSQL>MYSQL> -- AN INDEX ON JUST COL1 AND COL2 DOESNT CAUSE THE PROBLEM:MYSQL> ALTER TABLE NOT_FOUND ADD KEY `COL2` (`COL1`,`COL2`);QUERY OK, 1 ROW AFFECTED (0.02 SEC)RECORDS: 1  DUPLICATES: 0  WARNINGS: 0MYSQL> SELECT * FROM NOT_FOUND    -> WHERE COL1 = TEST    -> AND COL3 >= 2009-10-09 00:00:00.0    -> AND COL3 <= 2009-10-09 00:00:00.0;+------+------+---------------------+| COL1 | COL2 | COL3                |+------+------+---------------------+| TEST | TEST | 2009-10-09 00:00:00 |+------+------+---------------------+1 ROW IN SET (0.00 SEC)MYSQL> -- BUT AN INDEX ON ALL THREE DOES:MYSQL> ALTER TABLE NOT_FOUND DROP KEY `COL2`;QUERY OK, 1 ROW AFFECTED (0.01 SEC)RECORDS: 1  DUPLICATES: 0  WARNINGS: 0MYSQL> ALTER TABLE NOT_FOUND ADD KEY `COL2` (`COL1`,`COL2`, `COL3`);QUERY OK, 1 ROW AFFECTED (0.02 SEC)RECORDS: 1  DUPLICATES: 0  WARNINGS: 0MYSQL> SELECT * FROM NOT_FOUND    -> WHERE COL1 = TEST    -> AND COL3 >= 2009-10-09 00:00:00.0    -> AND COL3 <= 2009-10-09 00:00:00.0;EMPTY SET (0.00 SEC)MYSQL>MYSQL> -- SO DOES AN INDEX ON FIRST AND THIRD COLUMNS:MYSQL> ALTER TABLE NOT_FOUND DROP KEY `COL2`;QUERY OK, 1 ROW AFFECTED (0.02 SEC)RECORDS: 1  DUPLICATES: 0  WARNINGS: 0MYSQL> ALTER TABLE NOT_FOUND ADD KEY `COL2` (`COL1`, `COL3`);QUERY OK, 1 ROW AFFECTED (0.01 SEC)RECORDS: 1  DUPLICATES: 0  WARNINGS: 0MYSQL> SELECT * FROM NOT_FOUND    -> WHERE COL1 = TEST    -> AND COL3 >= 2009-10-09 00:00:00.0    -> AND COL3 <= 2009-10-09 00:00:00.0;EMPTY SET (0.00 SEC)MYSQL>MYSQL> EXPLAIN SELECT * FROM NOT_FOUND    -> WHERE COL1 = TEST    -> AND COL3 >= 2009-10-09 00:00:00    -> AND COL3 <= 2009-10-09 00:00:00.0*************************** 1. ROW ***************************           ID: 1  SELECT_TYPE: SIMPLE        TABLE: NOT_FOUND         TYPE: RANGEPOSSIBLE_KEYS: COL2          KEY: COL2      KEY_LEN: 15          REF: NULL         ROWS: 1        EXTRA: USING WHERE1 ROW IN SET (0.03 SEC)MYSQL>MYSQL> -- ELIMINATING THE MILLISECONDS COMPONENT ELIMINATES PROBLEM:MYSQL> SELECT * FROM NOT_FOUND    -> WHERE COL1 = TEST    -> AND COL3 >= 2009-10-09 00:00:00    -> AND COL3 <= 2009-10-09 00:00:00;+------+------+---------------------+| COL1 | COL2 | COL3                |+------+------+---------------------+| TEST | TEST | 2009-10-09 00:00:00 |+------+------+---------------------+1 ROW IN SET (0.03 SEC)MYSQL>MYSQL> -- MYISAM ISNT AFFECTED:MYSQL> ALTER TABLE NOT_FOUND ENGINE = MYISAM;QUERY OK, 1 ROW AFFECTED (0.06 SEC)RECORDS: 1  DUPLICATES: 0  WARNINGS: 0MYSQL> SELECT * FROM NOT_FOUND    -> WHERE COL1 = TEST    -> AND COL3 >= 2009-10-09 00:00:00.0    -> AND COL3 <= 2009-10-09 00:00:00.0;+------+------+---------------------+| COL1 | COL2 | COL3                |+------+------+---------------------+| TEST | TEST | 2009-10-09 00:00:00 |+------+------+---------------------+1 ROW IN SET (0.00 SEC)THIS IS PARTICULARLY PROBLEMATIC BECAUSE CJ (AND PERHAPS OTHER DRIVERS) EXPLICITLY ADD THE MILLISECOND COMPONENT WHEN CONVERTING JAVA.SQL.TIMESTAMP OBJECTS TO STRINGS.HOW TO REPEAT:DROP TABLE IF EXISTS NOT_FOUND;CREATE TABLE `NOT_FOUND` (  `COL1` VARCHAR(5) NOT NULL DEFAULT ,  `COL2` VARCHAR(15) NOT NULL DEFAULT ,  `COL3` DATETIME NOT NULL DEFAULT 0000-00-00 00:00:00,  KEY `COL2` (`COL1`, `COL2`, `COL3`)) ENGINE=INNODB DEFAULT CHARSET=LATIN1;INSERT INTO NOT_FOUND (COL1, COL2, COL3) VALUES (TEST, TEST, 2009-10-09 00:00:00);-- NOT FOUND!SELECT * FROM NOT_FOUND WHERE COL1 = TESTAND COL3 >= 2009-10-09 00:00:00.0 AND COL3 <= 2009-10-09 00:00:00.0;SUGGESTED FIX:PRODUCE CORRECT RESULTS. ","SUMMARY":"BUGU00A0#47963  WRONG RESULTS WHEN INDEX IS USED ","CLASS":0}
{"ID_DEFECT":"48052","DESCRIPTION":"     [14 OCT 2009 18:58]   PATRICK CREWS          DESCRIPTION:VALGRIND WARNING DETECTED DURING AN RQG RUN OF SUBQUERY_MATERIALIZATION.YYUSED THE 6.0-CODEBASE-BUGFIXING TREEQUERY PRECEDING THE VALGRIND WARNING:SELECT  STD( OUTR . `DATETIME_KEY` ) AS X FROM B AS OUTR2 LEFT JOIN C AS OUTR ON ( OUTR2 . `TIME_NOKEY` <= OUTR . `DATETIME_NOKEY` ) WHERE OUTR . `PK` IN ( SELECT  INNR . `INT_KEY` AS Y FROM CC AS INNR2 LEFT JOIN BB AS INNR ON ( INNR2 . `VARCHAR_KEY` <> INNR . `VARCHAR_NOKEY` ) WHERE INNR . `PK` IS NOT NULL  ) AND OUTR . `DATETIME_NOKEY` >= 2003-09-24 AND OUTR . `INT_KEY` IS NULL HAVING X < 14:47:17 ORDER BY OUTR . `DATE_KEY` , OUTR . `PK`WED OCT 14 13:55:21 2009 [9416] QUERY: SELECT DISTINCT OUTR . `DATETIME_KEY` AS X FROM B AS OUTR WHERE ( OUTR . `VARCHAR_NOKEY` , OUTR . `VARCHAR_NOKEY` ) IN ( SELECT  INNR . `VARCHAR_KEY` AS X , INNR . `VARCHAR_KEY` AS Y FROM CC AS INNR WHERE INNR . `VARCHAR_NOKEY` <> P XOR OUTR . `DATE_NOKEY` > 2004-06-22 ORDER BY INNR . `VARCHAR_KEY` ) OR OUTR . `TIME_KEY` IS NULL XOR OUTR . `DATETIME_NOKEY` BETWEEN 2009-10-25 AND 2000-09-26 HAVING X >= 10:38:14 ORDER BY OUTR . `INT_KEY` , OUTR . `PKWARNING BODY:5733:==9372== THREAD 26:5734:==9372== CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S)5735:==9372==    AT 0X84501AF: INIT_READ_RECORD(READ_RECORD*, THD*, TABLE*, SQL_SELECT*, INT, BOOL, BOOL) (RECORDS.CC:274)5736:==9372==    BY 0X8385BE8: JOIN_INIT_READ_RECORD(ST_JOIN_TABLE*) (SQL_SELECT.CC:17075)5737:==9372==    BY 0X8389ED6: SUB_SELECT(JOIN*, ST_JOIN_TABLE*, BOOL) (SQL_SELECT.CC:16265)5738:==9372==    BY 0X839760B: DO_SELECT(JOIN*, LIST<ITEM>*, TABLE*, PROCEDURE*) (SQL_SELECT.CC:15828)5739:==9372==    BY 0X83AFE76: JOIN::EXEC() (SQL_SELECT.CC:2896)5740:==9372==    BY 0X83AA4BC: MYSQL_SELECT(THD*, ITEM***, TABLE_LIST*, UNSIGNED INT, LIST<ITEM>&, ITEM*, UNSIGNED INT, ST_ORDER*, ST_ORDER*, ITEM*, ST_ORDER*, UNSIGNED LONG LONG, SELECT_RESULT*, ST_SELECT_LEX_UNIT*, ST_SELECT_LEX*) (SQL_SELECT.CC:3087)5741:==9372==    BY 0X83B01A7: HANDLE_SELECT(THD*, LEX*, SELECT_RESULT*, UNSIGNED LONG) (SQL_SELECT.CC:307)5742:==9372==    BY 0X830A792: EXECUTE_SQLCOM_SELECT(THD*, TABLE_LIST*) (SQL_PARSE.CC:4976)5743:==9372==    BY 0X830C8F6: MYSQL_EXECUTE_COMMAND(THD*) (SQL_PARSE.CC:2121)5744:==9372==    BY 0X8315CD6: MYSQL_PARSE(THD*, CHAR CONST*, UNSIGNED INT, CHAR CONST**) (SQL_PARSE.CC:5991)5745:==9372==    BY 0X8316854: DISPATCH_COMMAND(ENUM_SERVER_COMMAND, THD*, CHAR*, UNSIGNED INT) (SQL_PARSE.CC:1074)5746:==9372==    BY 0X8317D6D: DO_COMMAND(THD*) (SQL_PARSE.CC:756)5747:==9372==    BY 0X8303C39: HANDLE_ONE_CONNECTION (SQL_CONNECT.CC:1164)5748:==9372==    BY 0X40494FE: START_THREAD (IN LIBTLSI686CMOVLIBPTHREAD-2.9.SO)5749:==9372==    BY 0X42B449D: CLONE (IN LIBTLSI686CMOVLIBC-2.9.SO)HOW TO REPEAT:PERL .RUNALL.PL --THREADS=1 --BASEDIR=<PATH>MYSQL-6.0-CODEBASE-BUGFIXING --VALIDATOR=MARKERRORLOG --VALGRIND --VIEWS  --QUERIES=100000 --MYSQLD=--INIT-FILE=HOMEPCREWSBZRWORKOPTIMIZER_RETEST6.SQL --GRAMMAR=CONFSUBQUERY_MATERIALIZATION.YY --REPORTER=SHUTDOWNINIT-FILE CONTENTS:SET GLOBAL OPTIMIZER_SWITCH = MATERIALIZATION=OFF,SEMIJOIN=OFF,LOOSESCAN=OFF,FIRSTMATCH=OFF;SET GLOBAL OPTIMIZER_USE_MRR = DISABLE;SET GLOBAL DEBUG = +D,OPTIMIZER_NO_ICP;SET GLOBAL ENGINE_CONDITION_PUSHDOWN = 1;SET GLOBAL JOIN_CACHE_LEVEL = 1; ","SUMMARY":"BUGU00A0#48052  VALGRIND WARNING - UNINITIALIZED VALUE IN INIT_READ_RECORD() - (RECORDS.CC:274) ","CLASS":0}
{"ID_DEFECT":"48459","DESCRIPTION":"     [2 NOV 2009 9:36]   SHANE BESTER          DESCRIPTION:A SAMPLE OF THE 5.1.40 VALGRIND OUTPUT (CUT TO FIT!)CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S)AT: KEY_AND (OPT_RANGE.CC:6387)BY: AND_ALL_KEYS (OPT_RANGE.CC:6343)BY: TREE_AND (OPT_RANGE.CC:6097)BY: GET_MM_TREE (OPT_RANGE.CC:5452)BY: SQL_SELECT::TEST_QUICK_SELECT (OPT_RANGE.CC:2331)BY: JOIN::OPTIMIZE() (SQL_SELECT.CC:6268)BY: MYSQL_SELECT (SQL_SELECT.CC:2380)BY: HANDLE_SELECT (SQL_SELECT.CC:268)BY: EXECUTE_SQLCOM_SELECT (SQL_PARSE.CC:5043)BY: MYSQL_EXECUTE_COMMAND(THD*) (SQL_PARSE.CC:2238)BY: MYSQL_PARSE(THD*, CHAR CONST*, UNSIGNED, CHAR CONST**) (SQL_PARSE.CC:5963)BY: DISPATCH_COMMAND(ENUM_SERVER_COMMAND, THD*, CHAR*, UNSIGNED) (SQL_PARSE.CC:1224)HOW TO REPEAT:RUN MYSQLD UNDER VALGRIND.IMPORT THE ATTACHED SQL. ","SUMMARY":"BUGU00A0#48459  VALGRIND ERRORS WITH QUERY USING RANGE CHECKED FOR EACH RECORD ","CLASS":0}
{"ID_DEFECT":"49324","DESCRIPTION":"     [2 DEC 2009 4:21]   SHANE BESTER          DESCRIPTION:AT FIRST, LOOKS LIKE BUG #44886 BUT THAT TESTCASE DOESNT CAUSE ANY PROBLEMS ANYMORE IN 5.1.41VALGRIND ERRORS IN 5.1.41:CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S)AT: TEST_IF_SKIP_SORT_ORDER  (SQL_SELECT.CC:13319)BY: JOIN::OPTIMIZE() (SQL_SELECT.CC:1400)BY: MYSQL_SELECT (SQL_SELECT.CC:2421)BY: HANDLE_SELECT (SQL_SELECT.CC:269)BY: EXECUTE_SQLCOM_SELECT (SQL_PARSE.CC:5051)BY: MYSQL_EXECUTE_COMMAND(THD*) (SQL_PARSE.CC:2246)BY: MYSQL_PARSE (SQL_PARSE.CC:5970)BY: DISPATCH_COMMAND (SQL_PARSE.CC:1231)BY: DO_COMMAND(THD*) (SQL_PARSE.CC:872)BY: HANDLE_ONE_CONNECTION (SQL_CONNECT.CC:1127)BY: START_THREAD (IN LIBLIBPTHREAD-2.5.SO)BY: CLONE (IN LIBLIBC-2.5.SO)HOW TO REPEAT:RUN MYSQLD UNDER VALGRIND, THEN RUN:DROP TABLE IF EXISTS `T1`;CREATE TABLE `T1` (`A` INT PRIMARY KEY) ENGINE=INNODB ;SELECT 1 FROM `T1` JOIN `T1` `A` USING(`A`) GROUP BY `T1`.`A`,`T1`.`A`;SUGGESTED FIX:VALGRIND ERRORS ARE BAD... ","SUMMARY":"BUGU00A0#49324  MORE VALGRIND ERRORS IN TEST_IF_SKIP_SORT_ORDER ","CLASS":0}
{"ID_DEFECT":"50402","DESCRIPTION":"     [18 JAN 2010 2:41]   LEANDRO MORGADO          DESCRIPTION:WHEN INNODB AND INDEX MERGE IS USED IN THE SAMPLE QUERIES BELOW, THE RESULTS ARE WRONGLY CALCULATED. CHANGING THE STORAGE ENGINE TO MYISAM FOR EXAMPLE, WILL PRODUCE THE CORRECT RESULTS. REPORTED ON 5.1.31SP1 AND VERIFIED ON : 5.1.41-ENTERPRISE-GPL-ADVANCED-LOG.PERHAPS A REGRESSION FROM BUG #25798HOW TO REPEAT:1) USE THE ATTACHED MYSQLDUMP TO POPULATE THE SCHEMA. BOTH INCLUDED TABLES ARE CREATED AS INNODB.2) THE FAULTY QUERY IS:================================================================MYSQL> SELECT THIS_.IDFROM JOB_ORDER THIS_WHERECASEWHEN (SELECT COUNT(*) FROM JOB_ORDER JOINNER JOIN REFERRAL REF ON JO.ID = REF.JOB_ORDER_IDWHERE REF.REF_RESULT = H AND JO.ID = THIS_.ID)>= THIS_.NBR_JOB_OPENINGSTHEN PWHEN CURDATE() >= THIS_.DATE_ORDER_OPEN AND CURDATE() < THIS_.DATE_ORDER_CLOSETHEN OEND=O AND THIS_.ID = 6786;================================================================THE FAILURE WITH THE INDEX MERGE IS WHEN THAT SUBQUERY IS USED, EVEN THOUGH IT IS NOT RELEVANT TO THE ANSWER. THAT IS, RUNNING THE SUBQUERY SEPARATELY SHOWS THAT IT RETURNS FALSE, SO IT IS NOT A CASE OF MATCHING P OR O IN DIFFERENT CASES.THIS CAN BE SHOWN FROM THE EXTENDED EXPLAIN OF THE QUERY:================================================================MYSQL> EXPLAIN EXTENDED SELECT THIS_.ID FROM JOB_ORDER THIS_ WHERE CASE WHEN (SELECT COUNT(*) FROM JOB_ORDER JO INNER JOIN REFERRAL REF ON JO.ID = REF.JOB_ORDER_ID WHERE REF.REF_RESULT = H AND JO.ID = THIS_.ID) >= THIS_.NBR_JOB_OPENINGS THEN P WHEN CURDATE() >= THIS_.DATE_ORDER_OPEN AND CURDATE() < THIS_.DATE_ORDER_CLOSE THEN O END =O AND THIS_.ID = 6786*************************** 1. ROW ***************************           ID: 1  SELECT_TYPE: PRIMARY        TABLE: THIS_         TYPE: CONSTPOSSIBLE_KEYS: PRIMARY          KEY: PRIMARY      KEY_LEN: 8          REF: CONST         ROWS: 1     FILTERED: 100.00        EXTRA: *************************** 2. ROW ***************************           ID: 2  SELECT_TYPE: DEPENDENT SUBQUERY        TABLE: JO         TYPE: CONSTPOSSIBLE_KEYS: PRIMARY          KEY: PRIMARY      KEY_LEN: 8          REF:          ROWS: 1     FILTERED: 100.00        EXTRA: USING INDEX*************************** 3. ROW ***************************           ID: 2  SELECT_TYPE: DEPENDENT SUBQUERY        TABLE: REF         TYPE: INDEX_MERGEPOSSIBLE_KEYS: JOB_ORDER_ID,REFERRAL_REF_RESULT          KEY: JOB_ORDER_ID,REFERRAL_REF_RESULT      KEY_LEN: 9,2          REF: NULL         ROWS: 1     FILTERED: 100.00        EXTRA: USING INTERSECT(JOB_ORDER_ID,REFERRAL_REF_RESULT); USING WHERE; USING INDEX3 ROWS IN SET, 2 WARNINGS (0.00 SEC)MYSQL> SHOW WARNINGS*************************** 1. ROW ***************************  LEVEL: NOTE   CODE: 1276MESSAGE: FIELD OR REFERENCE TEST.THIS_.ID OF SELECT #2 WAS RESOLVED IN SELECT #1*************************** 2. ROW ***************************  LEVEL: NOTE   CODE: 1003MESSAGE: SELECT 6786 AS `ID` FROM `TEST`.`JOB_ORDER` `THIS_` WHERE (((CASE WHEN ((SELECT COUNT(0) AS `COUNT(*)` FROM `TEST`.`JOB_ORDER` `JO` JOIN `TEST`.`REFERRAL` `REF` WHERE ((`TEST`.`REF`.`JOB_ORDER_ID` = 6786) AND (`TEST`.`REF`.`REF_RESULT` = H))) >= 5) THEN P WHEN ((CURDATE() >= 2009-10-21) AND (CURDATE() < 2010-10-21)) THEN O END) = O))2 ROWS IN SET (0.00 SEC)================================================================IF WE PLACE THIS INTO A NEW TABLE WITHOUT FILTERING BY THIS_.ID = 6786, WE SEE THIS IS ACTUALLY THERE:================================================================MYSQL> CREATE TABLE TEMP AS SELECT THIS_.ID FROM JOB_ORDER THIS_ WHERE CASE WHEN (SELECT COUNT(*) FROM JOB_ORDER JO INNER JOIN REFERRAL REF ON JO.ID = REF.JOB_ORDER_ID WHERE REF.REF_RESULT = H AND JO.ID = THIS_.ID) >= THIS_.NBR_JOB_OPENINGS THEN P WHEN CURDATE() >= THIS_.DATE_ORDER_OPEN AND CURDATE() < THIS_.DATE_ORDER_CLOSE THEN O END =O;QUERY OK, 157 ROWS AFFECTED (0.75 SEC)RECORDS: 157  DUPLICATES: 0  WARNINGS: 0MYSQL> SELECT * FROM TEMP WHERE ID=6786;+------+| ID   |+------+| 6786 |+------+1 ROW IN SET (0.01 SEC)================================================================IF WE CHANGE THE TABLES TO MYISAM, WE GET CORRECT RESULTS:================================================================MYSQL> ALTER TABLE JOB_ORDER ENGINE=MYISAM;QUERY OK, 7599 ROWS AFFECTED (0.18 SEC)RECORDS: 7599  DUPLICATES: 0  WARNINGS: 0MYSQL> ALTER TABLE REFERRAL ENGINE=MYISAM;QUERY OK, 181215 ROWS AFFECTED (1.39 SEC)RECORDS: 181215  DUPLICATES: 0  WARNINGS: 0MYSQL> SELECT THIS_.ID FROM JOB_ORDER THIS_ WHERE CASE WHEN (SELECT COUNT(*) FROM JOB_ORDER JO INNER JOIN REFERRAL REF ON JO.ID = REF.JOB_ORDER_ID WHERE REF.REF_RESULT = H AND JO.ID = THIS_.ID) >= THIS_.NBR_JOB_OPENINGS THEN P WHEN CURDATE() >= THIS_.DATE_ORDER_OPEN AND CURDATE() < THIS_.DATE_ORDER_CLOSE THEN O END =O AND THIS_.ID = 6786;+------+| ID   |+------+| 6786 |+------+1 ROW IN SET (0.00 SEC)MYSQL> EXPLAIN EXTENDED SELECT THIS_.ID FROM JOB_ORDER THIS_ WHERE CASE WHEN (SELECT COUNT(*) FROM JOB_ORDER JO INNER JOIN REFERRAL REF ON JO.ID = REF.JOB_ORDER_ID WHERE REF.REF_RESULT = H AND JO.ID = THIS_.ID) >= THIS_.NBR_JOB_OPENINGS THEN P WHEN CURDATE() >= THIS_.DATE_ORDER_OPEN AND CURDATE() < THIS_.DATE_ORDER_CLOSE THEN O END =O AND THIS_.ID = 6786*************************** 1. ROW ***************************           ID: 1  SELECT_TYPE: PRIMARY        TABLE: THIS_         TYPE: CONSTPOSSIBLE_KEYS: PRIMARY          KEY: PRIMARY      KEY_LEN: 8          REF: CONST         ROWS: 1     FILTERED: 100.00        EXTRA: *************************** 2. ROW ***************************           ID: 2  SELECT_TYPE: DEPENDENT SUBQUERY        TABLE: JO         TYPE: CONSTPOSSIBLE_KEYS: PRIMARY          KEY: PRIMARY      KEY_LEN: 8          REF:          ROWS: 1     FILTERED: 100.00        EXTRA: USING INDEX*************************** 3. ROW ***************************           ID: 2  SELECT_TYPE: DEPENDENT SUBQUERY        TABLE: REF         TYPE: REFPOSSIBLE_KEYS: JOB_ORDER_ID,REFERRAL_REF_RESULT          KEY: JOB_ORDER_ID      KEY_LEN: 9          REF:          ROWS: 34     FILTERED: 100.00        EXTRA: USING WHERE3 ROWS IN SET, 2 WARNINGS (0.00 SEC)MYSQL> SHOW WARNINGS*************************** 1. ROW ***************************  LEVEL: NOTE   CODE: 1276MESSAGE: FIELD OR REFERENCE TEST.THIS_.ID OF SELECT #2 WAS RESOLVED IN SELECT #1*************************** 2. ROW ***************************  LEVEL: NOTE   CODE: 1003MESSAGE: SELECT 6786 AS `ID` FROM `TEST`.`JOB_ORDER` `THIS_` WHERE (((CASE WHEN ((SELECT COUNT(0) AS `COUNT(*)` FROM `TEST`.`JOB_ORDER` `JO` JOIN `TEST`.`REFERRAL` `REF` WHERE ((`TEST`.`REF`.`JOB_ORDER_ID` = 6786) AND (`TEST`.`REF`.`REF_RESULT` = H))) >= 5) THEN P WHEN ((CURDATE() >= 2009-10-21) AND (CURDATE() < 2010-10-21)) THEN O END) = O))2 ROWS IN SET (0.00 SEC)================================================================SUGGESTED FIX:CALCULATE CORRECT VALUES. ","SUMMARY":"BUGU00A0#50402  OPTIMIZER PRODUCING WRONG RESULTS WHEN USING INDEX MERGE ON INNODB  ","CLASS":0}
{"ID_DEFECT":"51431","DESCRIPTION":"     [23 FEB 2010 17:49]   JOHANNES HAMMOUD          DESCRIPTION:I DETECT THAT DESCEND SORTING DOES NOT WORK IN SOME SPECIAL CASES.THIS HAPPENS AFTER IMPORT A DUMP AND EXECUTE AN SELECT WITH 2 WHERE + ORDER DESC + LIMIT.COULD NOT FIND AN SOLUTION OR REASON FOR THIS SPECIAL BEHAVIOUR, SO I OPENED THIS BUG AND TELL WHAT I HAVE TRIED TILL NOW:TESTCASE1SELECT WITH ONLY ONE WHERE CLAUSE WORKS CORRECTSELECT * FROM TESTWHERE F_ID = 1ORDER BY T_ID DESCLIMIT 5;EXPECTED: DESCRESULT: DESCTESTCASE2:SELECT WITH TWO WHERE CLAUSE FAILS: SORT ORDER IS ASC INSTEAD DESCSELECT * FROM TESTWHERE F_ID = 1 AND T_STATUS = TRUEORDER BY T_ID DESCLIMIT 5;EXPECTED: DESCRESULT: ASCTESTCASE3:SAME AS TESTCASE2 BUT WITHOUT LIMIT WORKS CORRECT AGAINSELECT * FROM TESTWHERE F_ID = 1 AND T_STATUS = TRUEORDER BY T_ID DESC;EXPECTED: DESCRESULT: DESCAS I DID NOT FOUND ANY BUGS TO THE SQL STATEMENT AS REASON FOR THE WRONG SORT ORDER OF TESTCASE2, I THOUGHT THIS PROBLEM COULD DEPEND TO THE IMPORT, SO I TRIED THIS ADDITIONAL THINGS:TESTCASE4:JUST TRIED TO REDUCE THE ROWS INSIDE THE DUMP FILE.SO DELETE JUST THE LAST ROW WITH PRIMARY T_ID=27 AND IMPORT THE LESSER ROWS NEWLY=> THE SELECT OF TESTCASE2 WORKS NOW CORRECTTESTCASE5:IMPORT ALL ROWS OF THE DUMPFILE AGAIN (INCLUDED THE T_ID=27 ROW) - BUT CHANGE KEY IN DUMP FILE FROM:UNIQUE KEY `T_U01` (`F_ID`,`T_NUMBER`),TO:KEY `T_U01` (`F_ID`),=> THE SELECT OF TESTCASE2 WORKS ALSO CORRECTTESTCASE6:COPY THE CREATE TABLE STATEMENT FROM IMPORT FILE AND EXECUTE IT FROM A SQL CLIENTCOPY THE INSERT STATEMENTS FROM IMPORT FILE AND EXECUTE IT FROM A SQL CLIENT=> THE SELECT OF TESTCASE2 WORKS NOW CORRECTSO I THINK THE IMPORT DOES BUILD THE INDEX WRONG OR SOMETHING ELSE.AT LEAST I TRIED THIS ON SERVERAL VERSIONS:COULD REPEAT THE BUG WITH:DEBIAN 5 + MYSQL 5.1.39WINDOWS VISTA + MYSQL 5.1.39WINDOWS VISTA + MYSQL 5.1.44TESTCASE WORKS CORRECT IN:WINDOWS VISTA + MYSQL 5.0.15HOW TO REPEAT:1. IMPORT THE THE ATTACHED DUMP FILE USED COMMAND: MYSQL -H LOCALHOST -P 3306 -U ROOT -PMYSQL TESTDB_LOCAL < TEST.DUMP2. EXECUTE THE TESTCASE2 WITH TWO WHERE + ORDER DESC + LIMITSELECT * FROM TESTWHERE F_ID = 1 AND T_STATUS = TRUEORDER BY T_ID DESCLIMIT 5;3. THE RESULT IS IN ASCENDING ORDER INSTEAD OF DESCENDING ","SUMMARY":"BUGU00A0#51431  WRONG SORT ORDER AFTER IMPORT OF DUMP FILE ","CLASS":0}
{"ID_DEFECT":"52005","DESCRIPTION":"     [12 MAR 2010 15:47]   OLE JOHN ASKE          DESCRIPTION:MAKE_JOIN_STATISTICS() CALCULATE THE TRANSITIVE CLOSURE FOR RELATIONS A PARTICULAR JOIN_TAB IS DEPENDENT ON.WE AGGREGATE THE DEPENDENT TABLE_MAP OF OF A JOIN_TAB BY ADDING DEPENDENCIES FROM OTHER TABLES WHICH WE DEPEND ON. HOWEVER, THIS MAY ALSO CAUSE NEW PEDENDENCIES TO BE AVAILABLE AFTER WE HAVE COMPLETED PROCESSING A CERTAIN JOIN_TAB. WITH THE CURRENT ALGORITHM THESE DEPENDENCIES WILL BE UNNOTICED.WHAT WE NEED AS AN ALGORITHM WHERE WE REITERATE UNTIL THERE ARE NO MORE CHANGES IN THE TOTAL SET OF DEPENDENCIES.I HAVE INCLUDED A SUGGESTED FIX.HOW TO REPEAT:RUN RANDOM QUERY GENERATOR WITH THE OUTER_JOIN GRAMMAR WITH ONLY THE #IFNDEF DBUG_OFF PART OF MY FIX - IT WILL HIT THE DBUG_ASSERT AFTER A SHORT WHILE AND EXPOSE THE INCOMPLETE DEPENCENCY MAP.SUGGESTED FIX:=== MODIFIED FILE SQLSQL_SELECT.CC--- SQLSQL_SELECT.CC   2010-03-10 09:36:44 +0000+++ SQLSQL_SELECT.CC   2010-03-12 15:19:01 +0000@@ -1488,6 +1488,24 @@ JOIN::OPTIMIZE()     DBUG_PRINT(INFO, (NEED_TMP= %D, AT:%D, NEED_TMP, __LINE__));   @@ -2751,23 +2769,64 @@ MAKE_JOIN_STATISTICS(JOIN *JOIN, TABLE_L        THIS WILL SPEED UP THE PLAN SEARCH FOR MANY CASES WITH OUTER JOINS,        AS WELL AS ALLOW US TO CATCH ILLEGAL CROSS REFERENCES        WARSHALLS ALGORITHM IS USED TO BUILD THE TRANSITIVE CLOSURE.-       AS WE USE BITMAPS TO REPRESENT THE RELATION THE COMPLEXITY-       OF THE ALGORITHM IS O((NUMBER OF TABLES)^2).+       AS WE MAY RESTART THE OUTER LOOP UPTO TABLE_COUNT TIMES, THE+       COMPLEXITY OF THE ALGORITHM IS O((NUMBER OF TABLES)^3).+       HOWEVER, MOST IF THE ITERATIONS WILL BE SHORTCIRCUTED WHEN+       THERE ARE NO PEDENDENCIES TO PROPOGATE.     *+    FOR (I= 0 ; I < TABLE_COUNT ; I++)+    +      UINT J;+      TABLE= STAT[I].TABLE;++      IF (!TABLE->REGINFO.JOIN_TAB->DEPENDENT)+        CONTINUE;++      * ADD MY DEPENDENCIES TO OTHER TABLES DEPENDING ON ME *+      FOR (J= 0, S= STAT ; J < TABLE_COUNT ; J++, S++)+      +        IF (S->DEPENDENT & TABLE->MAP)+        +          TABLE_MAP WAS_DEPENDENT= S->DEPENDENT;+          S->DEPENDENT |= TABLE->REGINFO.JOIN_TAB->DEPENDENT;++          **+           * IF WE CHANGE DEPENDENCIES FOR A TABLE WE ALREADY HAVE+           * PROCESSED: REDO DEPENDENCY PROPAGATION FROM THIS TABLE.+           *+          IF (I > J && S->DEPENDENT != WAS_DEPENDENT)+          +            I = J-1;+            BREAK;+          +        +      +    ++#IFNDEF DBUG_OFF+    * VERIFY THAT ALL DEPENDENCIES HAS BEEN PROPAGATED.+     * MOSTLY A CODESTUB TO VERIFY THAT THE ABOVE FIX IS REQUIRED WHEN RUNNING+     * RQG WITH OUTER_JOIN GRAMMER - WHICH ELSE WILL ASSERT BELOW AFTER A+     * FEW 1.000 QUERIES.+     *     FOR (I= 0, S= STAT ; I < TABLE_COUNT ; I++, S++)            FOR (UINT J= 0 ; J < TABLE_COUNT ; J++)                TABLE= STAT[J].TABLE;         IF (S->DEPENDENT & TABLE->MAP)-          S->DEPENDENT |= TABLE->REGINFO.JOIN_TAB->DEPENDENT;+          * THERE SHOULD BE NO MORE PENDING DEPENDENCIES *+          DBUG_ASSERT(!(TABLE->REGINFO.JOIN_TAB->DEPENDENT & ~(S->DEPENDENT)));       -      IF (OUTER_JOIN & S->TABLE->MAP)-        S->TABLE->MAYBE_NULL= 1;     +#ENDIF+     * CATCH ILLEGAL CROSS REFERENCES FOR OUTER JOINS *     FOR (I= 0, S= STAT ; I < TABLE_COUNT ; I++, S++)     +      IF (OUTER_JOIN & S->TABLE->MAP)+        S->TABLE->MAYBE_NULL= 1;+       IF (S->DEPENDENT & S->TABLE->MAP)                JOIN->TABLES=0;                         DONT USE JOIN->TABLE ","SUMMARY":"BUGU00A0#52005  JOIN_TAB->DEPENDENT MAY BE INCORRECTLY PROPAGETED FOR MULTILEVEL OUTER JOINS ","CLASS":0}
{"ID_DEFECT":"53544","DESCRIPTION":"     [10 MAY 2010 16:50]   JOHN EMBRETSEN          DESCRIPTION:A FEW MINUTES INTO RUNNING THE RANDOM QUERY GENERATORS OUTER_JOIN.YY GRAMMAR AGAINST MYSQL-6.0-CODEBASE-BUGFIXING BRANCH AS OF 2010-05-05, THE SERVER HANGS WITH 99% CPU USAGE, WHILE THE RQG TEST OUTPUT AND SERVER QUERY LOG IS AT STANDSTILL.LAST TWO STATEMENTS IN THE QUERY LOG ARE:CALL STORED_PROC_32748 * TRANSFORM_OUTCOME_UNORDERED_MATCH *CALL STORED_PROC_32748 * TRANSFORM_OUTCOME_UNORDERED_MATCH *WHICH COMES FROM THE RQGS ATTEMPT TO VALIDATE QUERY RESULTS BY EXECUTING THE SAME QUERY IN A STORED PRCEDURE (I.E. THE TRANSFORMER VALIDATOR) TWICE. THE STORED PROCEDURE IN THIS EXAMPLE IS DEFINED LIKE THIS:CREATE PROCEDURE STORED_PROC_32748 () LANGUAGE SQL     SELECT STRAIGHT_JOIN  TABLE2 . `COL_INT_KEY` AS FIELD1   FROM E AS TABLE1   RIGHT JOIN C AS TABLE2 ON TABLE1 . `PK` =  TABLE2 . `PK`     RIGHT  JOIN A AS TABLE3 ON TABLE2 . `COL_INT_KEY` =  TABLE3 . `COL_INT_KEY`  WHERE TABLE3 . `COL_INT_KEY` != 8    GROUP BY FIELD1   HAVING (((FIELD1 <> 4 AND FIELD1 <> 8) OR FIELD1 != 9) AND FIELD1 >= 6)   ORDER BY FIELD1THE QUERY IS DIFFERENT FROM RUN TO RUN, BUT THE M.O. OF THE STORED PROCEDURE SEEMS TO BE THE SAME.STACKTRACE FROM THE THREAD THAT SEEMS MOST INTERESTING FROM DOING KILL -11 ON THE HANGED SERVER:THREAD 5 (PROCESS 32751):#0  0X0000000000AD8C46 IN MY_STRCASECMP_UTF8MB3 (CS=0X12566E0, S=0X2934FFA COL_INT_KEY, T=0X2AEB4A0 FIELD1)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSTRINGSCTYPE-UTF8.C:2646#1  0X00000000005C390C IN FIND_FIELD_IN_TABLE (THD=0X28FC0C8, TABLE=0X2935E38, NAME=0X2AEB4A0 FIELD1, LENGTH=6, ALLOW_ROWID=FALSE,     CACHED_FIELD_INDEX_PTR=0X2AEB56C) AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_BASE.CC:6038#2  0X00000000005C432D IN FIND_FIELD_IN_TABLE_REF (THD=0X28FC0C8, TABLE_LIST=0X292D430, NAME=0X2AEB4A0 FIELD1, LENGTH=6,     ITEM_NAME=0X2AEB4A0 FIELD1, DB_NAME=0X0, TABLE_NAME=0X0, REF=0X7FFAB1DFC288, CHECK_PRIVILEGES=TRUE, ALLOW_ROWID=FALSE,     CACHED_FIELD_INDEX_PTR=0X2AEB56C, REGISTER_TREE_CHANGE=FALSE, ACTUAL_TABLE=0X7FFAB1DFBEB8)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_BASE.CC:6168#3  0X00000000005C4B28 IN FIND_FIELD_IN_TABLES (THD=0X28FC0C8, ITEM=0X2AEB4C0, FIRST_TABLE=0X292CE80, LAST_TABLE=0X0, REF=0X7FFAB1DFC288,     REPORT_ERROR=IGNORE_ERRORS, CHECK_PRIVILEGES=TRUE, REGISTER_TREE_CHANGE=FALSE)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_BASE.CC:6432#4  0X0000000000648EC4 IN FIND_ORDER_IN_LIST (THD=0X28FC0C8, REF_POINTER_ARRAY=0X2936DC0, TABLES=0X292CE80, ORDER=0X2AEB5A8, FIELDS=@0X2AF4A70,     ALL_FIELDS=@0X2B6B7D8, IS_GROUP_FIELD=TRUE) AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_SELECT.CC:20290#5  0X000000000064922D IN SETUP_GROUP (THD=0X28FC0C8, REF_POINTER_ARRAY=0X2936DC0, TABLES=0X292CE80, FIELDS=@0X2AF4A70, ALL_FIELDS=@0X2B6B7D8,     ORDER=0X2AEB5A8, HIDDEN_GROUP_FIELDS=0X2B6B7B7)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_SELECT.CC:20442#6  0X000000000067B1CC IN SETUP_WITHOUT_GROUP (THD=0X28FC0C8, REF_POINTER_ARRAY=0X2936DC0, TABLES=0X292CE80, LEAVES=0X292CE80, FIELDS=@0X2AF4A70,     ALL_FIELDS=@0X2B6B7D8, CONDS=0X2B6B8C0, ORDER=0X2AEC5F0, GROUP=0X2AEB5A8, HIDDEN_GROUP_FIELDS=0X2B6B7B7)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_SELECT.CC:498#7  0X000000000066EEA2 IN JOIN::PREPARE (THIS=0X2B65C20, RREF_POINTER_ARRAY=0X2AF4B50, TABLES_INIT=0X292CE80, WILD_NUM=0, CONDS_INIT=0X2AEB328,     OG_NUM=2, ORDER_INIT=0X2AEC5F0, GROUP_INIT=0X2AEB5A8, HAVING_INIT=0X2A68340, PROC_PARAM_INIT=0X0, SELECT_LEX_ARG=0X2AF4968, UNIT_ARG=0X2AF42C8)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_SELECT.CC:568#8  0X00000000006705A1 IN MYSQL_SELECT (THD=0X28FC0C8, RREF_POINTER_ARRAY=0X2AF4B50, TABLES=0X292CE80, WILD_NUM=0, FIELDS=@0X2AF4A70,     CONDS=0X2AEB328, OG_NUM=2, ORDER=0X2AEC5F0, GROUP=0X2AEB5A8, HAVING=0X2A68340, PROC_PARAM=0X0, SELECT_OPTIONS=2147749634, RESULT=0X2A68710,     UNIT=0X2AF42C8, SELECT_LEX=0X2AF4968) AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_SELECT.CC:3252#9  0X000000000067603E IN HANDLE_SELECT (THD=0X28FC0C8, LEX=0X2AF4228, RESULT=0X2A68710, SETUP_TABLES_DONE_OPTION=0)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_SELECT.CC:321#10 0X000000000061370F IN EXECUTE_SQLCOM_SELECT (THD=0X28FC0C8, ALL_TABLES=0X292CE80)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_PARSE.CC:5103#11 0X000000000061557D IN MYSQL_EXECUTE_COMMAND (THD=0X28FC0C8)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_PARSE.CC:2358#12 0X00000000008A9AE7 IN SP_INSTR_STMT::EXEC_CORE (THIS=0X2AEC638, THD=0X28FC0C8, NEXTP=0X7FFAB1DFE608)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSP_HEAD.CC:2948#13 0X00000000008A9CE8 IN SP_LEX_KEEPER::RESET_LEX_AND_EXEC_CORE (THIS=0X2AEC678, THD=0X28FC0C8, NEXTP=0X7FFAB1DFE608, OPEN_TABLES=FALSE,     INSTR=0X2AEC638) AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSP_HEAD.CC:2764#14 0X00000000008B0130 IN SP_INSTR_STMT::EXECUTE (THIS=0X2AEC638, THD=0X28FC0C8, NEXTP=0X7FFAB1DFE608)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSP_HEAD.CC:2886#15 0X00000000008AC12E IN SP_HEAD::EXECUTE (THIS=0X2AF3850, THD=0X28FC0C8)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSP_HEAD.CC:1262#16 0X00000000008ACFB5 IN SP_HEAD::EXECUTE_PROCEDURE (THIS=0X2AF3850, THD=0X28FC0C8, ARGS=0X28FE6D0)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSP_HEAD.CC:2006#17 0X000000000061BC57 IN MYSQL_EXECUTE_COMMAND (THD=0X28FC0C8)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_PARSE.CC:4617#18 0X000000000061D38E IN MYSQL_PARSE (THD=0X28FC0C8, INBUF=0X29F2DB0 CALL STORED_PROC_32748 * TRANSFORM_OUTCOME_UNORDERED_MATCH *, LENGTH=62,     FOUND_SEMICOLON=0X7FFAB1E008B8) AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_PARSE.CC:6131#19 0X000000000061DEE5 IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0X28FC0C8,     PACKET=0X29EAE99 CALL STORED_PROC_32748 * TRANSFORM_OUTCOME_UNORDERED_MATCH *, PACKET_LENGTH=62)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_PARSE.CC:1154#20 0X000000000061F40F IN DO_COMMAND (THD=0X28FC0C8) AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_PARSE.CC:838#21 0X00000000006FF465 IN DO_HANDLE_ONE_CONNECTION (THD_ARG=0X28FC0C8)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_CONNECT.CC:1187#22 0X00000000006FF52A IN HANDLE_ONE_CONNECTION (ARG=0X28FC0C8)    AT DATA0JOHNEMBOPTIMIZER-TESTINGCODEBZRMYSQL-6.0-CODEBASE-BUGFIXINGSQLSQL_CONNECT.CC:1127#23 0X00007FFABE64C3BA IN START_THREAD () FROM LIBLIBPTHREAD.SO.0#24 0X00007FFABD5CAFCD IN CLONE () FROM LIBLIBC.SO.6#25 0X0000000000000000 IN ?? ()HOW TO REPEAT:PERL RUNALL.PL --THREADS=1 --SEED=1273496682 --MYSQLD=--INIT-FILE=PATHTOINIT-FILE.SQL --ENGINE=INNODB --GRAMMAR=CONFOPTIMIZEROUTER_JOIN.YY --GENDATA=CONFOPTIMIZEROUTER_JOIN.ZZ --QUERIES=1M --DURATION=1200 --BASEDIR=PATHTOMYSQL-6.0-CODEBASE-BUGFIXINGWHERE INIT-FILE.SQL CONTAINS:SET GLOBAL OPTIMIZER_JOIN_CACHE_LEVEL=8;SET GLOBAL OPTIMIZER_SWITCH=ENGINE_CONDITION_PUSHDOWN=ON,FIRSTMATCH=ON,INDEX_CONDITION_PUSHDOWN=ON,INDEX_MERGE=ON,INDEX_MERGE_INTERSECTION=ON,INDEX_MERGE_SORT_UNION=ON,INDEX_MERGE_UNION=ON,LOOSESCAN=ON,MATERIALIZATION=ON,MRR=ON,MRR_COST_BASED=OFF,SEMIJOIN=OFF; ","SUMMARY":"BUGU00A0#53544  SERVER HANGS DURING JOIN QUERY IN STORED PROCEDURE CALLED TWICE IN A ROW ","CLASS":0}
{"ID_DEFECT":"56709","DESCRIPTION":"     [10 SEP 2010 6:56]   GEORGI KODINOV          DESCRIPTION:A GOOD AMOUNT OF MEMORY LEAKS REPORTED BY MTR, BUT NOT CAUSING TESTS TO FAIL. SEE THE ATTACHED TEXT FILE FOR THE VALGRIND OUTPUTHOW TO REPEAT:RUN THE TEST SUITE UNDER VALGRINDSUGGESTED FIX:FIX THE LEAKS ","SUMMARY":"BUGU00A0#56709  MEMORY LEAKS AT RUNNING THE 5.1 TEST SUITE ","CLASS":0}
{"ID_DEFECT":"56709","DESCRIPTION":"     [10 SEP 2010 6:56]   GEORGI KODINOV          DESCRIPTION:A GOOD AMOUNT OF MEMORY LEAKS REPORTED BY MTR, BUT NOT CAUSING TESTS TO FAIL. SEE THE ATTACHED TEXT FILE FOR THE VALGRIND OUTPUTHOW TO REPEAT:RUN THE TEST SUITE UNDER VALGRINDSUGGESTED FIX:FIX THE LEAKS ","SUMMARY":"BUGU00A0#56709  MEMORY LEAKS AT RUNNING THE 5.1 TEST SUITE ","CLASS":0}
{"ID_DEFECT":"56709","DESCRIPTION":"     [10 SEP 2010 6:56]   GEORGI KODINOV          DESCRIPTION:A GOOD AMOUNT OF MEMORY LEAKS REPORTED BY MTR, BUT NOT CAUSING TESTS TO FAIL. SEE THE ATTACHED TEXT FILE FOR THE VALGRIND OUTPUTHOW TO REPEAT:RUN THE TEST SUITE UNDER VALGRINDSUGGESTED FIX:FIX THE LEAKS ","SUMMARY":"BUGU00A0#56709  MEMORY LEAKS AT RUNNING THE 5.1 TEST SUITE ","CLASS":0}
{"ID_DEFECT":"24860","DESCRIPTION":"     [6 DEC 2006 18:17]   RAFAL SOMLA          DESCRIPTION:DUE TO INCORRECT IMPLEMENTATION OF SLAVE_TRANSACTION_RETRIES VARIABLE HANDLING IT IS POSSIBLE THAT REPLICATION SLAVE WILL ENTER INFINITE LOOP REPEATING STATEMENT WHICH TRIGGERS TRANSIENT ERROR.REPLICATION SLAVE REPEATS EXECUTION OF A REPLICATION EVENT IF IT TRIGGERS AN ERROR CONSIDERED TO BE TRANSIENT (CURRENTLY DEFINED BY HAS_TEMPORARY_ERROR() FUNCTION IN SLAVE.CC). THE NUMBER OF RETRIES IS SUPPOSED TO BE LIMITED BY THE VALUE OF GLOBAL SLAVE_TRANSACTION_RETRIES VARIABLE.THIS IS IMPLEMENTED INSIDE THE MAIN EVENT EXECUTION LOOP INSIDE SLAVES SQL THREAD (FUNCTIONS HANDLE_SLAVE_SQL() AND EXEC_RELAY_LOG_EVENT() IN SLAVE.CC) WHICH, UPON DETECTION THAT AN ERROR RETURNED BY EV->EXEC_EVENT() IS TRANSIENT, REWINDS RELAY LOG TO THE POSITION OF THE EVENT (THIS IS COMPLICATED BY EVENT GROUPS AS EXPLAINED BELOW). AS A RESULT, NEXT ITERATION OF EVENT EXECUTION LOOP WILL READ THE SAME EVENT AND EXECUTE IT AGAIN.WHEN EVENT IS REPEATED, VARIABLE RLI->TRANS_RETRIES IS INCREASED AND CHECKED AGAINST THE VALUE OF SLAVE_TRANSACTION_RETRIES VARIABLE SO THAT REPETITIONS ARE STOPPED AFTER THIS MANY TRIES. RLI->TRANS_RETRIES IS RESET TO ZERO UPON SUCCESSFUL EXECUTION OF THE EVENT.A POSSIBLE PROBLEM IS CAUSED BY EXISTENCE OF EVENT GRUPS IN THE REPLICATION LOG. WHEN REPLICATING SINGLE SQL STATEMENT (IN ROW BASED REPLICATION), SEVERAL EVENTS CAN BE GENERATED WHICH FORM SINGLE EVENT GROUP IN THE LOG. FOR EXAMPLE, WHEN REPLICATING INSERT STATEMENT, FIRST TABLE_MAP EVENT IS GENERATED AND THEN ONE OR MORE WRITE_ROWS EVENTS. NOW, WHEN A TRANSIENT ERROR IS ENCOUNTERED DURING EVENT EXECUTION, RELAY LOG IS REWIND TO THE BEGINNING OF THE WHOLE EVENT GROUP CONTAINING THAT EVENT. THUS, THE WHOLE GROUP WILL BE REPEATED. NOW CONSIDER THE FOLLOWING EVENT GROUP:1. TABLE_MAP EVENT    EXECUTES OK2. WRITE_ROWS EVENT   TRIGGERS TRANSIENT ERROR, REPEAT FROM 1.THEN RLI->TRANS_RETRIES IS INCREASED WHEN EVENT 2 IS EXECUTED AND TRANSIENT ERROR IS DETECTED BUT IT IS RESET TO ZERO AFTER EXECUTING EVENT 1. AS A RESULT THIS EVENT GROUP WILL BE REPEATED AD INFINITUM UNLESS THE ERROR CONDITION DISSAPEARS.NOTE: THIS IS NOT VERY CRITICAL BECAUSE TRANSIENT ERRORS, BY DEFINITION, SHOULD DISSAPEAR AFTER SOME TIME.HOW TO REPEAT:NOT EASY BECAUSE IT IS DIFFICULT TO PROVOKE A TRANSIENT ERROR. I MANAGED TO GET THE FAULTY BEHAVIOUR BY MODIFYING EXEC_RELAY_LOG_EVENT() CODE SO THAT ALL EVENT EXECUTION ERRORS ARE CONSIDERED TRANSIENT:    IF (SLAVE_TRANS_RETRIES)    -     IF (EXEC_RES && HAS_TEMPORARY_ERROR(THD) )+     IF (EXEC_RES * && HAS_TEMPORARY_ERROR(THD) * )              CONST CHAR *ERRMSG;STILL IT WAS NOT EASY TO GET AN ERROR ONLY IN A SECOND EVENT OF AN EVENT GROUP. I MANAGED TO DO IT BY CREATING FOREIGN KEY CONSTRAINT ON A TABLE, WHICH IS SATISFIED ON MASTER, WHILE ON SLAVE I MODIFY THE EXTERNAL TABLE SO THAT THE CONSTRAINT FAILS. THIS WAY THE TABLE_MAP EVENT EXECUTES CORRECTLY BUT THERE IS AN ERROR DURING WRITE_ROWS EVENT. THE TEST CASE LOOKS AS FOLLOWS:-- SOURCE INCLUDEMASTER-SLAVE.INC-- CONNECTION MASTERCREATE TABLE T1 (A INT PRIMARY KEY) ENGINE=INNODB;CREATE TABLE T2 (A INT, B INT, FOREIGN KEY (B) REFERENCES T1(A)) ENGINE=INNODB;SET AUTOCOMMIT=1;INSERT INTO T1 VALUES (1);-- SYNC_SLAVE_WITH_MASTERSTOP SLAVE SQL_THREAD;DELETE FROM T1 WHERE A=1;-- CONNECTION MASTERINSERT INTO T2 VALUES (2,1);-- SAVE_MASTER_POS--CONNECTION SLAVESTART SLAVE SQL_THREAD;-- SYNC_WITH_MASTERSUGGESTED FIX:RESET RLI->TRANS_RETRIES ONLY WHEN A NEW EVENT GROUP STARTS. ","SUMMARY":"BUGU00A0#24860  INCORRECT SLAVE_TRANSACTION_RETRIES CODE CAN RESULT IN SLAVE STUCK ","CLASS":0}
{"ID_DEFECT":"28430","DESCRIPTION":"     [15 MAY 2007 1:56]   OMER BARNIR          DESCRIPTION:MISSING UPDATES OBSERVED ON THE SLAVE WHEN REPLICATING INNODB PARTOIOPMED TABLES USING RBRMBR MODES.DETAILS:TABLES DEFINED AS:CREATE TABLE TEST.BYKEY_TBL(ID MEDIUMINT NOT NULL AUTO_INCREMENT,                           DT TIMESTAMP, USER CHAR(255), UUIDF LONGBLOB,                           FKID MEDIUMINT, FILLER VARCHAR(255),                           PRIMARY KEY(ID)) ENGINE=INNODB                                PARTITION BY KEY(ID) PARTITIONS 5;CREATE TABLE TEST.BYRANGE_TBL(ID MEDIUMINT NOT NULL AUTO_INCREMENT,                           DT TIMESTAMP, USER CHAR(255), UUIDF LONGBLOB,                           FKID MEDIUMINT, FILLER VARCHAR(255),                           PRIMARY KEY(ID)) ENGINE=INNODB                                PARTITION BY RANGE(ID)                                SUBPARTITION BY HASH(ID) SUBPARTITIONS 2                                (PARTITION PA1 VALUES LESS THAN (10),                                 PARTITION PA2 VALUES LESS THAN (20),                                 PARTITION PA3 VALUES LESS THAN (30),                                 PARTITION PA4 VALUES LESS THAN (40),                                 PARTITION PA5 VALUES LESS THAN (50),                                 PARTITION PA6 VALUES LESS THAN (60),                                 PARTITION PA7 VALUES LESS THAN (70),                                 PARTITION PA8 VALUES LESS THAN (80),                                 PARTITION PA9 VALUES LESS THAN (90),                                 PARTITION PA10 VALUES LESS THAN (100),                                 PARTITION PA11 VALUES LESS THAN MAXVALUE);THE TABLES ARE POPULATED USING STORED PROCEDURES THAT POPULATE 1000 ROWS AND THEN REMOVE EVERY SECOND LINE (SEE ATTACHED TEST CASE) TO THE END RESULT IS THAT EACH TABLE HAS 500 LINES AFTER THE CALL TO THE STORERED PROCEDURE.HOWEVER ON THE SLAVE ONLY SOME OF THE ROWS ARE DELETED FROM EACH OF THE TABLESSO TE END RESULT IS THAT THE SLAVE TABLES HAVE MORE ROWS THAN THAN ARE EXPECTED.NOTE: - NO REPLICATION ERRORS ARE REPORTED AND REPLICATION IS REPORTED AS COMPLETED   SUCCESSFULY - THE PROBLEM IS NOT OBSERVED WITH NON PARTITIONED TABLES (SEE TEST CASE) - THE PROBLEM IS NOT OBSERVED IF USING MYISAM - THE PROBLEM IS NOT OBSERVED IF THE SLAVE DATABASE HAS INNODB DISABLED   I.E. THE TABLES ARE CREATED ON THE SLAVE AS MYISAM. - TO SEE THE DIFFERENCES DOWNLOAD THE ATTACHED RPL_TEST_DB.TAR.GZ FILEHOW TO REPEAT:DOWNLOAD THE ATTACHED TEST AND RESULT FILE AND COPY THEM TO T AND R.TO SEE THE PROBLEM AS DESCRIBED RUN:PERL .MYSQL-TEST-RUN.PL --MYSQLD=--INNODB RPL_PART_BUG       TO SEE THE PROBLEM DOES NOT EXIST IF INNODB IS DISABLED ON THE SLAVE RUN PERL .MYSQL-TEST-RUN.PL RPL_PART_BUG       TO SEE THAT THE PROBLEM IS NOT OBSERVED WITH STATEMENT BASED REPLICATION RUNPERL .MYSQL-TEST-RUN.PL --MYSQLD=--BINLOG_FORMAT=STATEMENT                          --MYSQLD=--INNODB RPL_PART_BUG TO SEE THE PROBLEM IS NOT OBSERVED WITH MYISAM CHANGE THE VALUE OF THE $ENGINE_TYPE VARIABLE IN THE TEST CASESUGGESTED FIX:REPLICATED TABLES SHOULD BE IDENTINCAL ","SUMMARY":"BUGU00A0#28430  FAILURE IN REPLICATION OF INNODB PARTITIONED TABLES ON ROWMIXED FORMAT  ","CLASS":0}
{"ID_DEFECT":"28618","DESCRIPTION":"     [23 MAY 2007 12:30]   MATS KINDAHL          DESCRIPTION:IT IS POSSIBLE TO USE SQL_SLAVE_SKIP_COUNTER TO SKIP EVENTS SO THAT YOU END UP IN THE MIDDLE OF A GROUP. THIS HAVE THE POTENTIAL FOR CRASHING THE SERVER, SINCE IT MIGHT SKIP EITHER TABLE MAP EVENTS (FOR ROW-BASED) OR CONTEXT EVENTS (FOR STATEMENT-BASED).HOW TO REPEAT:CONNECTION SLAVE;STOP SLAVE;CONNECTION MASTER;SET SESSION BINLOG_FORMAT=ROW;CREATE TABLE T1 (A INT, B INT);CREATE TABLE T2 (C INT, D INT);INSERT INTO T1 VALUES (1,1),(2,4),(3,9);INSERT INTO T2 VALUES (1,1),(2,8),(3,27);UPDATE T1,T2 SET B = D, D = B * 2 WHERE A = C;SHOW BINLOG EVENTS;# THESE TABLES SHOULD BE CHANGEDSELECT * FROM T1;SELECT * FROM T2;SAVE_MASTER_POS;CONNECTION SLAVE;# STOP WHEN REACHING THE THE TABLE MAP EVENT.START SLAVE UNTIL MASTER_LOG_FILE=MASTER-BIN.000001, MASTER_LOG_POS=484;WAIT_FOR_SLAVE_TO_STOP;--REPLACE_RESULT $MASTER_MYPORT MASTER_PORT--REPLACE_COLUMN 1 # 8 # 9 # 23 # 33 #QUERY_VERTICAL SHOW SLAVE STATUS;SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1;START SLAVE;SYNC_WITH_MASTER;# THESE VALUES SHOULD BE WHAT WAS INSERTED, NOT WHAT WAS UPDATED, I.E.,# THE ENTIRE GROUP SHOULD BE SKIPPED.SELECT * FROM T1;SELECT * FROM T2;CONNECTION MASTER;DROP TABLE T1, T2;SYNC_SLAVE_WITH_MASTER;SUGGESTED FIX:IF THE RESULT OF SKIPPING AN EVENTS ENDS UP IN THE MIDDLE OF A GROUP, PRINT A WARNING AND CONTINUE SKIPPING UNTIL THE END OF THE GROUP. ","SUMMARY":"BUGU00A0#28618  SKIPPING INTO THE MIDDLE OF A GROUP WITH SQL_SLAVE_SKIP_COUNTER IS POSSIBLE ","CLASS":0}
{"ID_DEFECT":"30790","DESCRIPTION":"     [4 SEP 2007 12:27]   RAFAL SOMLA          DESCRIPTION:QUOTTING FROM ANTONY CURTIS:----------------------------------------------------------------------------ON MYSQL-5.1-TARGET-5.1.22 REPOSITORYNEW TEST FAILS ON BIG-ENDIAN ARCHITECTURES: RPL_NDB_2OTHERDEBUG BUILD FAILURE CAUSED BY ASSERTION.RELEASE BUILD FAILURE CAUSED BY FATAL BUFFER OVERFLOW AND WIDESPREAD MEMORY CORRUPTION.ANALYSIS:THERE ARE MANY AREAS OF DUBIOUS CODE, FOR EXAMPLE IN RPL_UTILITY.CC    LENGTH= M_FIELD_METADATA[COL] & 0X00FF;    DBUG_ASSERT(LENGTH > 0);    IF (LENGTH > 255)    HOW WILL THAT IF STATEMENT EVER EVALUATE TO TRUE?OTHER AREAS, HAVE USHORT VALUES SIGN EXTENDED AND STORED IN UINT WHICH WILL RESULT IN VALUES OF 32768-64436 RESULTING IN VERY LARGE INTEGER VALUES.---------------------------------------------------------------------------THE CODE FRAGMENT ABOVE COMES FROM TABLE_DEF::CALC_FIELD_SIZE() WHICH WAS MODIFIED BY WL#3228.AN ISSUE TO CONSIDER IS HOW THIS CODE HANDLES DIFFERENT BYTE ORDERS (E.G. BIG-ENDIAN ON SOLARIS). THIS IS A MORE GENERAL PROBLEM OF HOW TO HANDLE DIFFERENT BYTE ORDERS IN REPLICATION. SEE RELATED BUG#29549.HOW TO REPEAT:SEE CODE IN RPL_UTILITY.CC ","SUMMARY":"BUGU00A0#30790  SUSPICIOUS CODE IN RPL_UTILITY.CC ","CLASS":0}
{"ID_DEFECT":"31076","DESCRIPTION":"     [18 SEP 2007 6:45]   ADAM DONNISON          DESCRIPTION:UPGRADED FROM 5.1.20 TO 5.1.22, AND FOUND THE SERVER WAS UNSTABLE WITH OBVIOUS CRASHES, AND COULDNT COMPLETE THE MYSQL_UPGRADE.  RESTARTED THE SERVER WITH --SKIP-SLAVE-START AND --SKIP-GRANT-TABLES AND RE-RAN MYSQL_UPGRADE WHICH WORKED WITHOUT A PROBLEM.  THEN TRIED TO ISSUE START SLAVE; AND IMMEDIATELY THE SERVER CRASHES AND MYSQLD_SAFE RESTARTS IT.  THIS HAPPENS EACH TIME START SLAVE IS ISSUED.PORTION OF ERROR LOG:070918  6:10:44 [NOTE] SLAVE SQL THREAD INITIALIZED, STARTING REPLICATION IN LOG MASTER-BIN.000311 AT POSITION 164170623, RELAY LOG .RELAY-BIN.000145 POSITION: 5130070918  6:10:44 - MYSQLD GOT SIGNAL 11;THIS COULD BE BECAUSE YOU HIT A BUG. IT IS ALSO POSSIBLE THAT THIS BINARYOR ONE OF THE LIBRARIES IT WAS LINKED AGAINST IS CORRUPT, IMPROPERLY BUILT,OR MISCONFIGURED. THIS ERROR CAN ALSO BE CAUSED BY MALFUNCTIONING HARDWARE.WE WILL TRY OUR BEST TO SCRAPE UP SOME INFO THAT WILL HOPEFULLY HELP DIAGNOSETHE PROBLEM, BUT SINCE WE HAVE ALREADY CRASHED, SOMETHING IS DEFINITELY WRONGAND THIS MAY FAIL.KEY_BUFFER_SIZE=536870912READ_BUFFER_SIZE=131072MAX_USED_CONNECTIONS=1MAX_THREADS=512THREADS_CONNECTED=1IT IS POSSIBLE THAT MYSQLD COULD USE UP TOKEY_BUFFER_SIZE + (READ_BUFFER_SIZE + SORT_BUFFER_SIZE)*MAX_THREADS = 1641286 KBYTES OF MEMORYHOPE THATS OK; IF NOT, DECREASE SOME VARIABLES IN THE EQUATION.THD: 0X822004F0ATTEMPTING BACKTRACE. YOU CAN USE THE FOLLOWING INFORMATION TO FIND OUTWHERE MYSQLD DIED. IF YOU SEE NO MESSAGES AFTER THIS, SOMETHING WENTTERRIBLY WRONG...CANNOT DETERMINE THREAD, FP=0X82332F88, BACKTRACE MAY NOT BE CORRECT.STACK RANGE SANITY CHECK OK, BACKTRACE FOLLOWS:0X81EB5770X8B68A50X82EEBB20X82EF9D40XD13BD40X9154FENEW VALUE OF FP=(NIL) FAILED SANITY CHECK, TERMINATING STACK TRACE!PLEASE READ HTTP:DEV.MYSQL.COMDOCREFMAN5.1ENRESOLVE-STACK-DUMP.HTMLAND FOLLOW INSTRUCTIONS ON HOW TO RESOLVE THE STACK TRACE.RESOLVED STACK TRACE IS MUCH MORE HELPFUL IN DIAGNOSING THEPROBLEM, SO PLEASE DO RESOLVE ITTRYING TO GET SOME VARIABLES.SOME POINTERS MAY BE INVALID AND CAUSE THE DUMP TO ABORT...THD->QUERY AT (NIL)  IS INVALID POINTERTHD->THREAD_ID=24THE MANUAL PAGE AT HTTP:WWW.MYSQL.COMDOCENCRASHING.HTML CONTAINSINFORMATION THAT SHOULD HELP YOU FIND OUT WHAT IS CAUSING THE CRASH.070918 06:10:44 MYSQLD_SAFE NUMBER OF PROCESSES RUNNING NOW: 0070918 06:10:44 MYSQLD_SAFE MYSQLD RESTARTEDHOW TO REPEAT:START SERVER WITH --SKIP-SLAVE-START, ONCE STARTED ISSUE START SLAVE WITH OUTSTANDING UPDATES QUEUED AT THE MASTER. ","SUMMARY":"BUGU00A0#31076  SERVER CRASHES WHEN START SLAVE IS ISSUED ","CLASS":0}
{"ID_DEFECT":"32709","DESCRIPTION":"     [26 NOV 2007 9:34]   SHANE BESTER          DESCRIPTION:DURING SOME LONG RUNNING TESTS I FOUND THIS CRASH:071126 11:23:37 [ERROR] MYSQLD-DEBUG: OUT OF MEMORY AT LINE 3134, .SQL_CLASS.CC071126 11:23:37 [ERROR] MYSQLD-DEBUG: NEEDED 2779103866 BYTE (2713969K), MEMORY IN USE: 26766872 BYTES (26140K)071126 11:23:38 [ERROR] MYSQLD-DEBUG: OUT OF MEMORY AT LINE 3134, .SQL_CLASS.CC071126 11:23:38 [ERROR] MYSQLD-DEBUG: NEEDED 2779103866 BYTE (2713969K), MEMORY IN USE: 26766872 BYTES (26140K)ASSERTION FAILED: TRX_DATA->EMPTY(), FILE .LOG.CC, LINE 1293MYSQLD-DEBUG.EXE!_NMSG_WRITEMYSQLD-DEBUG.EXE!ABORTMYSQLD-DEBUG.EXE!_ASSERTMYSQLD-DEBUG.EXE!BINLOG_CLOSE_CONNECTIONMYSQLD-DEBUG.EXE!CLOSECON_HANDLERTONMYSQLD-DEBUG.EXE!PLUGIN_FOREACH_WITH_MASKMYSQLD-DEBUG.EXE!HA_CLOSE_CONNECTIONMYSQLD-DEBUG.EXE!THD::~THDMYSQLD-DEBUG.EXE!THD::`SCALAR DELETING DESTRUCTORMYSQLD-DEBUG.EXE!UNLINK_THDMYSQLD-DEBUG.EXE!ONE_THREAD_PER_CONNECTION_ENDMYSQLD-DEBUG.EXE!HANDLE_ONE_CONNECTIONMYSQLD-DEBUG.EXE!PTHREAD_STARTMYSQLD-DEBUG.EXE!_THREADSTARTHOW TO REPEAT:REPEATABLE TESTCASE IS UNKNOWN AT THIS POINT. FALCON TABLES WERE INVOLVED.SERVER WAS STARTED WITH CLEAN DATADIR LIKE:MYSQLD-DEBUG --CONSOLE --SKIP-GRANT-TABLES --SKIP-NAME-RESOLVE --LOG-BIN --LOG --LOG-WARN=2SUGGESTED FIX:I DONT THINK THE BUG IS THE ASSERTION.  INSTEAD, ITS THE HUGE 2.7G MEMORY ALLOCATION JUST BEFORE IT THAT SHOULD BE A CAUSE FOR CONCERN. ","SUMMARY":"BUGU00A0#32709  ASSERTION FAILED: TRX_DATA->EMPTY(), FILE LOG.CC ","CLASS":0}
{"ID_DEFECT":"33247","DESCRIPTION":"     [14 DEC 2007 14:40]   SVEN SANDBERG          DESCRIPTION:WHEN MYSQLBINLOG TERMINATES ABNORMALLY, E.G., BECAUSE AN INVALID LOG EVENT IS FOUND, IT DOES NOT FREE MEMORY AFTER ITSELF.HOW TO REPEAT:RUN THE TEST CASE BINLOG_BASE64_FLAGSUGGESTED FIX:REMOVE THE DIE() FUNCTION FROM MYSQLBINLOG. INSTEAD, PRINT AN ERROR MESSAGE AND RETURN FAILURE. PROPAGATE RETURNED FAILURES UP TO MAIN(). MAKE SURE EVERYTHING THAT IS EVER ALLOCATED, IS LATER FREED. ","SUMMARY":"BUGU00A0#33247  MYSQLBINLOG DOES NOT CLEAN UP AFTER ITSELF ON ABNORMAL TERMINATION ","CLASS":0}
{"ID_DEFECT":"34647","DESCRIPTION":"     [18 FEB 2008 21:00]   ANDREI ELKIN          DESCRIPTION:THIS IS A RATHER RARE FAILURE OF THE TEST SCRIPT RPL.RPL_TEMPORARY              [ FAIL ]MYSQLTEST: AT LINE 148: QUERY SELECT ID FROM INFORMATION_SCHEMA.PROCESSLIST WHERE COMMAND=BINLOG DUMP INTO @ID FAILED: 1172: RESULT CONSISTED OF MORE THAN ONE ROWTHE RESULT FROM QUERIES JUST BEFORE THE FAILURE WAS:THE LINES FROM HTTPS:INTRANET.MYSQL.COMSECUREPUSHBUILDGETLOG.PL?DIR=MYSQL-5.1-MAINT2&ENTRY=MSVENSSON...MOST PROBABLY MEAN THERE WERE MORE THAN ONE (EXPECTED) INSTANCE OF THE DUMP THREAD ON MASTER.THE ERROR LOG OF THE FAILING RUN HTTPS:INTRANET.MYSQL.COMSECUREPUSHBUILDGETLOG.PL?DIR=MYSQL-5.1-NEW-RPL&ENTRY=SSANDBER...DOES NOT REVEAL MUCH:CURRENT_TEST: RPL.RPL_TEMPORARY080216 14:21:15 [WARNING] THE SYNTAX FOR REPLICATION STARTUP OPTIONS IS DEPRECATED AND WILL BE REMOVED IN MYSQL 5.2. PLEASE USE CHANGE MASTER INSTEAD.080216 14:21:15 [NOTE] PLUGIN INNODB DISABLED BY COMMAND LINE OPTION080216 14:21:15 [NOTE] EVENT SCHEDULER: LOADED 0 EVENTS080216 14:21:15 [NOTE] EXPORTHOMEPUSHBUILDPBMYSQL-5.1-NEW-RPL476MYSQL-5.1.24-RC-PB476SQLMYSQLD: READY FOR CONNECTIONS.VERSION: 5.1.24-RC-PB476-LOG  SOCKET: TMPPBTMP-PS_MIX-6SLAVE.SOCK  PORT: 10062  MYSQL PUSHBUILD EDITION, BUILD 476080216 14:21:15 [NOTE] SLAVE SQL THREAD INITIALIZED, STARTING REPLICATION IN LOG FIRST AT POSITION 0, RELAY LOG TMPVAR-PS_MIX-6LOGSLAVE-RELAY-BIN.000001 POSITION: 4080216 14:21:15 [NOTE] SLAVE IO THREAD: CONNECTED TO MASTER ROOT@127.0.0.1:10060,REPLICATION STARTED IN LOG FIRST AT POSITION 4080216 14:21:15 [NOTE] SLAVE: RECEIVED END PACKET FROM SERVER, APPARENT MASTER SHUTDOWN: 080216 14:21:15 [NOTE] SLAVE IO THREAD: FAILED READING LOG EVENT, RECONNECTING TO RETRY, LOG MASTER-BIN.000001 AT POSTION 2768080216 14:21:15 [NOTE] EXPORTHOMEPUSHBUILDPBMYSQL-5.1-NEW-RPL476MYSQL-5.1.24-RC-PB476SQLMYSQLD: NORMAL SHUTDOWNHOW TO REPEAT:WATCH PBSUGGESTED FIX:FIND OUT HOW MORE THAN ONE DUMP THREAD APPEARED, MAKE CHANGES IN THE TEST TO GUARANTEE THERE IS ONLY ONE AT A TIME. ","SUMMARY":"BUGU00A0#34647  RPL_TEMPORARY DISCOVERS MORE THAN ONE DUMP THREAD AND FAILS TO SELECT ","CLASS":0}
{"ID_DEFECT":"34768","DESCRIPTION":"     [22 FEB 2008 21:19]   SVEN SANDBERG          DESCRIPTION:WHEN THE BINLOG USES MIXED MODE, IT CHOOSES TO LOG STATEMENT-BASED IF THE STATEMENT IS DETERMINISTIC, AND ROW-BASED IF THE STATEMENT IS NON-DETERMINISTIC. NON-DETERMINISTIC STATEMENTS ARE, E.G., INSERT DELAYED, OR STATEMENTS THAT REFER TO A @@VARIABLE. SEE, E.G., WL#3339, BUG#20930, AND BUG#31168.HOWEVER, STATEMENTS THAT USE LIMIT ARE UNSAFE (BECAUSE THE ORDER IN WHICH ROWS ARE RETRIEVED IS NOT DEFINED), BUT THEY ARE LOGGED IN STATEMENT MODE IF BINLOG_FORMAT=MIXED.SEE ALSO HTTP:WWW.XAPRB.COMBLOG20071108HOW-MYSQL-REPLICATION-GOT-OUT-OF-SYNCHOW TO REPEAT:RUN THE FOLLOWING TEST CASE:SOURCE INCLUDEHAVE_LOG_BIN.INC;SOURCE INCLUDEHAVE_BINLOG_FORMAT_MIXED.INC;CREATE TABLE T1 (A INT);INSERT DELAYED INTO T1 VALUES (1), (2), (3);INSERT INTO T1 SELECT * FROM T1 LIMIT 1;THEN RUN:MYSQLBINLOG VARLOGMASTER-BIN.000001SUGGESTED FIX:MARK ALL STATEMENTS USING LIMIT AS UNSAFE (WE CAN MAKE AN EXCEPTION FOR STATEMENTS THAT HAVE AN ORDER BY WHICH INCLUDES A PRIMARY KEY). ","SUMMARY":"BUGU00A0#34768  NONDETERMINISTIC INSERT USING LIMIT LOGGED IN STMT MODE IF BINLOG_FORMAT=MIXED ","CLASS":0}
{"ID_DEFECT":"37200","DESCRIPTION":"     [4 JUN 2008 17:23]   SVEN SANDBERG          DESCRIPTION:RPL_SWITCH_STM_ROW_MIXED FAILS SPORADICALLY (VERY RARELY) IN PUSHBUILD, WITH THE FOLLOWING RESULT MISMATCH:==== BEGIN RESULT MISMATCH ====RPL.RPL_SWITCH_STM_ROW_MIXED MIX [ FAIL ]MYSQLTEST: AT LINE 570: COMMAND DIFF_FILES FAILED WITH ERROR 1THE RESULT FROM QUERIES JUST BEFORE THE FAILURE WAS:< SNIP >DROP TABLE IF EXISTS T13;CREATE TABLE T13 (DATA CHAR(64));INSERT INTO T13 VALUES (USER());INSERT INTO T13 VALUES (MY_USER());INSERT INTO T13 VALUES (CURRENT_USER());INSERT INTO T13 VALUES (MY_CURRENT_USER());--- DEVSHMVAR-N_MIX-100TMPRPL_SWITCH_STM_ROW_MIXED_MASTER.SQLT2008-05-28 15:48:28.988917236 +0300+++ DEVSHMVAR-N_MIX-100TMPRPL_SWITCH_STM_ROW_MIXED_SLAVE.SQLT2008-05-28 15:48:29.258824436 +0300@@ -122,11 +122,6 @@ INSERT INTO `T21` VALUES (FOO6_2_8D2298DC-7E04-102B-B0D9-00D06806AD18); INSERT INTO `T21` VALUES (FOO6_3_8D22E5BC-7E04-102B-B0D9-00D06806AD18); INSERT INTO `T21` VALUES (FOO6_3_8D23162C-7E04-102B-B0D9-00D06806AD18);-INSERT INTO `T21` VALUES (DELAY_1_);-INSERT INTO `T21` VALUES (DELAY_2_8D2E2472-7E04-102B-B0D9-00D06806AD18);-INSERT INTO `T21` VALUES (DELAY_6_);-INSERT INTO `T21` VALUES (0.08733753216204936);-INSERT INTO `T21` VALUES (2.345); INSERT INTO `T22` VALUES (1); INSERT INTO `T22` VALUES (8D151EF0-7E04-102B-B0D9-00D06806AD18); INSERT INTO `T3` VALUES (TRY_50_11);MORE RESULTS FROM QUERIES BEFORE FAILURE CAN BE FOUND IN DEVSHMVAR-N_MIX-100LOGRPL_SWITCH_STM_ROW_MIXED.LOGSTOPPING ALL SERVERSRESTORING SNAPSHOT OF DATABASES==== END RESULT MISMATCH ====THE REASON IS THAT WE DO NOT WAIT UNTIL INSERT DELAYED STATEMENTS ARE REPLICATED TO THE SLAVE. MORE PRECISELY, THE TEST DOES THIS:LINES 285-294:  ON MASTER, INSERT DELAYED INTO T2 VALUES ...LINES 296-297  ON MASTER, WAIT UNTIL ALL INSERTED ROWS ARE FOUND, BY CALLING  SELECT COUNT(*) FROM T2.LINE 353:  SYNC_SLAVE_WITH_MASTER;HOWEVER, IN MIXED AND ROW MODE, ROWS ARE WRITTEN TO THE BINLOG *AFTER* THEY HAVE BEEN WRITTEN TO THE TABLE. SO IT IS NOT GUARANTEED THAT THE ROWS ARE IN THE BINLOG WHEN IT IS BEING SYNCED. IN FACT, IT IS NOT GUARANTEED THAT THE ROWS EVER MAKE IT TO THE BINLOG: MAYBE THE INSERT DELAYED THREAD DOES NOT GET ANY MORE CPU CYCLES UNTIL THE TEST ENDS.HOW TO REPEAT:.SUGGESTED FIX:WAIT UNTIL THE ROWS SHOW UP IN T2 ON SLAVE INSTEAD OF ON MASTER. ","SUMMARY":"BUGU00A0#37200  RPL_SWITCH_STM_ROW_MIXED FAILS SPORADICALLY IN PUSHBUILD ","CLASS":0}
{"ID_DEFECT":"40013","DESCRIPTION":"     [14 OCT 2008 10:18]   ALEXANDER Y. FOMICHEV          DESCRIPTION:IIUC:IN MIXED MODE MASTER COULD CREATE TEMPORARY TABLE BEING IN STATEMENT BINLOG-FORMAT AND SWITCHING TO ROW JUST AFTER. IF SO BINLOG WILL STAY IN ROW MOD TILL THE END OF SESSION (INCLUDING TNX::CLEANUP AT THE AND).AS FAR AS TEMPORARY TABLES JUST IGNORED IN ROW BASED FORMAT, TEMPORARY TABLES CREATED IN STATEMENT MODE WILL NOT BEEN DROPED AT CLEANUP TIME, BEACAUS CLOSE_TEMPORARY_TABLES CHECKS ONLY CURRENT_STMT_BINLOG_ROW_BASED.VOID CLOSE_TEMPORARY_TABLES(THD *THD)....IF (!MYSQL_BIN_LOG.IS_OPEN() || THD->CURRENT_STMT_BINLOG_ROW_BASED)HOW TO REPEAT:ON THE MASTER:BOWB ~ # MYSQL -E DROP TABLE IF EXISTS TEST; CREATE TABLE TEST (C CHAR(48)) TEST;BOWB ~ # FOR I IN `SEQ 5`;DO MYSQL -E CREATE TEMPORARY TABLE TEST_TMP (C CHAR(48));INSERT INTO TEST  SELECT UUID() TEST;DONEBOWB ~ # FOR I IN `SEQ 5`;DO MYSQL -E CREATE TEMPORARY TABLE TEST_TMP (C CHAR(48));INSERT INTO TEST  SELECT UUID() TEST;DONEON THE SLAVE:MYSQL> SHOW STATUS LIKE SLAVE_OPEN_TEMP_TABLES*************************** 1. ROW ***************************VARIABLE_NAME: SLAVE_OPEN_TEMP_TABLES        VALUE: 01 ROW IN SET (0.01 SEC)MYSQL> SHOW STATUS LIKE SLAVE_OPEN_TEMP_TABLES*************************** 1. ROW ***************************VARIABLE_NAME: SLAVE_OPEN_TEMP_TABLES        VALUE: 51 ROW IN SET (0.00 SEC)MYSQL> SHOW STATUS LIKE SLAVE_OPEN_TEMP_TABLES*************************** 1. ROW ***************************VARIABLE_NAME: SLAVE_OPEN_TEMP_TABLES        VALUE: 101 ROW IN SET (0.00 SEC)SUGGESTED FIX:OOPS, I COULDNT FIND SOMETHING BETTER THEN JUST CLEAR_CURRENT_STMT_BINLOG_ROW_BASED() JUTS BEFORE CLOSE_TEMPORARY_TABLES (IF INITIAL LOG FORMAT WAS MIXED) AND HOPES THAT *IF EXISTS* SAVE ME [AS FOR TEMPORARY TABLES WHICH CREATED UNDER ROW BINLOG FORMAT]DIFF -URNP MYSQL-5.1.28-ASQLSQL_CLASS.CC MYSQL-5.1.28-BSQLSQL_CLASS.CC--- MYSQL-5.1.28-ASQLSQL_CLASS.CC     2008-08-28 19:40:58.000000000 +0400+++ MYSQL-5.1.28-BSQLSQL_CLASS.CC     2008-10-14 11:18:48.256196550 +0400@@ -844,6 +844,8 @@ VOID THD::CLEANUP(VOID)   MYSQL_HA_CLEANUP(THIS);   DELETE_DYNAMIC(&USER_VAR_EVENTS);   HASH_FREE(&USER_VARS);+  IF (VARIABLES.BINLOG_FORMAT == BINLOG_FORMAT_MIXED)+       CLEAR_CURRENT_STMT_BINLOG_ROW_BASED();   CLOSE_TEMPORARY_TABLES(THIS);   MY_FREE((CHAR*) VARIABLES.TIME_FORMAT, MYF(MY_ALLOW_ZERO_PTR));   MY_FREE((CHAR*) VARIABLES.DATE_FORMAT, MYF(MY_ALLOW_ZERO_PTR)); ","SUMMARY":"BUGU00A0#40013  MIXED REPLICATION: ROW BASED FORMAT COULD LEAD TO STALE TMP TABLES ON THE SLAVE ","CLASS":0}
{"ID_DEFECT":"40796","DESCRIPTION":"     [17 NOV 2008 18:02]   VLADISLAV VAINTROUB          DESCRIPTION:MYSQL CRASHED IN  RPL.RPL_EXTRACOLMASTER_MYISAM.WITH THIS CALLSTACK 81117 20:51:58 - MYSQLD GOT EXCEPTION 0XC0000005 ;THD: 0X9839A0ATTEMPTING BACKTRACE. YOU CAN USE THE FOLLOWING INFORMATION TO FIND OUTWHERE MYSQLD DIED. IF YOU SEE NO MESSAGES AFTER THIS, SOMETHING WENTTERRIBLY WRONG...0000000077938B42    NTDLL.DLL!RTLALLOCATEHEAP()00000000779391F7    NTDLL.DLL!RTLALLOCATEHEAP()000000007771CEAA    KERNEL32.DLL!HEAPFREE()00000001403C5A1B    MYSQLD.EXE!FREE()[FREE.C:110]00000001402A450E    MYSQLD.EXE!MY_NO_FLAGS_FREE()[MY_MALLOC.C:62]00000001402AA0DC    MYSQLD.EXE!END_IO_CACHE()[MF_IOCACHE.C:1828]00000001400DA949    MYSQLD.EXE!MYSQL_LOG::CLOSE()[LOG.CC:1977]00000001400DC13E    MYSQLD.EXE!MYSQL_BIN_LOG::CLOSE()[LOG.CC:4526]00000001400DD7FE    MYSQLD.EXE!MYSQL_BIN_LOG::RESET_LOGS()[LOG.CC:2837]00000001402411A4    MYSQLD.EXE!PURGE_RELAY_LOGS()[RPL_RLI.CC:923]00000001401BC4A1    MYSQLD.EXE!RESET_SLAVE()[SQL_REPL.CC:983]0000000140199077    MYSQLD.EXE!RELOAD_ACL_AND_CACHE()[SQL_PARSE.CC:6775]00000001401A03A9    MYSQLD.EXE!MYSQL_EXECUTE_COMMAND()[SQL_PARSE.CC:3860]00000001401A2F06    MYSQLD.EXE!MYSQL_PARSE()[SQL_PARSE.CC:5792]00000001401A3C1A    MYSQLD.EXE!DISPATCH_COMMAND()[SQL_PARSE.CC:1203]00000001401A4CD7    MYSQLD.EXE!DO_COMMAND()[SQL_PARSE.CC:858]0000000140246327    MYSQLD.EXE!HANDLE_ONE_CONNECTION()[SQL_CONNECT.CC:1116]00000001402B82C5    MYSQLD.EXE!PTHREAD_START()[MY_WINTHREAD.C:86]00000001403CAC37    MYSQLD.EXE!_CALLTHREADSTART()[THREAD.C:295]00000001403CAD05    MYSQLD.EXE!_THREADSTART()[THREAD.C:275]000000007771495D    KERNEL32.DLL!BASETHREADINITTHUNK()0000000077918791    NTDLL.DLL!RTLUSERTHREADSTART()TRYING TO GET SOME VARIABLES.SOME POINTERS MAY BE INVALID AND CAUSE THE DUMP TO ABORT...THD->QUERY AT 00000000028EF480=RESET SLAVETHD->THREAD_ID=1THD->KILLED=NOT_KILLEDHOW TO REPEAT:PERL MYSQL-TEST.RUN.PL --SUITE=RPL RPL_EXTRACOLMASTER_MYISAM RPL_EXTRACOLMASTER_MYISAM RPL_EXTRACOLMASTER_MYISAM RPL_EXTRACOLMASTER_MYISAM(INSERT MANY RPL_EXTRACOLMASTER_MYISAMS, THE CRASH IS NOT ALWAYS REPRODUCIBLE, BUT LIKELY AFTER RUNNING THE TEST 20 TIMES OR SO)SUGGESTED FIX:DONT KNOW ","SUMMARY":"BUGU00A0#40796  CRASH DUE TO HEAP CORRUPTION IN RPL.RPL_EXTRACOLMASTER_MYISAM ","CLASS":0}
{"ID_DEFECT":"44581","DESCRIPTION":"     [30 APR 2009 16:44]   VICTOR KIRKEBO          DESCRIPTION:THE BUG WAS FIRST DESCRIBED IN HTTP:BUGS.MYSQL.COMBUG.PHP?ID=40116 (26 OCT 2008):IVE TESTED 5.1.34 AND 5.4.0 WITH MBR AND SBR (NO ERROR WITH RBR).TWO TRANSACTIONS INVOLVING A MIX OF TRANSACTIONAL AND NON-TRANSACTIONAL TABLES ARE EXECUTED IN PARALLEL. ONE OF THE TRANSACTIONS GETS A LOCK WAIT TIMEOUT EXCEEDED ERROR ON THE MASTER BUT THE SLAVE REPORTS NO ERROR AND THIS DIFFERENCE IN ERRORS CAUSES THE SLAVE TO STOP REPLICATION.HOW TO REPEAT:THIS DESCRIPTION BELOW IS TAKEN FROM HTTP:BUGS.MYSQL.COMBUG.PHP?ID=40116 (26 OCT 2008):NOTE:THE SAME ERROR APPEARS WHEN SUBSTITUTING THE UPDATE TRIGGER FOR A DELETE TRIGGER UNDER CONNECTION #1 (AND WITH DELETE STATEMENT UNDER CONNECTION #2) BELOW. CONNECTION #1:--------------DROP DATABASE IF EXISTS RPL_FAILURE_TEST;CREATE DATABASE RPL_FAILURE_TEST;USE RPL_FAILURE_TEST;CREATE TABLE T ( I INT, PRIMARY KEY(I), F CHAR(8) ) ENGINE = INNODB;CREATE TABLE L ( D DATETIME, F CHAR(32) ) ENGINE = MYISAM;DELIMITER |CREATE TRIGGER TR AFTER UPDATE ON T FOR EACH ROW BEGIN INSERT INTO L VALUES ( NOW(), CONCAT( UPDATED T: , OLD.F,  -> , NEW.F ) ); END |DELIMITER ;INSERT INTO T VALUES (4,BLACK), (2,RED), (3,YELOW), (1,CYAN);COMMIT;SET AUTOCOMMIT = 0;UPDATE T SET F = YELLOW WHERE I = 3;CONNECTION #2:--------------USE RPL_FAILURE_TEST;UPDATE T SET F = MAGENTA WHERE F = RED;# NOTE: IF THE 2ND CONNECTION ALSO HAS AUTOCOMMIT=0, # THE PROBLEM HAPPENS AFTER AN EXPLICIT COMMIT OR ROLLBACK OF THE TRANSACTION.#END OF TEST CASEAFTER WAIT TIMEOUT IS EXCEEDED ON CONNECTION #2, THE FOLLOWING RECORDS APPEAR IN THE SLAVE.ERR LOG:[ERROR] SLAVE: QUERY CAUSED DIFFERENT ERRORS ON MASTER AND SLAVE. ERROR ON MASTER: LOCK WAIT TIMEOUT EXCEEDED; TRY RESTARTING TRANSACTION (1205), ERRORON SLAVE: NO ERROR (0). DEFAULT DATABASE: RPL_FAILURE_TEST. QUERY: UPDATE T SET F = MAGENTA WHERE F = RED, ERROR_CODE: 0[ERROR] ERROR RUNNING QUERY, SLAVE SQL THREAD ABORTED. FIX THE PROBLEM, AND RESTART THESLAVE SQL THREAD WITH SLAVE START. WE STOPPED AT LOG MASTER-BIN.000001 POSITION 2531THE LAST RECORD IN SLAVE.LOG IS THE UPDATE.SPECIFIC REQUIREMENTS:THE FIRST CONNECTION SHOULD USE PK AS A CRITERIA IN WHERE CLAUSE (ALTHOUGH PK ITSELF DOESNOT HAVE TO BE UPDATED); THE SECOND CONNECTION DOES NOT USE PK, HOWEVER IT SHOULD UPDATE ASPECIFIC ROW -- IN MY EXPERIMENTS ONLY UPDATES OF ROWS WITH PK VALUE LESS THAN THE ONEUPDATED BY THE FIRST CONNECTION CAUSED SLAVE ABORT -- E.G. IN THE TEST CASE ABOVE, IF THE1ST CONNECTION UPDATES THE ROW WITH PK=3, THAN THE SECOND CONNECTION HAS TO UPDATE ROWSCYAN OR MAGENTA TO PRODUCE SLAVE ABORT, WHILE UPDATES ON BLACK OR YELLOW ROWS DONOT CAUSE THE PROBLEM. ","SUMMARY":"BUGU00A0#44581  SLAVE STOPS WHEN TRANSACTION WITH NON-TRANSACTIONAL TABLE GETS LOCK WAIT TIMEOUT ","CLASS":0}
{"ID_DEFECT":"45242","DESCRIPTION":"     [1 JUN 2009 12:06]   ANDREI ELKIN          DESCRIPTION:THE CRASH IS FOUND ON PB2. THE TEST EXECUTES `STOP SLAVE THROUGH--SOURCE INCLUDERESET_MASTER_AND_SLAVE.INCTO SEESTACK_TEXT:  CURRENT_TEST: RPL.RPL_ROW_CREATE_TABLEMYSQLTEST: IN INCLUDED FILE .INCLUDESTOP_SLAVE.INC: AT LINE 18: QUERY STOP SLAVE FAILED: 2013: LOST CONNECTION TO MYSQL SERVER DURING QUERYAMONG EVIDENCE LEFT THERE IS A STACK:NTDLL!RTLPCOALESCEFREEBLOCKSNTDLL!RTLPFREEHEAPNTDLL!RTLFREEHEAPKERNEL32!HEAPFREEMYSQLD!FREE [F:DDVCTOOLSCRT_BLDSELF_X86CRTSRCFREE.C @ 110]MYSQLD!MYSQL_CLOSE_FREE [G:PB2BUILDSB_0-558718-1243842901.75MYSQL-5.1.36-WIN-X86SQL-COMMONCLIENT.C @ 2611]MYSQLD!MYSQL_CLOSE [G:PB2BUILDSB_0-558718-1243842901.75MYSQL-5.1.36-WIN-X86SQL-COMMONCLIENT.C @ 2720]MYSQLD!HANDLE_SLAVE_IO [G:PB2BUILDSB_0-558718-1243842901.75MYSQL-5.1.36-WIN-X86SQLSLAVE.CC @ 2639]MYSQLD!PTHREAD_START [G:PB2BUILDSB_0-558718-1243842901.75MYSQL-5.1.36-WIN-X86MYSYSMY_WINTHREAD.C @ 85]MYSQLD!_CALLTHREADSTART [F:DDVCTOOLSCRT_BLDSELF_X86CRTSRCTHREAD.C @ 293]MYSQLD!_THREADSTART [F:DDVCTOOLSCRT_BLDSELF_X86CRTSRCTHREAD.C @ 275]HOW TO REPEAT:HTTP:PB2.NORWAY.SUN.COMWEB.PY?TEMPLATE=MYSQL_SHOW_TEST_FAILURE&TEST_FAILURE_ID=2186818 ","SUMMARY":"BUGU00A0#45242  CRASH ON WIN IN MYSQL_CLOSE() -> FREE() ","CLASS":0}
{"ID_DEFECT":"45677","DESCRIPTION":"     [23 JUN 2009 13:08]   VICTOR KIRKEBO          DESCRIPTION:CONCURRENT TRANSACTIONS THAT INSERT ROWS INTO A TABLE WITH AN AUTO_INCREMENT COLUMN CAN CAUSE STATEMENT OR MIXED BASED REPLICATION TO BREAK WITH SLAVE REPORTING ERROR 1062 (ERROR DUPLICATE ENTRY X FOR KEY PRIMARY).THIS SEEMS TO ONLY HAPPEN IF:1) AT LEAST ONE OF THE TRANSACTIONS IS PRECEDED BY AUTOCOMMIT=0 OR IS USING AN EXPLICIT TRANSACTIONAL STATEMENT SUCH AS START TRANSACTION OR BEGIN.2) THE TRANSACTION UNDER 1) IS DOING AN INSERT, UPDATE OR DELETE ON AN INNODB TABLE3) THE TRANSACTION UNDER 1) CAUSES A TRIGGER TO INSERT 2 OR MORE ROWS INTO THE TABLE WITH THE AUTO_INCREMENT COLUMN (THIS TABLE DOESNT NEED TO BE AN INNODB TABLE - IVE TRIED BOTH MYISAM AN INNODB)4) BEFORE THE TRANSACTION UNDER 1) DOES A COMMIT (OR POSSIBLY A ROLLBACK) ANOTHER CONCURRENT TRANSACTION CAUSES AN INSERT ON THE AUTO_INCREMENT TABLE. HOW TO REPEAT:# TRPL_FAILURE.TESTSOURCE INCLUDEHAVE_INNODB.INC;SOURCE INCLUDEMASTER-SLAVE.INC;CONNECTION MASTER;--DISABLE_WARNINGSDROP DATABASE IF EXISTS TST;--ENABLE_WARNINGSCREATE DATABASE TST;USE TST;CREATE TABLE T1(F1 INT) ENGINE=INNODB;CREATE TABLE LOG(I1 INT NOT NULL AUTO_INCREMENT, F1 INT, PRIMARY KEY(I1)) ENGINE=MYISAM;CREATE TRIGGER TR1 AFTER INSERT ON T1 FOR EACH ROW INSERT INTO LOG(F1) VALUES(NEW.F1);SET AUTOCOMMIT=0;INSERT INTO T1(F1) VALUES(1),(2);CONNECTION MASTER1;USE TST;INSERT INTO LOG(F1) VALUES(3);CONNECTION MASTER;COMMIT;INSERT INTO T1(F1) VALUES(4);COMMIT;CONNECTION MASTER;SELECT * FROM LOG;CONNECTION SLAVE;USE TST;SELECT SLEEP(2);SELECT * FROM LOG;SHOW SLAVE STATUS;# END OF TRPL_FAILURE.TESTRUNNING THE TEST ABOVE WITH BINLOG_FORMAT=STATEMENT OR MIXED AND ANY INNODB_AUTOINC_LOCK_MODE E.G :.MYSQL-TEST-RUN.PL  --MYSQLD=--BINLOG_FORMAT=STATEMENT --MYSQLD=--INNODB_AUTOINC_LOCK_MODE=0 --DO-TEST=RPL_FAILUREWILL PRODUCE THIS OUTPUT:# MASTER:SELECT * FROM LOG;I1      F11       12       23       34       4#SLAVE:SELECT * FROM LOG;I1      F11       13       34       2SHOW SLAVE STATUS;SLAVE_IO_STATE  MASTER_HOST     MASTER_USER     MASTER_PORT     CONNECT_RETRY   MASTER_LOG_FILE READ_MASTER_LOG_POS     RELAY_LOG_FILE  RELAY_LOG_POS   RELAY_MASTER_LOG_FILE   SLAVE_IO_RUNNING        SLAVE_SQL_RUNNING       REPLICATE_DO_DB REPLICATE_IGNORE_DB     REPLICATE_DO_TABLE      REPLICATE_IGNORE_TABLE  REPLICATE_WILD_DO_TABLE REPLICATE_WILD_IGNORE_TABLE     LAST_ERRNO      LAST_ERROR      SKIP_COUNTER   EXEC_MASTER_LOG_POS     RELAY_LOG_SPACE UNTIL_CONDITION UNTIL_LOG_FILE  UNTIL_LOG_POS   MASTER_SSL_ALLOWED      MASTER_SSL_CA_FILE      MASTER_SSL_CA_PATH      MASTER_SSL_CERT MASTER_SSL_CIPHER       MASTER_SSL_KEY  SECONDS_BEHIND_MASTER   MASTER_SSL_VERIFY_SERVER_CERT   LAST_IO_ERRNO   LAST_IO_ERROR   LAST_SQL_ERRNO  LAST_SQL_ERRORWAITING FOR MASTER TO SEND EVENT        127.0.0.1       ROOT    12500   1       MASTER-BIN.000001       1245    SLAVE-RELAY-BIN.000003  1179    MASTER-BIN.000001       YES     NO                          1062    ERROR DUPLICATE ENTRY 4 FOR KEY PRIMARY ON QUERY. DEFAULT DATABASE: TST. QUERY: INSERT INTO T1(F1) VALUES(4)  0       1033    1546    NONE            0       NO                                           NULL    NO      0               1062    ERROR DUPLICATE ENTRY 4 FOR KEY PRIMARY ON QUERY. DEFAULT DATABASE: TST. QUERY: INSERT INTO T1(F1) VALUES(4) ","SUMMARY":"BUGU00A0#45677  SLAVE STOPS WITH DUPLICATE ENTRY FOR KEY PRIMARY WHEN USING TRIGGER ","CLASS":0}
{"ID_DEFECT":"46014","DESCRIPTION":"     [7 JUL 2009 14:34]   GEORGI KODINOV          DESCRIPTION:RPL_STM_RESET_SLAVE CAUSES CRASHES LIKE THE FOLLOWING :RPL.RPL_STM_RESET_SLAVE                  [ FAIL ]        TEST ENDED AT 2009-07-07 12:06:05CURRENT_TEST: RPL.RPL_STM_RESET_SLAVEMYSQLTEST: IN INCLUDED FILE .EXTRAPL_TESTSPL_RESET_SLAVE.TEST: AT LINE 39: QUERY STOP SLAVE FAILED: 2013: LOST CONNECTION TO MYSQL SERVER DURING QUERYHOW TO REPEAT:RUN THE TEST SUITE ENOUGH TIMES ON WINDOWSSUGGESTED FIX:NA ","SUMMARY":"BUGU00A0#46014  RPL_STM_RESET_SLAVE CRASHES THE SERVER SPORADICALLY IN PB2 ","CLASS":0}
{"ID_DEFECT":"46030","DESCRIPTION":"     [8 JUL 2009 7:30]   GEORGI KODINOV          DESCRIPTION:IN PB2: RPL.RPL_TRUNCATE_3INNODB                 [ FAIL ]        TEST ENDED AT 2009-07-07 23:01:37CURRENT_TEST: RPL.RPL_TRUNCATE_3INNODBMYSQLTEST: IN INCLUDED FILE .INCLUDESTART_SLAVE.INC: AT LINE 18: QUERY START SLAVE FAILED: 2013: LOST CONNECTION TO MYSQL SERVER DURING QUERY....STACK_TEXT:  NTDLL!RTLPALLOCATEHEAPNTDLL!RTLALLOCATEHEAPMYSQLD!MALLOC [F:DDVCTOOLSCRT_BLDSELF_X86CRTSRCMALLOC.C @ 163]MYSQLD!MY_MALLOC [G:PB2BUILDSB_0-630652-1246997436.81MYSQL-5.1.37-WIN-X86MYSYSMY_MALLOC.C @ 34]MYSQLD!VIO_NEW [G:PB2BUILDSB_0-630652-1246997436.81MYSQL-5.1.37-WIN-X86VIOVIO.C @ 143]MYSQLD!MYSQL_REAL_CONNECT [G:PB2BUILDSB_0-630652-1246997436.81MYSQL-5.1.37-WIN-X86SQL-COMMONCLIENT.C @ 2052]MYSQLD!CONNECT_TO_MASTER [G:PB2BUILDSB_0-630652-1246997436.81MYSQL-5.1.37-WIN-X86SQLSLAVE.CC @ 3684]MYSQLD!SAFE_CONNECT [G:PB2BUILDSB_0-630652-1246997436.81MYSQL-5.1.37-WIN-X86SQLSLAVE.CC @ 3631]MYSQLD!HANDLE_SLAVE_IO [G:PB2BUILDSB_0-630652-1246997436.81MYSQL-5.1.37-WIN-X86SQLSLAVE.CC @ 2431]MYSQLD!PTHREAD_START [G:PB2BUILDSB_0-630652-1246997436.81MYSQL-5.1.37-WIN-X86MYSYSMY_WINTHREAD.C @ 85]MYSQLD!_CALLTHREADSTART [F:DDVCTOOLSCRT_BLDSELF_X86CRTSRCTHREAD.C @ 293]MYSQLD!_THREADSTART [F:DDVCTOOLSCRT_BLDSELF_X86CRTSRCTHREAD.C @ 275]KERNEL32!BASETHREADINITTHUNKNTDLL!__RTLUSERTHREADSTARTNTDLL!_RTLUSERTHREADSTARTHOW TO REPEAT:RUN THE TEST ENOUGH TIMES ON WINDOWSSUGGESTED FIX:NA ","SUMMARY":"BUGU00A0#46030  RPL_TRUNCATE_3INNODB CAUSES SERVER CRASH ON WINDOWS ","CLASS":0}
{"ID_DEFECT":"48340","DESCRIPTION":"     [27 OCT 2009 7:42]   DAOGANG QU          DESCRIPTION:RPL.RPL_CROSS_VERSION                    [ FAIL ]  FOUND WARNINGSERRORS IN SERVER LOG FILE!        TEST ENDED AT 2009-10-26 00:26:40MYSQLTEST: LOGGING TO .MYSQLTEST: RESULTS SAVED IN .MYSQLTEST: CONNECTING TO SERVER LOCALHOST:13000 (SOCKET EXPORTHOME2PB2TESTSB_1-884023-1256498343.82TMPAN5S2FSE4IMYSQLD.1.SOCK) AS ROOT, CONNECTION DEFAULT, ATTEMPT 0 ...MYSQLTEST: ... CONNECTED.MYSQLTEST: START PROCESSING TEST COMMANDS FROM .INCLUDECHECK-WARNINGS.TEST ...LINE==30332== THREAD 4:==30332== CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S)==30332==    AT 0X80BC85: WRITE_EXECUTE_LOAD_QUERY_LOG_EVENT(THD*, SQL_EXCHANGE*, CHAR CONST*, CHAR CONST*, ENUM_DUPLICATES, BOOL, BOOL, INT) (SQL_LOAD.CC:638)==30332==    BY 0X80D9CC: MYSQL_LOAD(THD*, SQL_EXCHANGE*, TABLE_LIST*, LIST<ITEM>&, LIST<ITEM>&, LIST<ITEM>&, ENUM_DUPLICATES, BOOL, BOOL) (SQL_LOAD.CC:592)==30332==    BY 0X7939B6: LOAD_LOG_EVENT::DO_APPLY_EVENT(ST_NET*, RELAY_LOG_INFO CONST*, BOOL) (LOG_EVENT.CC:4668)==30332==    BY 0X7994A8: EXECUTE_LOAD_LOG_EVENT::DO_APPLY_EVENT(RELAY_LOG_INFO CONST*) (LOG_EVENT.CC:6563)==30332==    BY 0X84A083: LOG_EVENT::APPLY_EVENT(RELAY_LOG_INFO CONST*) (LOG_EVENT.H:1059)==30332==    BY 0X843F82: APPLY_EVENT_AND_UPDATE_POS(LOG_EVENT*, THD*, RELAY_LOG_INFO*) (SLAVE.CC:2136)==30332==    BY 0X844477: EXEC_RELAY_LOG_EVENT(THD*, RELAY_LOG_INFO*) (SLAVE.CC:2277)==30332==    BY 0X844FA9: HANDLE_SLAVE_SQL (SLAVE.CC:3023)==30332==    BY 0X3895A06366: START_THREAD (IN LIB64LIBPTHREAD-2.5.SO)==30332==    BY 0X3894ED30AC: CLONE (IN LIB64LIBC-2.5.SO)^ FOUND WARNINGS IN EXPORTHOME2PB2TESTSB_1-884023-1256498343.82MYSQL-5.5.0-BETA-LINUX-X86_64-TESTMYSQL-TESTVAR-N_MIXLOGMYSQLD.1.ERRMYSQLTEST: ... DONE PROCESSING TEST COMMANDS.MYSQLTEST: TEST HAS SUCCEEDED!OK - SAVING EXPORTHOME2PB2TESTSB_1-884023-1256498343.82MYSQL-5.5.0-BETA-LINUX-X86_64-TESTMYSQL-TESTVAR-N_MIXLOGRPL.RPL_CROSS_VERSION TO EXPORTHOME2PB2TESTSB_1-884023-1256498343.82MYSQL-5.5.0-BETA-LINUX-X86_64-TESTMYSQL-TESTVAR-N_MIXLOGRPL.RPL_CROSS_VERSIONRETRYING TEST, ATTEMPT(23)...HOW TO REPEAT:HTTP:PB2.NORWAY.SUN.COMWEB.PY?TEMPLATE=MYSQL_SHOW_TEST_FAILURE&TEST_FAILURE_ID=2413446 ","SUMMARY":"BUGU00A0#48340  RPL_CROSS_VERSION:  FOUND WARNINGSERRORS IN SERVER LOG FILE! ","CLASS":0}
{"ID_DEFECT":"48993","DESCRIPTION":"     [23 NOV 2009 13:27]   SHANE BESTER          DESCRIPTION:5.1.41 MYSQLBINLOG SHOWS TWO VALGRIND ERRORS.1) MEMORY LEAK:103 BYTES IN 1 BLOCKS ARE DEFINITELY LOST IN LOSS RECORD 1 OF 2AT : MALLOC (VG_REPLACE_MALLOC.C:195)BY : MY_MALLOC (MY_MALLOC.C:34)BY : LOG_EVENT::READ_LOG_EVENT (LOG_EVENT.CC:1112)BY : DUMP_LOG_ENTRIES(CHAR CONST*) (MYSQLBINLOG.CC:1970)BY : MAIN (MYSQLBINLOG.CC:2076)2) UNINITIALIZED VALUES:1 ERRORS IN CONTEXT 1 OF 3:CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S)AT : QUERY_LOG_EVENT::PRINT_QUERY_HEADER (LOG_EVENT.CC:2838)BY : QUERY_LOG_EVENT::PRINT(_IO_FILE*, ST_PRINT_EVENT_INFO*) (LOG_EVENT.CC:2915)BY : PROCESS_EVENT (MYSQLBINLOG.CC:961)BY : DUMP_LOG_ENTRIES(CHAR CONST*) (MYSQLBINLOG.CC:1989)BY : MAIN (MYSQLBINLOG.CC:2076)UNINITIALISED VALUE WAS CREATED BY A STACK ALLOCATIONAT : DUMP_LOG_ENTRIES(CHAR CONST*) (MYSQLBINLOG.CC:1419)HOW TO REPEAT:VALGRIND --TOOL=MEMCHECK --TRACK-ORIGINS=YES --LEAK-CHECK=FULL --DB-ATTACH=NO -V --SHOW-REACHABLE=YES .BINMYSQLBINLOG BOX1-BIN.000001SUGGESTED FIX:WE DONT LIKE TO SEE VALGRIND ERRORS - FIX THEM. ","SUMMARY":"BUGU00A0#48993  VALGRIND ERRORS IN MYSQLBINLOG ","CLASS":0}
{"ID_DEFECT":"48993","DESCRIPTION":"     [23 NOV 2009 13:27]   SHANE BESTER          DESCRIPTION:5.1.41 MYSQLBINLOG SHOWS TWO VALGRIND ERRORS.1) MEMORY LEAK:103 BYTES IN 1 BLOCKS ARE DEFINITELY LOST IN LOSS RECORD 1 OF 2AT : MALLOC (VG_REPLACE_MALLOC.C:195)BY : MY_MALLOC (MY_MALLOC.C:34)BY : LOG_EVENT::READ_LOG_EVENT (LOG_EVENT.CC:1112)BY : DUMP_LOG_ENTRIES(CHAR CONST*) (MYSQLBINLOG.CC:1970)BY : MAIN (MYSQLBINLOG.CC:2076)2) UNINITIALIZED VALUES:1 ERRORS IN CONTEXT 1 OF 3:CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S)AT : QUERY_LOG_EVENT::PRINT_QUERY_HEADER (LOG_EVENT.CC:2838)BY : QUERY_LOG_EVENT::PRINT(_IO_FILE*, ST_PRINT_EVENT_INFO*) (LOG_EVENT.CC:2915)BY : PROCESS_EVENT (MYSQLBINLOG.CC:961)BY : DUMP_LOG_ENTRIES(CHAR CONST*) (MYSQLBINLOG.CC:1989)BY : MAIN (MYSQLBINLOG.CC:2076)UNINITIALISED VALUE WAS CREATED BY A STACK ALLOCATIONAT : DUMP_LOG_ENTRIES(CHAR CONST*) (MYSQLBINLOG.CC:1419)HOW TO REPEAT:VALGRIND --TOOL=MEMCHECK --TRACK-ORIGINS=YES --LEAK-CHECK=FULL --DB-ATTACH=NO -V --SHOW-REACHABLE=YES .BINMYSQLBINLOG BOX1-BIN.000001SUGGESTED FIX:WE DONT LIKE TO SEE VALGRIND ERRORS - FIX THEM. ","SUMMARY":"BUGU00A0#48993  VALGRIND ERRORS IN MYSQLBINLOG ","CLASS":0}
{"ID_DEFECT":"48993","DESCRIPTION":"     [23 NOV 2009 13:27]   SHANE BESTER          DESCRIPTION:5.1.41 MYSQLBINLOG SHOWS TWO VALGRIND ERRORS.1) MEMORY LEAK:103 BYTES IN 1 BLOCKS ARE DEFINITELY LOST IN LOSS RECORD 1 OF 2AT : MALLOC (VG_REPLACE_MALLOC.C:195)BY : MY_MALLOC (MY_MALLOC.C:34)BY : LOG_EVENT::READ_LOG_EVENT (LOG_EVENT.CC:1112)BY : DUMP_LOG_ENTRIES(CHAR CONST*) (MYSQLBINLOG.CC:1970)BY : MAIN (MYSQLBINLOG.CC:2076)2) UNINITIALIZED VALUES:1 ERRORS IN CONTEXT 1 OF 3:CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S)AT : QUERY_LOG_EVENT::PRINT_QUERY_HEADER (LOG_EVENT.CC:2838)BY : QUERY_LOG_EVENT::PRINT(_IO_FILE*, ST_PRINT_EVENT_INFO*) (LOG_EVENT.CC:2915)BY : PROCESS_EVENT (MYSQLBINLOG.CC:961)BY : DUMP_LOG_ENTRIES(CHAR CONST*) (MYSQLBINLOG.CC:1989)BY : MAIN (MYSQLBINLOG.CC:2076)UNINITIALISED VALUE WAS CREATED BY A STACK ALLOCATIONAT : DUMP_LOG_ENTRIES(CHAR CONST*) (MYSQLBINLOG.CC:1419)HOW TO REPEAT:VALGRIND --TOOL=MEMCHECK --TRACK-ORIGINS=YES --LEAK-CHECK=FULL --DB-ATTACH=NO -V --SHOW-REACHABLE=YES .BINMYSQLBINLOG BOX1-BIN.000001SUGGESTED FIX:WE DONT LIKE TO SEE VALGRIND ERRORS - FIX THEM. ","SUMMARY":"BUGU00A0#48993  VALGRIND ERRORS IN MYSQLBINLOG ","CLASS":0}
{"ID_DEFECT":"49119","DESCRIPTION":"     [26 NOV 2009 4:18]   LIBING SONG          DESCRIPTION:SLAVE IS CRASHED WHEN REPLICATING REVOKE ... ON PROCEDURE|FUNCTION FROM USER1@LOCALHOST, IF GRANT ... ON PROCEDURE|FUNCTION TO USER1@LOCALHOST IS NOT EXECUTED BEFORE IT.HOW TO REPEAT:SOURCE INCLUDEMASTER-SLAVE.INC;CREATE TABLE T1(C1 INT);DELIMITER |;CREATE PROCEDURE P1() SELECT * FROM T1 |DELIMITER ;|REVOKE EXECUTE ON PROCEDURE P1 FROM ROOT@LOCALHOST;SOURCE INCLUDEMASTER-SLAVE-END.INC; ","SUMMARY":"BUGU00A0#49119  MASTER CRASHES WHEN EXECUTING REVOKE ... ON PROCEDURE|FUNCTION FROM ... ","CLASS":0}
{"ID_DEFECT":"49222","DESCRIPTION":"     [30 NOV 2009 17:46]   SVEN SANDBERG          DESCRIPTION:WHEN A STATEMENT THAT USES THE RAND() FUNCTION IS REPLICATED IN STATEMENT FORMAT, THE RANDOM SEED IS SAVED TO THE BINLOG SO THAT THE QUERY SHALL REPLICATE CORRECTLY IN MOST CASES.HOWEVER, THIS IS NOT ENOUGH IN CASES WHERE THE VALUE OF RAND() IS INSERTED INTO SEVERAL ROWS, BECAUSE THE ORDER IN WHICH ROWS ARE RETREIVED IS NOT SPECIFIED. IN PARTICULAR, IF THE ORDER ROWS ARE RETRIEVED ON MASTER DIFFERS FROM THE ORDER ROWS ARE RETRIEVED ON SLAVE, THEN STATEMENTS LIKE THE FOLLOWING CAN CREATE DIFFERENCES ON MASTER AND SLAVE;  UPDATE T1 SET A = RAND();HOW TO REPEAT:--SOURCE INCLUDEHAVE_BINLOG_FORMAT_MIXED.INC--SOURCE INCLUDEMASTER-SLAVE.INC--ECHO [ON MASTER]CREATE TABLE T1 (A INT, B INT);SET SQL_LOG_BIN = 0;INSERT INTO T1 VALUES (1, 1), (2, 2);SET SQL_LOG_BIN = 1;--ECHO [ON SLAVE]--SYNC_SLAVE_WITH_MASTERINSERT INTO T1 VALUES (2, 2), (1, 1);--ECHO [ON MASTER]--CONNECTION MASTERUPDATE T1 SET B = RAND() * 1000;SELECT * FROM T1;--ECHO [ON SLAVE]--SYNC_SLAVE_WITH_MASTERSELECT * FROM T1;SUGGESTED FIX:MARK RAND() AS UNSAFE:=== MODIFIED FILE SQLITEM_CREATE.CC--- SQLITEM_CREATE.CCT2009-08-28 16:21:54 +0000+++ SQLITEM_CREATE.CCT2009-11-30 17:33:42 +0000@@ -4173,6 +4173,16 @@   IF (ITEM_LIST != NULL)     ARG_COUNT= ITEM_LIST->ELEMENTS; +  *+    WHEN RAND() IS BINLOGGED, THE SEED IS BINLOGGED TOO.  SO THE+    SEQUENCE OF RANDOM NUMBERS IS THE SAME ON A REPLICATION SLAVE AS+    ON THE MASTER.  HOWEVER, IF SEVERAL RAND() VALUES ARE INSERTED+    INTO A TABLE, THE ORDER IN WHICH THE ROWS ARE MODIFIED MAY DIFFER+    BETWEEN MASTER AND SLAVE, BECAUSE THE ORDER IS UNDEFINED.  HENCE,+    THE STATEMENT IS UNSAFE TO LOG IN STATEMENT FORMAT.+  *+  THD->LEX->SET_STMT_UNSAFE();+   SWITCH (ARG_COUNT)    CASE 0:    ","SUMMARY":"BUGU00A0#49222  MARK RAND() AS UNSAFE ","CLASS":0}
{"ID_DEFECT":"50451","DESCRIPTION":"     [19 JAN 2010 18:39]   SERGEY VOJTOVICH          DESCRIPTION:RPL.RPL_LOADDATA_CONCURRENT STMT       [ FAIL ]        TEST ENDED AT 2010-01-19 22:35:48CURRENT_TEST: RPL.RPL_LOADDATA_CONCURRENTMYSQLTEST: IN INCLUDED FILE .INCLUDEDIFF_TABLES.INC: AT LINE 117: COMMAND DIFF_FILES FAILED WITH ERROR 2THE RESULT FROM QUERIES JUST BEFORE THE FAILURE WAS:< SNIP >### ASSERTION: WORKS WITHOUT STATING THE DEFAULT DATABASELOAD DATA CONCURRENT LOCAL INFILE MYSQLTEST_VARDIRSTD_DATALOADDATA5.DAT INTO TABLE B48297_DB1.T1;### DISCONNECT AND SWITCH BACK TO MASTER CONNECTIONUSE B48297_DB1;COMPARING TABLES MASTER:B48297_DB1.T1 AND SLAVE:B48297_DB1.T1--- HOMESVOJDEVELBZR-MYSQLMYSQL-5.1-BUGTEAM-TESTMYSQL-TESTVARTMPDIFF_TABLE_1T2010-01-19 21:35:47.000000000 +0300+++ HOMESVOJDEVELBZR-MYSQLMYSQL-5.1-BUGTEAM-TESTMYSQL-TESTVARTMPDIFF_TABLE_2T2010-01-19 21:35:47.000000000 +0300@@ -1,9 +1,12 @@ 1          2           1          2           1          2          +1          2          +3          4           3          4           3          4           3          4           5          6           5          6           5          6          +5          6          HOW TO REPEAT:BRANCH MYSQL-5.1-BUGTEAM, BUILDCOMPILE-PENTIUM-DEBUG-MAX, .MTR --REPEAT=20 RPL_LOADDATA_CONCURRENT. ","SUMMARY":"BUGU00A0#50451  RPL_LOADDATA_CONCURRENT FAILS SPORADICALLY ","CLASS":0}
{"ID_DEFECT":"53657","DESCRIPTION":"     [14 MAY 2010 16:32]   ELENA STEPANOVA          DESCRIPTION:#5  0X0000003520C31BF0 IN ABORT () FROM LIB64LIBC.SO.6#6  0X00000000009F29B4 IN SAFE_MUTEX_LOCK (MP=0X20A0BA70, TRY_LOCK=0 0, FILE=0XBCEF2E MF_IOCACHE.C, LINE=1722) AT THR_MUTEX.C:156#7  0X00000000009C99A8 IN MY_B_FLUSH_IO_CACHE (INFO=0X20A0BA10, NEED_APPEND_BUFFER_LOCK=1) AT MF_IOCACHE.C:1722#8  0X00000000008155AC IN FLUSH_MASTER_INFO (MI=0X20A09E40, FLUSH_RELAY_LOG_CACHE=TRUE) AT RPL_MI.CC:361#9  0X00000000008077C5 IN HANDLE_SLAVE_IO (ARG=0X20A09E40) AT SLAVE.CC:2734#10 0X00000035218062F7 IN START_THREAD () FROM LIB64LIBPTHREAD.SO.0#11 0X0000003520CD1B6D IN CLONE () FROM LIB64LIBC.SO.6BACKTRACE FOR ALL THREADS WILL BE ATTACHEDTHERE WAS A BUG#50364 WHICH MIGHT BE RELATED, BUT IT IS CLOSED BY NOW, AND THERE IS NO INDICATION THE BUGFIX WAS PUSHED INTO 5.1HOW TO REPEAT:NO REPEATABLE TEST CASE YET, THE CRASH HAPPENED IN SYSQA PB2 TESTS. ","SUMMARY":"BUGU00A0#53657  SLAVE CRASHED WITH ERROR 22 WHEN TRYING TO LOCK MUTEX AT MF_IOCACHE.C, LINE 1722 ","CLASS":0}
{"ID_DEFECT":"58546","DESCRIPTION":"     [29 NOV 2010 4:36]   ZHENXING HE          DESCRIPTION:RPL_PACKET.TEST FAILS SPORADICALLY DUE TO TIMEOUT ON PB WITH THE FOLLOWING BACKTRACE:PROGRAM TERMINATED WITH SIGNAL 6, ABORTED.[NEW PROCESS 19147][NEW PROCESS 19168][NEW PROCESS 19165][NEW PROCESS 19150]#0  0X00007FD221664C36 IN PTHREAD_KILL () FROM LIBLIBPTHREAD.SO.0#0  0X00007FD221664C36 IN PTHREAD_KILL () FROM LIBLIBPTHREAD.SO.0#1  0X00000000006300D7 IN HANDLE_SEGFAULT (SIG=6) AT MYSQLD.CC:2607#2  <SIGNAL HANDLER CALLED>#3  0X00007FD220AF7CE2 IN SELECT () FROM LIBLIBC.SO.6#4  0X000000000062DFCD IN HANDLE_CONNECTIONS_SOCKETS (    ARG=<VALUE OPTIMIZED OUT>) AT MYSQLD.CC:5098#5  0X00000000006329DC IN MAIN (ARGC=<VALUE OPTIMIZED OUT>,     ARGV=<VALUE OPTIMIZED OUT>) AT MYSQLD.CC:4582THREAD 4 (PROCESS 19150):#0  0X00007FD221667797 IN DO_SIGWAIT () FROM LIBLIBPTHREAD.SO.0#1  0X00007FD22166783D IN SIGWAIT () FROM LIBLIBPTHREAD.SO.0#2  0X000000000062FB63 IN SIGNAL_HAND (ARG=<VALUE OPTIMIZED OUT>)    AT MYSQLD.CC:2801#3  0X00007FD22165FFC7 IN START_THREAD () FROM LIBLIBPTHREAD.SO.0#4  0X00007FD220AFE5AD IN CLONE () FROM LIBLIBC.SO.6#5  0X0000000000000000 IN ?? ()THREAD 3 (PROCESS 19165):#0  0X00007FD221663FAD IN PTHREAD_COND_TIMEDWAIT@@GLIBC_2.3.2 ()   FROM LIBLIBPTHREAD.SO.0#1  0X00000000007490A4 IN TERMINATE_SLAVE_THREAD (THD=0X7FD21C000970,     TERM_LOCK=0X1D45BB8, TERM_COND=0X1D45C10, SLAVE_RUNNING=0X1D46344,     SKIP_LOCK=146) AT SLAVE.CC:535#2  0X00000000007491AC IN TERMINATE_SLAVE_THREADS (MI=0X1D434A0,     THREAD_MASK=2, SKIP_LOCK=TRUE) AT SLAVE.CC:426#3  0X000000000075000B IN STOP_SLAVE (THD=0X1D4EAA0, MI=0X1D434A0,     NET_REPORT=TRUE) AT SQL_REPL.CC:968#4  0X000000000063D318 IN MYSQL_EXECUTE_COMMAND (THD=0X1D4EAA0)    AT SQL_PARSE.CC:2888#5  0X000000000063FE6B IN MYSQL_PARSE (THD=0X1D4EAA0,     RAWBUF=0X1D57D80 STOP SLAVE, LENGTH=10, FOUND_SEMICOLON=0X41D6A070)    AT SQL_PARSE.CC:6068#6  0X0000000000640F92 IN DISPATCH_COMMAND (COMMAND=COM_QUERY, THD=0X1D4EAA0,     PACKET=0X1D24581 STOP SLAVE, PACKET_LENGTH=<VALUE OPTIMIZED OUT>)    AT SQL_PARSE.CC:1261#7  0X0000000000642176 IN DO_COMMAND (THD=0X1D4EAA0) AT SQL_PARSE.CC:889#8  0X0000000000635F26 IN HANDLE_ONE_CONNECTION (ARG=<VALUE OPTIMIZED OUT>)    AT SQL_CONNECT.CC:1149#9  0X00007FD22165FFC7 IN START_THREAD () FROM LIBLIBPTHREAD.SO.0#10 0X00007FD220AFE5AD IN CLONE () FROM LIBLIBC.SO.6#11 0X0000000000000000 IN ?? ()THREAD 2 (PROCESS 19168):#0  0X00007FD221663D29 IN PTHREAD_COND_WAIT@@GLIBC_2.3.2 ()   FROM LIBLIBPTHREAD.SO.0#1  0X00000000006BBFE7 IN MYSQL_BIN_LOG::WAIT_FOR_UPDATE (    THIS=<VALUE OPTIMIZED OUT>, THD=0X7FD21C000970, IS_SLAVE=143)    AT LOG.CC:4916#2  0X000000000074B482 IN HANDLE_SLAVE_SQL (ARG=<VALUE OPTIMIZED OUT>)    AT SLAVE.CC:4279#3  0X00007FD22165FFC7 IN START_THREAD () FROM LIBLIBPTHREAD.SO.0#4  0X00007FD220AFE5AD IN CLONE () FROM LIBLIBC.SO.6#5  0X0000000000000000 IN ?? ()THREAD 1 (PROCESS 19147):#0  0X00007FD221664C36 IN PTHREAD_KILL () FROM LIBLIBPTHREAD.SO.0#1  0X00000000006300D7 IN HANDLE_SEGFAULT (SIG=6) AT MYSQLD.CC:2607#2  <SIGNAL HANDLER CALLED>#3  0X00007FD220AF7CE2 IN SELECT () FROM LIBLIBC.SO.6#4  0X000000000062DFCD IN HANDLE_CONNECTIONS_SOCKETS (    ARG=<VALUE OPTIMIZED OUT>) AT MYSQLD.CC:5098#5  0X00000000006329DC IN MAIN (ARGC=<VALUE OPTIMIZED OUT>,     ARGV=<VALUE OPTIMIZED OUT>) AT MYSQLD.CC:4582HOW TO REPEAT:CHECK:HTTP:PB2.NORWAY.SUN.COMWEB.PY?TEMPLATE=MYSQL_SHOW_TEST_FAILURE&SEARCH=YES&PUSH_ID=17805...AND ALSO:HTTP:PB2.NORWAY.SUN.COMWEB.PY?TEMPLATE=MYSQL_SHOW_TEST_FAILURE&TEST_OUTPUT_ID=DAEEA558B... ","SUMMARY":"BUGU00A0#58546  TEST RPL_PACKET TIMEOUT FAILURE SPORADICALLY ON PB ","CLASS":0}
